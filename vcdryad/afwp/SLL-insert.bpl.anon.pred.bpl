
const {:existential true} b0000 : bool;
const {:existential true} b0001 : bool;
const {:existential true} b0002 : bool;
const {:existential true} b0003 : bool;
const {:existential true} b0004 : bool;
const {:existential true} b0005 : bool;
const {:existential true} b0006 : bool;
const {:existential true} b0007 : bool;
const {:existential true} b0008 : bool;
const {:existential true} b0009 : bool;
const {:existential true} b0010 : bool;
const {:existential true} b0011 : bool;
const {:existential true} b0012 : bool;
const {:existential true} b0013 : bool;
const {:existential true} b0014 : bool;
const {:existential true} b0015 : bool;
const {:existential true} b0016 : bool;
const {:existential true} b0017 : bool;
const {:existential true} b0018 : bool;
const {:existential true} b0019 : bool;
const {:existential true} b0020 : bool;
const {:existential true} b0021 : bool;
const {:existential true} b0022 : bool;
const {:existential true} b0023 : bool;
const {:existential true} b0024 : bool;
const {:existential true} b0025 : bool;
const {:existential true} b0026 : bool;
const {:existential true} b0027 : bool;
const {:existential true} b0028 : bool;
const {:existential true} b0029 : bool;
const {:existential true} b0030 : bool;
const {:existential true} b0031 : bool;
const {:existential true} b0032 : bool;
const {:existential true} b0033 : bool;
const {:existential true} b0034 : bool;
const {:existential true} b0035 : bool;
const {:existential true} b0036 : bool;
const {:existential true} b0037 : bool;
const {:existential true} b0038 : bool;
const {:existential true} b0039 : bool;
const {:existential true} b0040 : bool;
const {:existential true} b0041 : bool;
const {:existential true} b0042 : bool;
const {:existential true} b0043 : bool;
const {:existential true} b0044 : bool;
const {:existential true} b0045 : bool;
const {:existential true} b0046 : bool;
const {:existential true} b0047 : bool;
const {:existential true} b0048 : bool;
const {:existential true} b0049 : bool;
const {:existential true} b0050 : bool;
const {:existential true} b0051 : bool;
const {:existential true} b0052 : bool;
const {:existential true} b0053 : bool;
const {:existential true} b0054 : bool;
const {:existential true} b0055 : bool;
const {:existential true} b0056 : bool;
const {:existential true} b0057 : bool;
const {:existential true} b0058 : bool;
const {:existential true} b0059 : bool;
const {:existential true} b0060 : bool;
const {:existential true} b0061 : bool;
const {:existential true} b0062 : bool;
const {:existential true} b0063 : bool;
const {:existential true} b0064 : bool;
const {:existential true} b0065 : bool;
const {:existential true} b0066 : bool;
const {:existential true} b0067 : bool;
const {:existential true} b0068 : bool;
const {:existential true} b0069 : bool;
const {:existential true} b0070 : bool;
const {:existential true} b0071 : bool;
const {:existential true} b0072 : bool;
const {:existential true} b0073 : bool;
const {:existential true} b0074 : bool;
const {:existential true} b0075 : bool;
const {:existential true} b0076 : bool;
const {:existential true} b0077 : bool;
const {:existential true} b0078 : bool;
const {:existential true} b0079 : bool;
const {:existential true} b0080 : bool;
const {:existential true} b0081 : bool;
const {:existential true} b0082 : bool;
const {:existential true} b0083 : bool;
const {:existential true} b0084 : bool;
const {:existential true} b0085 : bool;
const {:existential true} b0086 : bool;
const {:existential true} b0087 : bool;
const {:existential true} b0088 : bool;
const {:existential true} b0089 : bool;
const {:existential true} b0090 : bool;
const {:existential true} b0091 : bool;
const {:existential true} b0092 : bool;
const {:existential true} b0093 : bool;
const {:existential true} b0094 : bool;
const {:existential true} b0095 : bool;
const {:existential true} b0096 : bool;
const {:existential true} b0097 : bool;
const {:existential true} b0098 : bool;
const {:existential true} b0099 : bool;
const {:existential true} b0100 : bool;
const {:existential true} b0101 : bool;
const {:existential true} b0102 : bool;
const {:existential true} b0103 : bool;
const {:existential true} b0104 : bool;
const {:existential true} b0105 : bool;
const {:existential true} b0106 : bool;
const {:existential true} b0107 : bool;
const {:existential true} b0108 : bool;
const {:existential true} b0109 : bool;
const {:existential true} b0110 : bool;
const {:existential true} b0111 : bool;
const {:existential true} b0112 : bool;
const {:existential true} b0113 : bool;
const {:existential true} b0114 : bool;
const {:existential true} b0115 : bool;
const {:existential true} b0116 : bool;
const {:existential true} b0117 : bool;
const {:existential true} b0118 : bool;
const {:existential true} b0119 : bool;
const {:existential true} b0120 : bool;
const {:existential true} b0121 : bool;
const {:existential true} b0122 : bool;
const {:existential true} b0123 : bool;
const {:existential true} b0124 : bool;
const {:existential true} b0125 : bool;
const {:existential true} b0126 : bool;
const {:existential true} b0127 : bool;
const {:existential true} b0128 : bool;
const {:existential true} b0129 : bool;
const {:existential true} b0130 : bool;
const {:existential true} b0131 : bool;
const {:existential true} b0132 : bool;
const {:existential true} b0133 : bool;
const {:existential true} b0134 : bool;
const {:existential true} b0135 : bool;
const {:existential true} b0136 : bool;
const {:existential true} b0137 : bool;
const {:existential true} b0138 : bool;
const {:existential true} b0139 : bool;
const {:existential true} b0140 : bool;
const {:existential true} b0141 : bool;
const {:existential true} b0142 : bool;
const {:existential true} b0143 : bool;
const {:existential true} b0144 : bool;
const {:existential true} b0145 : bool;
const {:existential true} b0146 : bool;
const {:existential true} b0147 : bool;
const {:existential true} b0148 : bool;
const {:existential true} b0149 : bool;
const {:existential true} b0150 : bool;
const {:existential true} b0151 : bool;
const {:existential true} b0152 : bool;
const {:existential true} b0153 : bool;
const {:existential true} b0154 : bool;
const {:existential true} b0155 : bool;
const {:existential true} b0156 : bool;
const {:existential true} b0157 : bool;
const {:existential true} b0158 : bool;
const {:existential true} b0159 : bool;
const {:existential true} b0160 : bool;
const {:existential true} b0161 : bool;
const {:existential true} b0162 : bool;
const {:existential true} b0163 : bool;
const {:existential true} b0164 : bool;
const {:existential true} b0165 : bool;
const {:existential true} b0166 : bool;
const {:existential true} b0167 : bool;
const {:existential true} b0168 : bool;
const {:existential true} b0169 : bool;
const {:existential true} b0170 : bool;
const {:existential true} b0171 : bool;
const {:existential true} b0172 : bool;
const {:existential true} b0173 : bool;
const {:existential true} b0174 : bool;
const {:existential true} b0175 : bool;
const {:existential true} b0176 : bool;
const {:existential true} b0177 : bool;
const {:existential true} b0178 : bool;
const {:existential true} b0179 : bool;
const {:existential true} b0180 : bool;
const {:existential true} b0181 : bool;
const {:existential true} b0182 : bool;
const {:existential true} b0183 : bool;
const {:existential true} b0184 : bool;
const {:existential true} b0185 : bool;
const {:existential true} b0186 : bool;
const {:existential true} b0187 : bool;
const {:existential true} b0188 : bool;
const {:existential true} b0189 : bool;
const {:existential true} b0190 : bool;
const {:existential true} b0191 : bool;
const {:existential true} b0192 : bool;
const {:existential true} b0193 : bool;
const {:existential true} b0194 : bool;
const {:existential true} b0195 : bool;
const {:existential true} b0196 : bool;
const {:existential true} b0197 : bool;
const {:existential true} b0198 : bool;
const {:existential true} b0199 : bool;
const {:existential true} b0200 : bool;

axiom $arch_ptr_size == 8;

axiom $arch_spec_ptr_start == $max.u8;

const unique ^$##thread_id: $ctype;

axiom $def_math_type(^$##thread_id);

type $##thread_id;

const unique ^$##club: $ctype;

axiom $def_math_type(^$##club);

type $##club;

const unique ^s_node: $ctype;

axiom $is_span_sequential(^s_node);

axiom $def_struct_type(^s_node, 16, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^s_node) } $inv2(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^s_node) } $inv2_without_lemmas(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^s_node)) } $in(q, $composite_extent(s, p, ^s_node)) == (q == p));

const unique s_node.key: $field;

axiom $def_phys_field(^s_node, s_node.key, ^^i4, false, 0);

const unique s_node.next: $field;

axiom $def_phys_field(^s_node, s_node.next, $ptr_to(^s_node), false, 8);

function F#glob_reach() : $oset;

const unique cf#glob_reach: $pure_function;

axiom $function_arg_type(cf#glob_reach, 0, ^$#oset);

procedure glob_reach() returns ($result: $oset);
  free ensures $result == F#glob_reach();
  free ensures $call_transition(old($s), $s);



const unique ^$#_purecall_handler#1: $ctype;

axiom $def_fnptr_type(^$#_purecall_handler#1);

type $#_purecall_handler#1;

const unique ^$#_invalid_parameter_handler#2: $ctype;

axiom $def_fnptr_type(^$#_invalid_parameter_handler#2);

type $#_invalid_parameter_handler#2;

const unique ^$#SLL_insert.c..36263#3: $ctype;

axiom $def_fnptr_type(^$#SLL_insert.c..36263#3);

type $#SLL_insert.c..36263#3;

const unique ^$#_PtFuncCompare#4: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#4);

type $#_PtFuncCompare#4;

const unique ^$#_PtFuncCompare#5: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#5);

type $#_PtFuncCompare#5;

const unique ^$#_PtFuncCompare#6: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#6);

type $#_PtFuncCompare#6;

const unique ^$#_PtFuncCompare#7: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#7);

type $#_PtFuncCompare#7;

const unique ^$#_onexit_t#8: $ctype;

axiom $def_fnptr_type(^$#_onexit_t#8);

type $#_onexit_t#8;

function F##int_max(SP#x: int, SP#y: int) : int;

const unique cf##int_max: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_max(SP#x, SP#y) } $in_range_i4(F##int_max(SP#x, SP#y)));

axiom $function_arg_type(cf##int_max, 0, ^^i4);

axiom $function_arg_type(cf##int_max, 1, ^^i4);

axiom $function_arg_type(cf##int_max, 2, ^^i4);

procedure #int_max(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_max(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F##int_min(SP#x: int, SP#y: int) : int;

const unique cf##int_min: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_min(SP#x, SP#y) } $in_range_i4(F##int_min(SP#x, SP#y)));

axiom $function_arg_type(cf##int_min, 0, ^^i4);

axiom $function_arg_type(cf##int_min, 1, ^^i4);

axiom $function_arg_type(cf##int_min, 2, ^^i4);

procedure #int_min(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_min(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F#sll(#s: $state, SP#hd: $ptr) : bool;

const unique cf#sll: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll(#s, SP#hd) } 1 < $decreases_level ==> $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll(#s, SP#hd));

axiom $function_arg_type(cf#sll, 0, ^^bool);

axiom $function_arg_type(cf#sll, 1, $ptr_to(^s_node));

procedure sll(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  free ensures $result == F#sll($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#srtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#srtl(#s, SP#hd)));

axiom $function_arg_type(cf#srtl, 0, ^^bool);

axiom $function_arg_type(cf#srtl, 1, $ptr_to(^s_node));

procedure srtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#srtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#rsrtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#rsrtl(#s, SP#hd)));

axiom $function_arg_type(cf#rsrtl, 0, ^^bool);

axiom $function_arg_type(cf#rsrtl, 1, $ptr_to(^s_node));

procedure rsrtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#rsrtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#sll_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#sll_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_reach, 1, $ptr_to(^s_node));

procedure sll_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#sll_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#srtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#srtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_reach, 1, $ptr_to(^s_node));

procedure srtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#srtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#rsrtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#rsrtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#rsrtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#rsrtl_reach, 1, $ptr_to(^s_node));

procedure rsrtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#rsrtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_keys(#s: $state, SP#hd: $ptr) : $intset;

const unique cf#sll_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_keys(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_keys(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_keys(#s, SP#hd) == $intset_empty()));

axiom $function_arg_type(cf#sll_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_keys, 1, $ptr_to(^s_node));

procedure sll_keys(SP#hd: $ptr) returns ($result: $intset);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $intset_empty();
  free ensures $result == F#sll_keys($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_min_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_min_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_min_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_min_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_min_key, 1, $ptr_to(^s_node));

procedure sll_min_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_min_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_max_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_max_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_max_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_max_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_max_key, 1, $ptr_to(^s_node));

procedure sll_max_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_max_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_list_len_next(#s: $state, SP#x: $ptr) : int;

const unique cf#sll_list_len_next: $pure_function;

axiom (forall #s: $state, SP#x: $ptr :: { F#sll_list_len_next(#s, SP#x) } 1 < $decreases_level ==> $in_range_nat(F#sll_list_len_next(#s, SP#x)) && ($non_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) > 0) && ($is_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) == 0));

axiom $function_arg_type(cf#sll_list_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_list_len_next, 1, $ptr_to(^s_node));

procedure sll_list_len_next(SP#x: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $non_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result > 0;
  ensures $is_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result == 0;
  free ensures $result == F#sll_list_len_next($s, SP#x);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#sll_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg(#s, SP#hd, SP#tl) == F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg(#s, SP#hd, SP#tl)) && (F#sll_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && F#sll(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1)));

axiom $function_arg_type(cf#sll_lseg, 0, ^^bool);

axiom $function_arg_type(cf#sll_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg, 2, $ptr_to(^s_node));

procedure sll_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#sll($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1);
  free ensures $result == F#sll_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#srtl_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, SP#hd, SP#tl) == F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && (F#srtl_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && F#srtl(#s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key(#s, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))));

axiom $function_arg_type(cf#srtl_lseg, 0, ^^bool);

axiom $function_arg_type(cf#srtl_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg, 2, $ptr_to(^s_node));

procedure srtl_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#srtl($s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key($s, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  free ensures $result == F#srtl_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#sll_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_reach, 2, $ptr_to(^s_node));

procedure sll_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#sll_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#srtl_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#srtl_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg_reach, 2, $ptr_to(^s_node));

procedure srtl_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#srtl_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_keys(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $intset;

const unique cf#sll_lseg_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_keys(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == $intset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_lseg_keys(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_lseg_keys, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_keys, 2, $ptr_to(^s_node));

procedure sll_lseg_keys(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $intset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $intset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  free ensures $result == F#sll_lseg_keys($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_min_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_min_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_min_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_min_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_min_key, 2, $ptr_to(^s_node));

procedure sll_lseg_min_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_min_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_max_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_max_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_max_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_max_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_max_key, 2, $ptr_to(^s_node));

procedure sll_lseg_max_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_max_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_len_next(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_len_next: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_len_next(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_nat(F#sll_lseg_len_next(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == 0) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) > 0));

axiom $function_arg_type(cf#sll_lseg_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_lseg_len_next, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_len_next, 2, $ptr_to(^s_node));

procedure sll_lseg_len_next(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == 0;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $result > 0;
  free ensures $result == F#sll_lseg_len_next($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



procedure SLL_insert(P#h: $ptr, P#v: int) returns ($result: $ptr);
  requires F#srtl($s, $phys_ptr_cast(P#h, ^s_node));
  modifies $s, $cev_pc;
  ensures F#srtl($s, $phys_ptr_cast(P#h, ^s_node));
  ensures F#srtl($s, $phys_ptr_cast($result, ^s_node));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



implementation SLL_insert(P#h: $ptr, P#v: int) returns ($result: $ptr)
{
  var stmtexpr8#19: $state;
  var SL#_dryad_S7: $state;
  var stmtexpr7#18: $state;
  var SL#_dryad_S6: $state;
  var stmtexpr6#17: $state;
  var _dryad_S5#5: $state;
  var stmtexpr5#16: $state;
  var _dryad_S4#4: $state;
  var stmtexpr4#15: $state;
  var _dryad_S3#3: $state;
  var stmtexpr3#14: $state;
  var _dryad_S2#2: $state;
  var stmtexpr2#13: $state;
  var _dryad_S1#1: $state;
  var stmtexpr1#12: $oset;
  var stmtexpr0#11: $state;
  var _dryad_S0#0: $state;
  var L#e: $ptr;
  var stmtexpr6#10: $state;
  var SL#_dryad_S5: $state;
  var stmtexpr5#9: $state;
  var SL#_dryad_S4: $state;
  var stmtexpr4#8: $state;
  var SL#_dryad_S3: $state;
  var stmtexpr3#7: $state;
  var SL#_dryad_S2: $state;
  var stmtexpr2#6: $state;
  var SL#_dryad_S1: $state;
  var stmtexpr1#5: $oset;
  var stmtexpr0#4: $state;
  var SL#_dryad_S0: $state;
  var L#hd: $ptr;
  var stmtexpr0#3: $ptr;
  var SL#i0: $ptr;
  var ite#1: bool;
  var loopState#0: $state;
  var SL#ALL_REACH: $oset;
  var L#i: $ptr;
  var L#j: $ptr;
  var stmtexpr1#21: $oset;
  var stmtexpr0#20: $oset;
  var SL#_dryad_G1: $oset;
  var SL#_dryad_G0: $oset;
  var #wrTime$3^3.3: int;
  var #stackframe: int;

// INV:PTR: P#h, L#i, L#j
// INV:INT: P#v
// INV:LST: srtl

  anon9:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$3^3.3, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$3^3.3 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$3^3.3, (lambda #p: $ptr :: false));
    // assume true
    // assume @in_range_i4(v); 
    assume $in_range_i4(P#v);
    // assume @decreases_level_is(2147483647); 
    assume 2147483647 == $decreases_level;
    // assume true
    //  --- Dryad annotated function --- 
    // _math \oset _dryad_G0; 
    // _math \oset _dryad_G1; 
    // _dryad_G0 := srtl_reach(h); 
    call SL#_dryad_G0 := srtl_reach($phys_ptr_cast(P#h, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset stmtexpr0#20; 
    // stmtexpr0#20 := _dryad_G0; 
    stmtexpr0#20 := SL#_dryad_G0;
    // _dryad_G1 := _dryad_G0; 
    SL#_dryad_G1 := SL#_dryad_G0;
    // _math \oset stmtexpr1#21; 
    // stmtexpr1#21 := _dryad_G1; 
    stmtexpr1#21 := SL#_dryad_G1;
    // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_keys(h), @_vcc_intset_union(sll_keys(*((h->next))), @_vcc_intset_singleton(*((h->key)))))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#h, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_list_len_next(h), unchecked+(sll_list_len_next(*((h->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#h, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(rsrtl(h), &&(&&(rsrtl(*((h->next))), unchecked!(@_vcc_oset_in(h, rsrtl_reach(*((h->next)))))), >=(*((h->key)), sll_max_key(*((h->next))))))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(h), ==(rsrtl_reach(h), @_vcc_oset_union(rsrtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(h), ==(sll(h), &&(sll(*((h->next))), unchecked!(@_vcc_oset_in(h, sll_reach(*((h->next)))))))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#h, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_reach(h), @_vcc_oset_union(sll_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_max_key(h), @\int_max(*((h->key)), sll_max_key(*((h->next)))))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_min_key(h), @\int_min(*((h->key)), sll_min_key(*((h->next)))))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(srtl(h), &&(&&(srtl(*((h->next))), unchecked!(@_vcc_oset_in(h, srtl_reach(*((h->next)))))), <=(*((h->key)), sll_min_key(*((h->next))))))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(h), ==(srtl_reach(h), @_vcc_oset_union(srtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
    // struct s_node* j; 
    // struct s_node* i; 
    // _math \oset ALL_REACH; 
    // ALL_REACH := srtl_reach(h); 
    call SL#ALL_REACH := srtl_reach($phys_ptr_cast(P#h, ^s_node));
    assume $full_stop_ext(#tok$3^9.29, $s);
    // assume ==>(@_vcc_ptr_neq_null(h), &&(@_vcc_mutable(@state, h), @writes_check(h))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> $mutable($s, $phys_ptr_cast(P#h, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(P#h, ^s_node));
    // i := h; 
    L#i := $phys_ptr_cast(P#h, ^s_node);
    // assert sll_lseg(i, i); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#i, ^s_node), $phys_ptr_cast(L#i, ^s_node));
    // assume sll_lseg(i, i); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#i, ^s_node), $phys_ptr_cast(L#i, ^s_node));
    // assert srtl_lseg(i, i); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#i, ^s_node), $phys_ptr_cast(L#i, ^s_node));
    // assume srtl_lseg(i, i); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#i, ^s_node), $phys_ptr_cast(L#i, ^s_node));
    // assert sll_lseg(j, j); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#j, ^s_node), $phys_ptr_cast(L#j, ^s_node));
    // assume sll_lseg(j, j); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#j, ^s_node), $phys_ptr_cast(L#j, ^s_node));
    // assert srtl_lseg(j, j); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#j, ^s_node), $phys_ptr_cast(L#j, ^s_node));
    // assume srtl_lseg(j, j); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#j, ^s_node), $phys_ptr_cast(L#j, ^s_node));
    // assert sll_lseg(h, h); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(P#h, ^s_node));
    // assume sll_lseg(h, h); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(P#h, ^s_node));
    // assert srtl_lseg(h, h); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(P#h, ^s_node));
    // assume srtl_lseg(h, h); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(P#h, ^s_node));
    // j := (struct s_node*)@null; 
    L#j := $phys_ptr_cast($null, ^s_node);
    // assert sll_lseg(i, i); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#i, ^s_node), $phys_ptr_cast(L#i, ^s_node));
    // assume sll_lseg(i, i); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#i, ^s_node), $phys_ptr_cast(L#i, ^s_node));
    // assert srtl_lseg(i, i); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#i, ^s_node), $phys_ptr_cast(L#i, ^s_node));
    // assume srtl_lseg(i, i); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#i, ^s_node), $phys_ptr_cast(L#i, ^s_node));
    // assert sll_lseg(j, j); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#j, ^s_node), $phys_ptr_cast(L#j, ^s_node));
    // assume sll_lseg(j, j); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#j, ^s_node), $phys_ptr_cast(L#j, ^s_node));
    // assert srtl_lseg(j, j); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#j, ^s_node), $phys_ptr_cast(L#j, ^s_node));
    // assume srtl_lseg(j, j); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#j, ^s_node), $phys_ptr_cast(L#j, ^s_node));
    // assert sll_lseg(h, h); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(P#h, ^s_node));
    // assume sll_lseg(h, h); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(P#h, ^s_node));
    // assert srtl_lseg(h, h); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(P#h, ^s_node));
    // assume srtl_lseg(h, h); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(P#h, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_keys(j), @_vcc_intset_union(sll_keys(*((j->next))), @_vcc_intset_singleton(*((j->key)))))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_list_len_next(j), unchecked+(sll_list_len_next(*((j->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(rsrtl(j), &&(&&(rsrtl(*((j->next))), unchecked!(@_vcc_oset_in(j, rsrtl_reach(*((j->next)))))), >=(*((j->key)), sll_max_key(*((j->next))))))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(j), ==(rsrtl_reach(j), @_vcc_oset_union(rsrtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(j), ==(sll(j), &&(sll(*((j->next))), unchecked!(@_vcc_oset_in(j, sll_reach(*((j->next)))))))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#j, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_reach(j), @_vcc_oset_union(sll_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_max_key(j), @\int_max(*((j->key)), sll_max_key(*((j->next)))))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_min_key(j), @\int_min(*((j->key)), sll_min_key(*((j->next)))))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(srtl(j), &&(&&(srtl(*((j->next))), unchecked!(@_vcc_oset_in(j, srtl_reach(*((j->next)))))), <=(*((j->key)), sll_min_key(*((j->next))))))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(j), ==(srtl_reach(j), @_vcc_oset_union(srtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
    loopState#0 := $s;
    assume true;
// INV:LOOPHEAD
    while (true)
invariant b0000 ==> (F#srtl($s,$phys_ptr_cast(P#h,^s_node)));
invariant b0001 ==> (F#srtl($s,$phys_ptr_cast(L#i,^s_node)));
invariant b0002 ==> (F#srtl($s,$phys_ptr_cast(L#j,^s_node)));
invariant b0003 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node)));
invariant b0004 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node)));
invariant b0005 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node)));
invariant b0006 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node)));
invariant b0007 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node)));
invariant b0008 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node)));
invariant b0009 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#h,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#i,^s_node))));
invariant b0010 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#h,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#j,^s_node))));
invariant b0011 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#i,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#h,^s_node))));
invariant b0012 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#i,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#j,^s_node))));
invariant b0013 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#j,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#h,^s_node))));
invariant b0014 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#j,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#i,^s_node))));
invariant b0015 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#i,^s_node))));
invariant b0016 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#j,^s_node))));
invariant b0017 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#h,^s_node))));
invariant b0018 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#j,^s_node))));
invariant b0019 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#h,^s_node))));
invariant b0020 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#i,^s_node))));
invariant b0021 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#j,^s_node))));
invariant b0022 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#i,^s_node))));
invariant b0023 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#j,^s_node))));
invariant b0024 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#h,^s_node))));
invariant b0025 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#i,^s_node))));
invariant b0026 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#h,^s_node))));
invariant b0027 ==> (($non_null($phys_ptr_cast(P#h,^s_node)) ==> $oset_disjoint($oset_singleton($phys_ptr_cast(P#h,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#i,^s_node)))));
invariant b0028 ==> (($non_null($phys_ptr_cast(P#h,^s_node)) ==> $oset_disjoint($oset_singleton($phys_ptr_cast(P#h,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#j,^s_node)))));
invariant b0029 ==> (($non_null($phys_ptr_cast(L#i,^s_node)) ==> $oset_disjoint($oset_singleton($phys_ptr_cast(L#i,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#h,^s_node)))));
invariant b0030 ==> (($non_null($phys_ptr_cast(L#i,^s_node)) ==> $oset_disjoint($oset_singleton($phys_ptr_cast(L#i,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#j,^s_node)))));
invariant b0031 ==> (($non_null($phys_ptr_cast(L#j,^s_node)) ==> $oset_disjoint($oset_singleton($phys_ptr_cast(L#j,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#h,^s_node)))));
invariant b0032 ==> (($non_null($phys_ptr_cast(L#j,^s_node)) ==> $oset_disjoint($oset_singleton($phys_ptr_cast(L#j,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#i,^s_node)))));
invariant b0033 ==> (($non_null($phys_ptr_cast(P#h,^s_node)) ==> $oset_disjoint($oset_singleton($phys_ptr_cast(P#h,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node)))));
invariant b0034 ==> (($non_null($phys_ptr_cast(P#h,^s_node)) ==> $oset_disjoint($oset_singleton($phys_ptr_cast(P#h,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node)))));
invariant b0035 ==> (($non_null($phys_ptr_cast(L#i,^s_node)) ==> $oset_disjoint($oset_singleton($phys_ptr_cast(L#i,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node)))));
invariant b0036 ==> (($non_null($phys_ptr_cast(L#i,^s_node)) ==> $oset_disjoint($oset_singleton($phys_ptr_cast(L#i,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node)))));
invariant b0037 ==> (($non_null($phys_ptr_cast(L#j,^s_node)) ==> $oset_disjoint($oset_singleton($phys_ptr_cast(L#j,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node)))));
invariant b0038 ==> (($non_null($phys_ptr_cast(L#j,^s_node)) ==> $oset_disjoint($oset_singleton($phys_ptr_cast(L#j,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node)))));
invariant b0039 ==> ($non_null($phys_ptr_cast(P#h,^s_node)));
invariant b0040 ==> ($non_null($phys_ptr_cast(L#i,^s_node)));
invariant b0041 ==> ($non_null($phys_ptr_cast(L#j,^s_node)));
invariant b0042 ==> ($is_null($phys_ptr_cast(P#h,^s_node)));
invariant b0043 ==> ($is_null($phys_ptr_cast(L#i,^s_node)));
invariant b0044 ==> ($is_null($phys_ptr_cast(L#j,^s_node)));
invariant b0045 ==> (($phys_ptr_cast(P#h,^s_node) == $phys_ptr_cast(L#i,^s_node)));
invariant b0046 ==> (($phys_ptr_cast(P#h,^s_node) == $phys_ptr_cast(L#j,^s_node)));
invariant b0047 ==> (($phys_ptr_cast(L#i,^s_node) == $phys_ptr_cast(P#h,^s_node)));
invariant b0048 ==> (($phys_ptr_cast(L#i,^s_node) == $phys_ptr_cast(L#j,^s_node)));
invariant b0049 ==> (($phys_ptr_cast(L#j,^s_node) == $phys_ptr_cast(P#h,^s_node)));
invariant b0050 ==> (($phys_ptr_cast(L#j,^s_node) == $phys_ptr_cast(L#i,^s_node)));
invariant b0051 ==> (($non_null($phys_ptr_cast(P#h,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#h,^s_node),^s_node))));
invariant b0052 ==> (($non_null($phys_ptr_cast(L#i,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#i,^s_node),^s_node))));
invariant b0053 ==> (($non_null($phys_ptr_cast(L#j,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#j,^s_node),^s_node))));
invariant b0054 ==> (($non_null($phys_ptr_cast(P#h,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#h,^s_node),^s_node))));
invariant b0055 ==> (($non_null($phys_ptr_cast(L#i,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#i,^s_node),^s_node))));
invariant b0056 ==> (($non_null($phys_ptr_cast(L#j,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#j,^s_node),^s_node))));
invariant b0057 ==> (($non_null($phys_ptr_cast(P#h,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#h,^s_node),^s_node) == $phys_ptr_cast(L#i,^s_node))));
invariant b0058 ==> (($non_null($phys_ptr_cast(P#h,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#h,^s_node),^s_node) == $phys_ptr_cast(L#j,^s_node))));
invariant b0059 ==> (($non_null($phys_ptr_cast(L#i,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#i,^s_node),^s_node) == $phys_ptr_cast(P#h,^s_node))));
invariant b0060 ==> (($non_null($phys_ptr_cast(L#i,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#i,^s_node),^s_node) == $phys_ptr_cast(L#j,^s_node))));
invariant b0061 ==> (($non_null($phys_ptr_cast(L#j,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#j,^s_node),^s_node) == $phys_ptr_cast(P#h,^s_node))));
invariant b0062 ==> (($non_null($phys_ptr_cast(L#j,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#j,^s_node),^s_node) == $phys_ptr_cast(L#i,^s_node))));
invariant b0063 ==> ((!($intset_in(P#v,F#sll_keys($s,$phys_ptr_cast(P#h,^s_node))))));
invariant b0064 ==> ((!($intset_in(P#v,F#sll_keys($s,$phys_ptr_cast(L#i,^s_node))))));
invariant b0065 ==> ((!($intset_in(P#v,F#sll_keys($s,$phys_ptr_cast(L#j,^s_node))))));
invariant b0066 ==> ((!($intset_in(P#v,F#sll_lseg_keys($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node))))));
invariant b0067 ==> ((!($intset_in(P#v,F#sll_lseg_keys($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node))))));
invariant b0068 ==> ((!($intset_in(P#v,F#sll_lseg_keys($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node))))));
invariant b0069 ==> ((!($intset_in(P#v,F#sll_lseg_keys($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node))))));
invariant b0070 ==> ((!($intset_in(P#v,F#sll_lseg_keys($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node))))));
invariant b0071 ==> ((!($intset_in(P#v,F#sll_lseg_keys($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node))))));
invariant b0072 ==> ($intset_in(P#v,F#sll_keys($s,$phys_ptr_cast(P#h,^s_node))));
invariant b0073 ==> ($intset_in(P#v,F#sll_keys($s,$phys_ptr_cast(L#i,^s_node))));
invariant b0074 ==> ($intset_in(P#v,F#sll_keys($s,$phys_ptr_cast(L#j,^s_node))));
invariant b0075 ==> ($intset_in(P#v,F#sll_lseg_keys($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node))));
invariant b0076 ==> ($intset_in(P#v,F#sll_lseg_keys($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node))));
invariant b0077 ==> ($intset_in(P#v,F#sll_lseg_keys($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node))));
invariant b0078 ==> ($intset_in(P#v,F#sll_lseg_keys($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node))));
invariant b0079 ==> ($intset_in(P#v,F#sll_lseg_keys($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node))));
invariant b0080 ==> ($intset_in(P#v,F#sll_lseg_keys($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node))));
invariant b0081 ==> ((F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#i,^s_node))));
invariant b0082 ==> ((F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#j,^s_node))));
invariant b0083 ==> ((F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#h,^s_node))));
invariant b0084 ==> ((F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#j,^s_node))));
invariant b0085 ==> ((F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#h,^s_node))));
invariant b0086 ==> ((F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#i,^s_node))));
invariant b0087 ==> ((F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node))));
invariant b0088 ==> ((F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node))));
invariant b0089 ==> ((F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node))));
invariant b0090 ==> ((F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node))));
invariant b0091 ==> ((F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node))));
invariant b0092 ==> ((F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node))));
invariant b0093 ==> ((F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)))));
invariant b0094 ==> ((F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)))));
invariant b0095 ==> ((F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)))));
invariant b0096 ==> ((F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)))));
invariant b0097 ==> ((F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)))));
invariant b0098 ==> ((F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)))));
invariant b0099 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#h,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)))));
invariant b0100 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#h,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)))));
invariant b0101 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#i,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)))));
invariant b0102 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#i,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)))));
invariant b0103 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#j,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)))));
invariant b0104 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#j,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)))));
invariant b0105 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#h,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)))));
invariant b0106 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#h,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)))));
invariant b0107 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#i,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)))));
invariant b0108 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#i,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)))));
invariant b0109 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#j,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)))));
invariant b0110 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#j,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)))));
invariant b0111 ==> ((F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#h,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)))));
invariant b0112 ==> ((F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#h,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)))));
invariant b0113 ==> ((F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#i,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)))));
invariant b0114 ==> ((F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#i,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)))));
invariant b0115 ==> ((F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#j,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)))));
invariant b0116 ==> ((F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#j,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)))));
invariant b0117 ==> ((F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#h,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)))));
invariant b0118 ==> ((F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#h,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)))));
invariant b0119 ==> ((F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#i,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)))));
invariant b0120 ==> ((F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#i,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#j,^s_node)))));
invariant b0121 ==> ((F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#j,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)))));
invariant b0122 ==> ((F#sll_keys($s,$phys_ptr_cast(P#h,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#j,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#i,^s_node)))));
invariant b0123 ==> ((P#v < 2147483647));
invariant b0124 ==> ((P#v < 2147483647));
invariant b0125 ==> ((P#v < 2147483647));
invariant b0126 ==> ((P#v < 4294967295));
invariant b0127 ==> ((P#v < 4294967295));
invariant b0128 ==> ((P#v < 4294967295));
invariant b0129 ==> ((P#v >= 0));
invariant b0130 ==> ((P#v >= 0));
invariant b0131 ==> ((P#v >= 0));
invariant b0132 ==> (($non_null($phys_ptr_cast(P#h,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)) < P#v)));
invariant b0133 ==> (($non_null($phys_ptr_cast(L#i,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)) < P#v)));
invariant b0134 ==> (($non_null($phys_ptr_cast(L#j,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)) < P#v)));
invariant b0135 ==> ((($non_null($phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)))));
invariant b0136 ==> ((($non_null($phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)))));
invariant b0137 ==> ((($non_null($phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)))));
invariant b0138 ==> ((($non_null($phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)))));
invariant b0139 ==> ((($non_null($phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)))));
invariant b0140 ==> ((($non_null($phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)))));
invariant b0141 ==> ((($non_null($phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)))));
invariant b0142 ==> ((($non_null($phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)))));
invariant b0143 ==> ((($non_null($phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)))));
invariant b0144 ==> ((($non_null($phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)))));
invariant b0145 ==> ((($non_null($phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)))));
invariant b0146 ==> ((($non_null($phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)))));
invariant b0147 ==> (((F#srtl($s,$phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#h,^s_node)) <= P#v)));
invariant b0148 ==> (((F#srtl($s,$phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#i,^s_node)) <= P#v)));
invariant b0149 ==> (((F#srtl($s,$phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#j,^s_node)) <= P#v)));
invariant b0150 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node)) && ($phys_ptr_cast(P#h,^s_node) != $phys_ptr_cast(L#i,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node)) <= P#v)));
invariant b0151 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node)) && ($phys_ptr_cast(P#h,^s_node) != $phys_ptr_cast(L#j,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node)) <= P#v)));
invariant b0152 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node)) && ($phys_ptr_cast(L#i,^s_node) != $phys_ptr_cast(P#h,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node)) <= P#v)));
invariant b0153 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node)) && ($phys_ptr_cast(L#i,^s_node) != $phys_ptr_cast(L#j,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node)) <= P#v)));
invariant b0154 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node)) && ($phys_ptr_cast(L#j,^s_node) != $phys_ptr_cast(P#h,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node)) <= P#v)));
invariant b0155 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node)) && ($phys_ptr_cast(L#j,^s_node) != $phys_ptr_cast(L#i,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node)) <= P#v)));
invariant b0156 ==> (((F#srtl($s,$phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> (P#v <= F#sll_min_key($s,$phys_ptr_cast(P#h,^s_node)))));
invariant b0157 ==> (((F#srtl($s,$phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> (P#v <= F#sll_min_key($s,$phys_ptr_cast(L#i,^s_node)))));
invariant b0158 ==> (((F#srtl($s,$phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> (P#v <= F#sll_min_key($s,$phys_ptr_cast(L#j,^s_node)))));
invariant b0159 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node)) && ($phys_ptr_cast(P#h,^s_node) != $phys_ptr_cast(L#i,^s_node))) ==> (P#v <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node)))));
invariant b0160 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node)) && ($phys_ptr_cast(P#h,^s_node) != $phys_ptr_cast(L#j,^s_node))) ==> (P#v <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node)))));
invariant b0161 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node)) && ($phys_ptr_cast(L#i,^s_node) != $phys_ptr_cast(P#h,^s_node))) ==> (P#v <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node)))));
invariant b0162 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node)) && ($phys_ptr_cast(L#i,^s_node) != $phys_ptr_cast(L#j,^s_node))) ==> (P#v <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node)))));
invariant b0163 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node)) && ($phys_ptr_cast(L#j,^s_node) != $phys_ptr_cast(P#h,^s_node))) ==> (P#v <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node)))));
invariant b0164 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node)) && ($phys_ptr_cast(L#j,^s_node) != $phys_ptr_cast(L#i,^s_node))) ==> (P#v <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node)))));
invariant b0165 ==> (((F#srtl($s,$phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#h,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)))));
invariant b0166 ==> (((F#srtl($s,$phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#h,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)))));
invariant b0167 ==> (((F#srtl($s,$phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#i,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)))));
invariant b0168 ==> (((F#srtl($s,$phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#i,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)))));
invariant b0169 ==> (((F#srtl($s,$phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#j,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)))));
invariant b0170 ==> (((F#srtl($s,$phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#j,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)))));
invariant b0171 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node)) && ($phys_ptr_cast(P#h,^s_node) != $phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)))));
invariant b0172 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node)) && ($phys_ptr_cast(P#h,^s_node) != $phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)))));
invariant b0173 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node)) && ($phys_ptr_cast(L#i,^s_node) != $phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)))));
invariant b0174 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node)) && ($phys_ptr_cast(L#i,^s_node) != $phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)))));
invariant b0175 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node)) && ($phys_ptr_cast(L#j,^s_node) != $phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)))));
invariant b0176 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node)) && ($phys_ptr_cast(L#j,^s_node) != $phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)))));
invariant b0177 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node)) && ($phys_ptr_cast(P#h,^s_node) != $phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)))));
invariant b0178 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node)) && ($phys_ptr_cast(P#h,^s_node) != $phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)))));
invariant b0179 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node)) && ($phys_ptr_cast(L#i,^s_node) != $phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)))));
invariant b0180 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node)) && ($phys_ptr_cast(L#i,^s_node) != $phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)))));
invariant b0181 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node)) && ($phys_ptr_cast(L#j,^s_node) != $phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)))));
invariant b0182 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node)) && ($phys_ptr_cast(L#j,^s_node) != $phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)))));
invariant b0183 ==> (((F#srtl($s,$phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#h,^s_node)))));
invariant b0184 ==> (((F#srtl($s,$phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#h,^s_node)))));
invariant b0185 ==> (((F#srtl($s,$phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#i,^s_node)))));
invariant b0186 ==> (((F#srtl($s,$phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#i,^s_node)))));
invariant b0187 ==> (((F#srtl($s,$phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#j,^s_node)))));
invariant b0188 ==> (((F#srtl($s,$phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#j,^s_node)))));
invariant b0189 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node)) && ($phys_ptr_cast(P#h,^s_node) != $phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node)))));
invariant b0190 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node)) && ($phys_ptr_cast(P#h,^s_node) != $phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node)))));
invariant b0191 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node)) && ($phys_ptr_cast(L#i,^s_node) != $phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node)))));
invariant b0192 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node)) && ($phys_ptr_cast(L#i,^s_node) != $phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node)))));
invariant b0193 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node)) && ($phys_ptr_cast(L#j,^s_node) != $phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node)))));
invariant b0194 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node)) && ($phys_ptr_cast(L#j,^s_node) != $phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node)))));
invariant b0195 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node)) && ($phys_ptr_cast(P#h,^s_node) != $phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#i,^s_node)))));
invariant b0196 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node)) && ($phys_ptr_cast(P#h,^s_node) != $phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#h,^s_node),$phys_ptr_cast(L#j,^s_node)))));
invariant b0197 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node)) && ($phys_ptr_cast(L#i,^s_node) != $phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(L#j,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#j,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(P#h,^s_node)))));
invariant b0198 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node)) && ($phys_ptr_cast(L#i,^s_node) != $phys_ptr_cast(L#j,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#i,^s_node),$phys_ptr_cast(L#j,^s_node)))));
invariant b0199 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node)) && ($phys_ptr_cast(L#j,^s_node) != $phys_ptr_cast(P#h,^s_node)) && $non_null($phys_ptr_cast(L#i,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#i,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(P#h,^s_node)))));
invariant b0200 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node)) && ($phys_ptr_cast(L#j,^s_node) != $phys_ptr_cast(L#i,^s_node)) && $non_null($phys_ptr_cast(P#h,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#h,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#j,^s_node),$phys_ptr_cast(L#i,^s_node)))));

      invariant $oset_subset(F#srtl_reach($s, $phys_ptr_cast(L#i, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_reach($s, $phys_ptr_cast(L#j, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)), SL#ALL_REACH);
    {
      anon5:
        assume $writes_nothing(old($s), $s);
        assume $timestamp_post(loopState#0, $s);
        assume $full_stop_ext(#tok$3^13.3, $s);
        // assume @_vcc_meta_eq(old(@prestate, @state), @state); 
        assume $meta_eq(loopState#0, $s);
        // _Bool ite#1; 
        assume true;
        // if (@_vcc_ptr_neq_null(i)) ...
        if ($non_null($phys_ptr_cast(L#i, ^s_node)))
        {
          anon1:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // assert @reads_check_normal((i->key)); 
            assert $thread_local($s, $phys_ptr_cast(L#i, ^s_node));
            // ite#1 := <=(*((i->key)), v); 
            ite#1 := $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= P#v;
        }
        else
        {
          anon2:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // ite#1 := false; 
            ite#1 := false;
        }

      anon6:
        assume true;
        // if (ite#1) ...
        if (ite#1)
        {
          anon3:
            // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_keys(i), @_vcc_intset_union(sll_keys(*((i->next))), @_vcc_intset_singleton(*((i->key)))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_list_len_next(i), unchecked+(sll_list_len_next(*((i->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(rsrtl(i), &&(&&(rsrtl(*((i->next))), unchecked!(@_vcc_oset_in(i, rsrtl_reach(*((i->next)))))), >=(*((i->key)), sll_max_key(*((i->next))))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(rsrtl_reach(i), @_vcc_oset_union(rsrtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(sll(i), &&(sll(*((i->next))), unchecked!(@_vcc_oset_in(i, sll_reach(*((i->next)))))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#i, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_reach(i), @_vcc_oset_union(sll_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_max_key(i), @\int_max(*((i->key)), sll_max_key(*((i->next)))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_min_key(i), @\int_min(*((i->key)), sll_min_key(*((i->next)))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(srtl(i), &&(&&(srtl(*((i->next))), unchecked!(@_vcc_oset_in(i, srtl_reach(*((i->next)))))), <=(*((i->key)), sll_min_key(*((i->next))))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(srtl_reach(i), @_vcc_oset_union(srtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_keys(j), @_vcc_intset_union(sll_keys(*((j->next))), @_vcc_intset_singleton(*((j->key)))))); 
            assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_list_len_next(j), unchecked+(sll_list_len_next(*((j->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(rsrtl(j), &&(&&(rsrtl(*((j->next))), unchecked!(@_vcc_oset_in(j, rsrtl_reach(*((j->next)))))), >=(*((j->key)), sll_max_key(*((j->next))))))); 
            assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(j), ==(rsrtl_reach(j), @_vcc_oset_union(rsrtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
            assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(j), ==(sll(j), &&(sll(*((j->next))), unchecked!(@_vcc_oset_in(j, sll_reach(*((j->next)))))))); 
            assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#j, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_reach(j), @_vcc_oset_union(sll_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
            assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_max_key(j), @\int_max(*((j->key)), sll_max_key(*((j->next)))))); 
            assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_min_key(j), @\int_min(*((j->key)), sll_min_key(*((j->next)))))); 
            assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(srtl(j), &&(&&(srtl(*((j->next))), unchecked!(@_vcc_oset_in(j, srtl_reach(*((j->next)))))), <=(*((j->key)), sll_min_key(*((j->next))))))); 
            assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(j), ==(srtl_reach(j), @_vcc_oset_union(srtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
            assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_keys(h), @_vcc_intset_union(sll_keys(*((h->next))), @_vcc_intset_singleton(*((h->key)))))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#h, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_list_len_next(h), unchecked+(sll_list_len_next(*((h->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#h, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(rsrtl(h), &&(&&(rsrtl(*((h->next))), unchecked!(@_vcc_oset_in(h, rsrtl_reach(*((h->next)))))), >=(*((h->key)), sll_max_key(*((h->next))))))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(h), ==(rsrtl_reach(h), @_vcc_oset_union(rsrtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(h), ==(sll(h), &&(sll(*((h->next))), unchecked!(@_vcc_oset_in(h, sll_reach(*((h->next)))))))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#h, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_reach(h), @_vcc_oset_union(sll_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_max_key(h), @\int_max(*((h->key)), sll_max_key(*((h->next)))))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_min_key(h), @\int_min(*((h->key)), sll_min_key(*((h->next)))))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(srtl(h), &&(&&(srtl(*((h->next))), unchecked!(@_vcc_oset_in(h, srtl_reach(*((h->next)))))), <=(*((h->key)), sll_min_key(*((h->next))))))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(h), ==(srtl_reach(h), @_vcc_oset_union(srtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg(h, j), &&(sll_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), j)))))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_reach(h, j), @_vcc_oset_union(sll_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_keys(h, j), @_vcc_intset_union(sll_lseg_keys(*((h->next)), j), @_vcc_intset_singleton(*((h->key)))))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_len_next(h, j), unchecked+(sll_lseg_len_next(*((h->next)), j), 1))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_max_key(h, j), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), j)))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_min_key(h, j), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), j)))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(srtl_lseg(h, j), &&(&&(srtl_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), j)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), j))))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(srtl_lseg_reach(h, j), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg(h, i), &&(sll_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), i)))))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_reach(h, i), @_vcc_oset_union(sll_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_keys(h, i), @_vcc_intset_union(sll_lseg_keys(*((h->next)), i), @_vcc_intset_singleton(*((h->key)))))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_len_next(h, i), unchecked+(sll_lseg_len_next(*((h->next)), i), 1))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_max_key(h, i), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), i)))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_min_key(h, i), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), i)))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(srtl_lseg(h, i), &&(&&(srtl_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), i)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), i))))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(srtl_lseg_reach(h, i), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
            // j := i; 
            L#j := $phys_ptr_cast(L#i, ^s_node);
            // assert sll_lseg(i, i); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#i, ^s_node), $phys_ptr_cast(L#i, ^s_node));
            // assume sll_lseg(i, i); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#i, ^s_node), $phys_ptr_cast(L#i, ^s_node));
            // assert srtl_lseg(i, i); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#i, ^s_node), $phys_ptr_cast(L#i, ^s_node));
            // assume srtl_lseg(i, i); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#i, ^s_node), $phys_ptr_cast(L#i, ^s_node));
            // assert sll_lseg(j, j); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#j, ^s_node), $phys_ptr_cast(L#j, ^s_node));
            // assume sll_lseg(j, j); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#j, ^s_node), $phys_ptr_cast(L#j, ^s_node));
            // assert srtl_lseg(j, j); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#j, ^s_node), $phys_ptr_cast(L#j, ^s_node));
            // assume srtl_lseg(j, j); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#j, ^s_node), $phys_ptr_cast(L#j, ^s_node));
            // assert sll_lseg(h, h); 
            assert F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(P#h, ^s_node));
            // assume sll_lseg(h, h); 
            assume F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(P#h, ^s_node));
            // assert srtl_lseg(h, h); 
            assert F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(P#h, ^s_node));
            // assume srtl_lseg(h, h); 
            assume F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(P#h, ^s_node));
            // struct s_node* i0; 
            // i0 := i; 
            SL#i0 := $phys_ptr_cast(L#i, ^s_node);
            // struct s_node* stmtexpr0#3; 
            // stmtexpr0#3 := i0; 
            stmtexpr0#3 := $phys_ptr_cast(SL#i0, ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_keys(i), @_vcc_intset_union(sll_keys(*((i->next))), @_vcc_intset_singleton(*((i->key)))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_list_len_next(i), unchecked+(sll_list_len_next(*((i->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(rsrtl(i), &&(&&(rsrtl(*((i->next))), unchecked!(@_vcc_oset_in(i, rsrtl_reach(*((i->next)))))), >=(*((i->key)), sll_max_key(*((i->next))))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(rsrtl_reach(i), @_vcc_oset_union(rsrtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(sll(i), &&(sll(*((i->next))), unchecked!(@_vcc_oset_in(i, sll_reach(*((i->next)))))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#i, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_reach(i), @_vcc_oset_union(sll_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_max_key(i), @\int_max(*((i->key)), sll_max_key(*((i->next)))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_min_key(i), @\int_min(*((i->key)), sll_min_key(*((i->next)))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(srtl(i), &&(&&(srtl(*((i->next))), unchecked!(@_vcc_oset_in(i, srtl_reach(*((i->next)))))), <=(*((i->key)), sll_min_key(*((i->next))))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(srtl_reach(i), @_vcc_oset_union(srtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_pure(i, *((i->next)))), ==(sll_lseg(i, *((i->next))), &&(sll_lseg(*((i->next)), *((i->next))), unchecked!(@_vcc_oset_in(i, sll_lseg_reach(*((i->next)), *((i->next)))))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $phys_ptr_cast(L#i, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#i, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_pure(i, *((i->next)))), ==(sll_lseg_reach(i, *((i->next))), @_vcc_oset_union(sll_lseg_reach(*((i->next)), *((i->next))), @_vcc_oset_singleton(i)))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $phys_ptr_cast(L#i, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#i, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_pure(i, *((i->next)))), ==(sll_lseg_keys(i, *((i->next))), @_vcc_intset_union(sll_lseg_keys(*((i->next)), *((i->next))), @_vcc_intset_singleton(*((i->key)))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $phys_ptr_cast(L#i, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#i, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_pure(i, *((i->next)))), ==(sll_lseg_len_next(i, *((i->next))), unchecked+(sll_lseg_len_next(*((i->next)), *((i->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $phys_ptr_cast(L#i, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#i, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_pure(i, *((i->next)))), @_vcc_ptr_neq_pure(*((i->next)), *((i->next)))), ==(sll_lseg_max_key(i, *((i->next))), @\int_max(*((i->key)), sll_lseg_max_key(*((i->next)), *((i->next)))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $phys_ptr_cast(L#i, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#i, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_pure(i, *((i->next)))), @_vcc_ptr_neq_pure(*((i->next)), *((i->next)))), ==(sll_lseg_min_key(i, *((i->next))), @\int_min(*((i->key)), sll_lseg_min_key(*((i->next)), *((i->next)))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $phys_ptr_cast(L#i, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#i, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_pure(i, *((i->next)))), @_vcc_ptr_neq_pure(*((i->next)), *((i->next)))), ==(srtl_lseg(i, *((i->next))), &&(&&(srtl_lseg(*((i->next)), *((i->next))), unchecked!(@_vcc_oset_in(i, srtl_lseg_reach(*((i->next)), *((i->next)))))), <=(*((i->key)), sll_lseg_min_key(*((i->next)), *((i->next))))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $phys_ptr_cast(L#i, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#i, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_pure(i, *((i->next)))), ==(srtl_lseg_reach(i, *((i->next))), @_vcc_oset_union(srtl_lseg_reach(*((i->next)), *((i->next))), @_vcc_oset_singleton(i)))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $phys_ptr_cast(L#i, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#i, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
            // assert @reads_check_normal((i->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#i, ^s_node));
            // i := *((i->next)); 
            L#i := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_keys(i), @_vcc_intset_union(sll_keys(*((i->next))), @_vcc_intset_singleton(*((i->key)))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_list_len_next(i), unchecked+(sll_list_len_next(*((i->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(rsrtl(i), &&(&&(rsrtl(*((i->next))), unchecked!(@_vcc_oset_in(i, rsrtl_reach(*((i->next)))))), >=(*((i->key)), sll_max_key(*((i->next))))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(rsrtl_reach(i), @_vcc_oset_union(rsrtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(sll(i), &&(sll(*((i->next))), unchecked!(@_vcc_oset_in(i, sll_reach(*((i->next)))))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#i, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_reach(i), @_vcc_oset_union(sll_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_max_key(i), @\int_max(*((i->key)), sll_max_key(*((i->next)))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_min_key(i), @\int_min(*((i->key)), sll_min_key(*((i->next)))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(srtl(i), &&(&&(srtl(*((i->next))), unchecked!(@_vcc_oset_in(i, srtl_reach(*((i->next)))))), <=(*((i->key)), sll_min_key(*((i->next))))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(srtl_reach(i), @_vcc_oset_union(srtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_keys(i), @_vcc_intset_union(sll_keys(*((i->next))), @_vcc_intset_singleton(*((i->key)))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_list_len_next(i), unchecked+(sll_list_len_next(*((i->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(rsrtl(i), &&(&&(rsrtl(*((i->next))), unchecked!(@_vcc_oset_in(i, rsrtl_reach(*((i->next)))))), >=(*((i->key)), sll_max_key(*((i->next))))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(rsrtl_reach(i), @_vcc_oset_union(rsrtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(sll(i), &&(sll(*((i->next))), unchecked!(@_vcc_oset_in(i, sll_reach(*((i->next)))))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#i, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_reach(i), @_vcc_oset_union(sll_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_max_key(i), @\int_max(*((i->key)), sll_max_key(*((i->next)))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_min_key(i), @\int_min(*((i->key)), sll_min_key(*((i->next)))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(srtl(i), &&(&&(srtl(*((i->next))), unchecked!(@_vcc_oset_in(i, srtl_reach(*((i->next)))))), <=(*((i->key)), sll_min_key(*((i->next))))))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(i), ==(srtl_reach(i), @_vcc_oset_union(srtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
            assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg(h, i), &&(sll_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), i)))))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_reach(h, i), @_vcc_oset_union(sll_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_keys(h, i), @_vcc_intset_union(sll_lseg_keys(*((h->next)), i), @_vcc_intset_singleton(*((h->key)))))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_len_next(h, i), unchecked+(sll_lseg_len_next(*((h->next)), i), 1))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_max_key(h, i), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), i)))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_min_key(h, i), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), i)))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(srtl_lseg(h, i), &&(&&(srtl_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), i)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), i))))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(srtl_lseg_reach(h, i), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
            assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        }
        else
        {
          anon4:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // goto #break_2; 
            goto #break_2;
        }

      #continue_2:
        assume true;
// INV:LOOPTAIL
    }

  anon10:
    assume $full_stop_ext(#tok$3^13.3, $s);

  #break_2:
    // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_keys(i), @_vcc_intset_union(sll_keys(*((i->next))), @_vcc_intset_singleton(*((i->key)))))); 
    assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_list_len_next(i), unchecked+(sll_list_len_next(*((i->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(rsrtl(i), &&(&&(rsrtl(*((i->next))), unchecked!(@_vcc_oset_in(i, rsrtl_reach(*((i->next)))))), >=(*((i->key)), sll_max_key(*((i->next))))))); 
    assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(i), ==(rsrtl_reach(i), @_vcc_oset_union(rsrtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
    assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(i), ==(sll(i), &&(sll(*((i->next))), unchecked!(@_vcc_oset_in(i, sll_reach(*((i->next)))))))); 
    assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#i, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_reach(i), @_vcc_oset_union(sll_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
    assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_max_key(i), @\int_max(*((i->key)), sll_max_key(*((i->next)))))); 
    assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_min_key(i), @\int_min(*((i->key)), sll_min_key(*((i->next)))))); 
    assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(srtl(i), &&(&&(srtl(*((i->next))), unchecked!(@_vcc_oset_in(i, srtl_reach(*((i->next)))))), <=(*((i->key)), sll_min_key(*((i->next))))))); 
    assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(i), ==(srtl_reach(i), @_vcc_oset_union(srtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
    assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_keys(j), @_vcc_intset_union(sll_keys(*((j->next))), @_vcc_intset_singleton(*((j->key)))))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_list_len_next(j), unchecked+(sll_list_len_next(*((j->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(rsrtl(j), &&(&&(rsrtl(*((j->next))), unchecked!(@_vcc_oset_in(j, rsrtl_reach(*((j->next)))))), >=(*((j->key)), sll_max_key(*((j->next))))))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(j), ==(rsrtl_reach(j), @_vcc_oset_union(rsrtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(j), ==(sll(j), &&(sll(*((j->next))), unchecked!(@_vcc_oset_in(j, sll_reach(*((j->next)))))))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#j, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_reach(j), @_vcc_oset_union(sll_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_max_key(j), @\int_max(*((j->key)), sll_max_key(*((j->next)))))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_min_key(j), @\int_min(*((j->key)), sll_min_key(*((j->next)))))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(srtl(j), &&(&&(srtl(*((j->next))), unchecked!(@_vcc_oset_in(j, srtl_reach(*((j->next)))))), <=(*((j->key)), sll_min_key(*((j->next))))))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(j), ==(srtl_reach(j), @_vcc_oset_union(srtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
    assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_keys(h), @_vcc_intset_union(sll_keys(*((h->next))), @_vcc_intset_singleton(*((h->key)))))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#h, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_list_len_next(h), unchecked+(sll_list_len_next(*((h->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#h, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(rsrtl(h), &&(&&(rsrtl(*((h->next))), unchecked!(@_vcc_oset_in(h, rsrtl_reach(*((h->next)))))), >=(*((h->key)), sll_max_key(*((h->next))))))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(h), ==(rsrtl_reach(h), @_vcc_oset_union(rsrtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(h), ==(sll(h), &&(sll(*((h->next))), unchecked!(@_vcc_oset_in(h, sll_reach(*((h->next)))))))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#h, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_reach(h), @_vcc_oset_union(sll_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_max_key(h), @\int_max(*((h->key)), sll_max_key(*((h->next)))))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_min_key(h), @\int_min(*((h->key)), sll_min_key(*((h->next)))))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(srtl(h), &&(&&(srtl(*((h->next))), unchecked!(@_vcc_oset_in(h, srtl_reach(*((h->next)))))), <=(*((h->key)), sll_min_key(*((h->next))))))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(h), ==(srtl_reach(h), @_vcc_oset_union(srtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
    assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
    assume true;
    // if (@_vcc_ptr_eq(i, h)) ...
    if ($ptr_eq($phys_ptr_cast(L#i, ^s_node), $phys_ptr_cast(P#h, ^s_node)))
    {
      anon7:
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_keys(i), @_vcc_intset_union(sll_keys(*((i->next))), @_vcc_intset_singleton(*((i->key)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_list_len_next(i), unchecked+(sll_list_len_next(*((i->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(rsrtl(i), &&(&&(rsrtl(*((i->next))), unchecked!(@_vcc_oset_in(i, rsrtl_reach(*((i->next)))))), >=(*((i->key)), sll_max_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(rsrtl_reach(i), @_vcc_oset_union(rsrtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll(i), &&(sll(*((i->next))), unchecked!(@_vcc_oset_in(i, sll_reach(*((i->next)))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#i, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_reach(i), @_vcc_oset_union(sll_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_max_key(i), @\int_max(*((i->key)), sll_max_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_min_key(i), @\int_min(*((i->key)), sll_min_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(srtl(i), &&(&&(srtl(*((i->next))), unchecked!(@_vcc_oset_in(i, srtl_reach(*((i->next)))))), <=(*((i->key)), sll_min_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(srtl_reach(i), @_vcc_oset_union(srtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_keys(j), @_vcc_intset_union(sll_keys(*((j->next))), @_vcc_intset_singleton(*((j->key)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_list_len_next(j), unchecked+(sll_list_len_next(*((j->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(rsrtl(j), &&(&&(rsrtl(*((j->next))), unchecked!(@_vcc_oset_in(j, rsrtl_reach(*((j->next)))))), >=(*((j->key)), sll_max_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(rsrtl_reach(j), @_vcc_oset_union(rsrtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll(j), &&(sll(*((j->next))), unchecked!(@_vcc_oset_in(j, sll_reach(*((j->next)))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#j, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_reach(j), @_vcc_oset_union(sll_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_max_key(j), @\int_max(*((j->key)), sll_max_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_min_key(j), @\int_min(*((j->key)), sll_min_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(srtl(j), &&(&&(srtl(*((j->next))), unchecked!(@_vcc_oset_in(j, srtl_reach(*((j->next)))))), <=(*((j->key)), sll_min_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(srtl_reach(j), @_vcc_oset_union(srtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_keys(h), @_vcc_intset_union(sll_keys(*((h->next))), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#h, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_list_len_next(h), unchecked+(sll_list_len_next(*((h->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#h, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(rsrtl(h), &&(&&(rsrtl(*((h->next))), unchecked!(@_vcc_oset_in(h, rsrtl_reach(*((h->next)))))), >=(*((h->key)), sll_max_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(rsrtl_reach(h), @_vcc_oset_union(rsrtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll(h), &&(sll(*((h->next))), unchecked!(@_vcc_oset_in(h, sll_reach(*((h->next)))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#h, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_reach(h), @_vcc_oset_union(sll_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_max_key(h), @\int_max(*((h->key)), sll_max_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_min_key(h), @\int_min(*((h->key)), sll_min_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(srtl(h), &&(&&(srtl(*((h->next))), unchecked!(@_vcc_oset_in(h, srtl_reach(*((h->next)))))), <=(*((h->key)), sll_min_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(srtl_reach(h), @_vcc_oset_union(srtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg(h, j), &&(sll_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), j)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_reach(h, j), @_vcc_oset_union(sll_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_keys(h, j), @_vcc_intset_union(sll_lseg_keys(*((h->next)), j), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_len_next(h, j), unchecked+(sll_lseg_len_next(*((h->next)), j), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_max_key(h, j), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), j)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_min_key(h, j), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), j)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(srtl_lseg(h, j), &&(&&(srtl_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), j)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), j))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(srtl_lseg_reach(h, j), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg(h, i), &&(sll_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), i)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_reach(h, i), @_vcc_oset_union(sll_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_keys(h, i), @_vcc_intset_union(sll_lseg_keys(*((h->next)), i), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_len_next(h, i), unchecked+(sll_lseg_len_next(*((h->next)), i), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_max_key(h, i), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_min_key(h, i), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(srtl_lseg(h, i), &&(&&(srtl_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), i)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), i))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(srtl_lseg_reach(h, i), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // struct s_node* hd; 
        // _math \state _dryad_S0; 
        // _dryad_S0 := @_vcc_current_state(@state); 
        SL#_dryad_S0 := $current_state($s);
        // _math \state stmtexpr0#4; 
        // stmtexpr0#4 := _dryad_S0; 
        stmtexpr0#4 := SL#_dryad_S0;
        // hd := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
        call L#hd := $alloc(^s_node);
        assume $full_stop_ext(#tok$3^33.17, $s);
        // assume !(@_vcc_oset_in(hd, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
        // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(hd)); 
        SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#hd, ^s_node)));
        // _math \oset stmtexpr1#5; 
        // stmtexpr1#5 := _dryad_G1; 
        stmtexpr1#5 := SL#_dryad_G1;
        // assume ==(glob_reach(), _dryad_G1); 
        assume F#glob_reach() == SL#_dryad_G1;
        // _math \state _dryad_S1; 
        // _dryad_S1 := @_vcc_current_state(@state); 
        SL#_dryad_S1 := $current_state($s);
        // _math \state stmtexpr2#6; 
        // stmtexpr2#6 := _dryad_S1; 
        stmtexpr2#6 := SL#_dryad_S1;
        // assume ==>(@_vcc_ptr_neq_null(hd), ==(sll_keys(hd), @_vcc_intset_union(sll_keys(*((hd->next))), @_vcc_intset_singleton(*((hd->key)))))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#hd, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#hd, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(hd), ==(sll_list_len_next(hd), unchecked+(sll_list_len_next(*((hd->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#hd, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(hd), @_vcc_ptr_neq_null(*((hd->next)))), ==(rsrtl(hd), &&(&&(rsrtl(*((hd->next))), unchecked!(@_vcc_oset_in(hd, rsrtl_reach(*((hd->next)))))), >=(*((hd->key)), sll_max_key(*((hd->next))))))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#hd, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#hd, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(hd), ==(rsrtl_reach(hd), @_vcc_oset_union(rsrtl_reach(*((hd->next))), @_vcc_oset_singleton(hd)))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#hd, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#hd, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(hd), ==(sll(hd), &&(sll(*((hd->next))), unchecked!(@_vcc_oset_in(hd, sll_reach(*((hd->next)))))))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#hd, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(hd), ==(sll_reach(hd), @_vcc_oset_union(sll_reach(*((hd->next))), @_vcc_oset_singleton(hd)))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#hd, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#hd, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(hd), @_vcc_ptr_neq_null(*((hd->next)))), ==(sll_max_key(hd), @\int_max(*((hd->key)), sll_max_key(*((hd->next)))))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#hd, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#hd, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(hd), @_vcc_ptr_neq_null(*((hd->next)))), ==(sll_min_key(hd), @\int_min(*((hd->key)), sll_min_key(*((hd->next)))))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#hd, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#hd, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(hd), @_vcc_ptr_neq_null(*((hd->next)))), ==(srtl(hd), &&(&&(srtl(*((hd->next))), unchecked!(@_vcc_oset_in(hd, srtl_reach(*((hd->next)))))), <=(*((hd->key)), sll_min_key(*((hd->next))))))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#hd, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#hd, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(hd), ==(srtl_reach(hd), @_vcc_oset_union(srtl_reach(*((hd->next))), @_vcc_oset_singleton(hd)))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#hd, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#hd, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_keys(i), @_vcc_intset_union(sll_keys(*((i->next))), @_vcc_intset_singleton(*((i->key)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_list_len_next(i), unchecked+(sll_list_len_next(*((i->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(rsrtl(i), &&(&&(rsrtl(*((i->next))), unchecked!(@_vcc_oset_in(i, rsrtl_reach(*((i->next)))))), >=(*((i->key)), sll_max_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(rsrtl_reach(i), @_vcc_oset_union(rsrtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll(i), &&(sll(*((i->next))), unchecked!(@_vcc_oset_in(i, sll_reach(*((i->next)))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#i, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_reach(i), @_vcc_oset_union(sll_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_max_key(i), @\int_max(*((i->key)), sll_max_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_min_key(i), @\int_min(*((i->key)), sll_min_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(srtl(i), &&(&&(srtl(*((i->next))), unchecked!(@_vcc_oset_in(i, srtl_reach(*((i->next)))))), <=(*((i->key)), sll_min_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(srtl_reach(i), @_vcc_oset_union(srtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_keys(j), @_vcc_intset_union(sll_keys(*((j->next))), @_vcc_intset_singleton(*((j->key)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_list_len_next(j), unchecked+(sll_list_len_next(*((j->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(rsrtl(j), &&(&&(rsrtl(*((j->next))), unchecked!(@_vcc_oset_in(j, rsrtl_reach(*((j->next)))))), >=(*((j->key)), sll_max_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(rsrtl_reach(j), @_vcc_oset_union(rsrtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll(j), &&(sll(*((j->next))), unchecked!(@_vcc_oset_in(j, sll_reach(*((j->next)))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#j, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_reach(j), @_vcc_oset_union(sll_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_max_key(j), @\int_max(*((j->key)), sll_max_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_min_key(j), @\int_min(*((j->key)), sll_min_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(srtl(j), &&(&&(srtl(*((j->next))), unchecked!(@_vcc_oset_in(j, srtl_reach(*((j->next)))))), <=(*((j->key)), sll_min_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(srtl_reach(j), @_vcc_oset_union(srtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_keys(h), @_vcc_intset_union(sll_keys(*((h->next))), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#h, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_list_len_next(h), unchecked+(sll_list_len_next(*((h->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#h, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(rsrtl(h), &&(&&(rsrtl(*((h->next))), unchecked!(@_vcc_oset_in(h, rsrtl_reach(*((h->next)))))), >=(*((h->key)), sll_max_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(rsrtl_reach(h), @_vcc_oset_union(rsrtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll(h), &&(sll(*((h->next))), unchecked!(@_vcc_oset_in(h, sll_reach(*((h->next)))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#h, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_reach(h), @_vcc_oset_union(sll_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_max_key(h), @\int_max(*((h->key)), sll_max_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_min_key(h), @\int_min(*((h->key)), sll_min_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(srtl(h), &&(&&(srtl(*((h->next))), unchecked!(@_vcc_oset_in(h, srtl_reach(*((h->next)))))), <=(*((h->key)), sll_min_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(srtl_reach(h), @_vcc_oset_union(srtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg(h, j), &&(sll_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), j)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_reach(h, j), @_vcc_oset_union(sll_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_keys(h, j), @_vcc_intset_union(sll_lseg_keys(*((h->next)), j), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_len_next(h, j), unchecked+(sll_lseg_len_next(*((h->next)), j), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_max_key(h, j), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), j)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_min_key(h, j), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), j)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(srtl_lseg(h, j), &&(&&(srtl_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), j)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), j))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(srtl_lseg_reach(h, j), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg(h, i), &&(sll_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), i)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_reach(h, i), @_vcc_oset_union(sll_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_keys(h, i), @_vcc_intset_union(sll_lseg_keys(*((h->next)), i), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_len_next(h, i), unchecked+(sll_lseg_len_next(*((h->next)), i), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_max_key(h, i), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_min_key(h, i), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(srtl_lseg(h, i), &&(&&(srtl_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), i)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), i))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(srtl_lseg_reach(h, i), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(i)))), ==(old(_dryad_S0, sll_keys(i)), old(_dryad_S1, sll_keys(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(i)))), ==(old(_dryad_S0, sll_list_len_next(i)), old(_dryad_S1, sll_list_len_next(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, rsrtl_reach(i)))), ==(old(_dryad_S0, rsrtl(i)), old(_dryad_S1, rsrtl(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, rsrtl_reach(i)))), ==(old(_dryad_S0, rsrtl_reach(i)), old(_dryad_S1, rsrtl_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(i)))), ==(old(_dryad_S0, sll(i)), old(_dryad_S1, sll(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(i)))), ==(old(_dryad_S0, sll_reach(i)), old(_dryad_S1, sll_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(i)))), ==(old(_dryad_S0, sll_max_key(i)), old(_dryad_S1, sll_max_key(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(i)))), ==(old(_dryad_S0, sll_min_key(i)), old(_dryad_S1, sll_min_key(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, srtl_reach(i)))), ==(old(_dryad_S0, srtl(i)), old(_dryad_S1, srtl(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, srtl_reach(i)))), ==(old(_dryad_S0, srtl_reach(i)), old(_dryad_S1, srtl_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#i, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(j)))), ==(old(_dryad_S0, sll_keys(j)), old(_dryad_S1, sll_keys(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(j)))), ==(old(_dryad_S0, sll_list_len_next(j)), old(_dryad_S1, sll_list_len_next(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, rsrtl_reach(j)))), ==(old(_dryad_S0, rsrtl(j)), old(_dryad_S1, rsrtl(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, rsrtl_reach(j)))), ==(old(_dryad_S0, rsrtl_reach(j)), old(_dryad_S1, rsrtl_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(j)))), ==(old(_dryad_S0, sll(j)), old(_dryad_S1, sll(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(j)))), ==(old(_dryad_S0, sll_reach(j)), old(_dryad_S1, sll_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(j)))), ==(old(_dryad_S0, sll_max_key(j)), old(_dryad_S1, sll_max_key(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(j)))), ==(old(_dryad_S0, sll_min_key(j)), old(_dryad_S1, sll_min_key(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, srtl_reach(j)))), ==(old(_dryad_S0, srtl(j)), old(_dryad_S1, srtl(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, srtl_reach(j)))), ==(old(_dryad_S0, srtl_reach(j)), old(_dryad_S1, srtl_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#j, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(h)))), ==(old(_dryad_S0, sll_keys(h)), old(_dryad_S1, sll_keys(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(h)))), ==(old(_dryad_S0, sll_list_len_next(h)), old(_dryad_S1, sll_list_len_next(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, rsrtl_reach(h)))), ==(old(_dryad_S0, rsrtl(h)), old(_dryad_S1, rsrtl(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, rsrtl_reach(h)))), ==(old(_dryad_S0, rsrtl_reach(h)), old(_dryad_S1, rsrtl_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(h)))), ==(old(_dryad_S0, sll(h)), old(_dryad_S1, sll(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(h)))), ==(old(_dryad_S0, sll_reach(h)), old(_dryad_S1, sll_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(h)))), ==(old(_dryad_S0, sll_max_key(h)), old(_dryad_S1, sll_max_key(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_reach(h)))), ==(old(_dryad_S0, sll_min_key(h)), old(_dryad_S1, sll_min_key(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, srtl_reach(h)))), ==(old(_dryad_S0, srtl(h)), old(_dryad_S1, srtl(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, srtl_reach(h)))), ==(old(_dryad_S0, srtl_reach(h)), old(_dryad_S1, srtl_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_lseg_reach(h, j)))), ==(old(_dryad_S0, sll_lseg(h, j)), old(_dryad_S1, sll_lseg(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_lseg_reach(h, j)))), ==(old(_dryad_S0, sll_lseg_reach(h, j)), old(_dryad_S1, sll_lseg_reach(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_lseg_reach(h, j)))), ==(old(_dryad_S0, sll_lseg_keys(h, j)), old(_dryad_S1, sll_lseg_keys(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_lseg_reach(h, j)))), ==(old(_dryad_S0, sll_lseg_len_next(h, j)), old(_dryad_S1, sll_lseg_len_next(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_lseg_reach(h, j)))), ==(old(_dryad_S0, sll_lseg_max_key(h, j)), old(_dryad_S1, sll_lseg_max_key(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_lseg_reach(h, j)))), ==(old(_dryad_S0, sll_lseg_min_key(h, j)), old(_dryad_S1, sll_lseg_min_key(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, srtl_lseg_reach(h, j)))), ==(old(_dryad_S0, srtl_lseg(h, j)), old(_dryad_S1, srtl_lseg(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#srtl_lseg(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, srtl_lseg_reach(h, j)))), ==(old(_dryad_S0, srtl_lseg_reach(h, j)), old(_dryad_S1, srtl_lseg_reach(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_lseg_reach(h, i)))), ==(old(_dryad_S0, sll_lseg(h, i)), old(_dryad_S1, sll_lseg(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_lseg_reach(h, i)))), ==(old(_dryad_S0, sll_lseg_reach(h, i)), old(_dryad_S1, sll_lseg_reach(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_lseg_reach(h, i)))), ==(old(_dryad_S0, sll_lseg_keys(h, i)), old(_dryad_S1, sll_lseg_keys(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_lseg_reach(h, i)))), ==(old(_dryad_S0, sll_lseg_len_next(h, i)), old(_dryad_S1, sll_lseg_len_next(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_lseg_reach(h, i)))), ==(old(_dryad_S0, sll_lseg_max_key(h, i)), old(_dryad_S1, sll_lseg_max_key(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, sll_lseg_reach(h, i)))), ==(old(_dryad_S0, sll_lseg_min_key(h, i)), old(_dryad_S1, sll_lseg_min_key(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, srtl_lseg_reach(h, i)))), ==(old(_dryad_S0, srtl_lseg(h, i)), old(_dryad_S1, srtl_lseg(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#srtl_lseg(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S0, srtl_lseg_reach(h, i)))), ==(old(_dryad_S0, srtl_lseg_reach(h, i)), old(_dryad_S1, srtl_lseg_reach(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume @_vcc_ptr_neq_null(hd); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node));
        // _math \state _dryad_S2; 
        // _dryad_S2 := @_vcc_current_state(@state); 
        SL#_dryad_S2 := $current_state($s);
        // _math \state stmtexpr3#7; 
        // stmtexpr3#7 := _dryad_S2; 
        stmtexpr3#7 := SL#_dryad_S2;
        // assert @prim_writes_check((hd->key)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#hd, ^s_node), s_node.key));
        // *(hd->key) := v; 
        call $write_int(s_node.key, $phys_ptr_cast(L#hd, ^s_node), P#v);
        assume $full_stop_ext(#tok$3^35.5, $s);
        // _math \state _dryad_S3; 
        // _dryad_S3 := @_vcc_current_state(@state); 
        SL#_dryad_S3 := $current_state($s);
        // _math \state stmtexpr4#8; 
        // stmtexpr4#8 := _dryad_S3; 
        stmtexpr4#8 := SL#_dryad_S3;
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(*((hd->next)))))), ==(old(_dryad_S2, sll_keys(*((hd->next)))), old(_dryad_S3, sll_keys(*((hd->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) == F#sll_keys(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(*((hd->next)))))), ==(old(_dryad_S2, sll_list_len_next(*((hd->next)))), old(_dryad_S3, sll_list_len_next(*((hd->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, rsrtl_reach(*((hd->next)))))), ==(old(_dryad_S2, rsrtl(*((hd->next)))), old(_dryad_S3, rsrtl(*((hd->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) == F#rsrtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, rsrtl_reach(*((hd->next)))))), ==(old(_dryad_S2, rsrtl_reach(*((hd->next)))), old(_dryad_S3, rsrtl_reach(*((hd->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(*((hd->next)))))), ==(old(_dryad_S2, sll(*((hd->next)))), old(_dryad_S3, sll(*((hd->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))) ==> F#sll(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) == F#sll(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(*((hd->next)))))), ==(old(_dryad_S2, sll_reach(*((hd->next)))), old(_dryad_S3, sll_reach(*((hd->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) == F#sll_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(*((hd->next)))))), ==(old(_dryad_S2, sll_max_key(*((hd->next)))), old(_dryad_S3, sll_max_key(*((hd->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) == F#sll_max_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(*((hd->next)))))), ==(old(_dryad_S2, sll_min_key(*((hd->next)))), old(_dryad_S3, sll_min_key(*((hd->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) == F#sll_min_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, srtl_reach(*((hd->next)))))), ==(old(_dryad_S2, srtl(*((hd->next)))), old(_dryad_S3, srtl(*((hd->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))) ==> F#srtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) == F#srtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, srtl_reach(*((hd->next)))))), ==(old(_dryad_S2, srtl_reach(*((hd->next)))), old(_dryad_S3, srtl_reach(*((hd->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) == F#srtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node));
        // assume ==(old(_dryad_S2, sll_list_len_next(hd)), old(_dryad_S3, sll_list_len_next(hd))); 
        assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#hd, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#hd, ^s_node));
        // assume ==(old(_dryad_S2, rsrtl_reach(hd)), old(_dryad_S3, rsrtl_reach(hd))); 
        assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#hd, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#hd, ^s_node));
        // assume ==(old(_dryad_S2, sll(hd)), old(_dryad_S3, sll(hd))); 
        assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#hd, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#hd, ^s_node));
        // assume ==(old(_dryad_S2, sll_reach(hd)), old(_dryad_S3, sll_reach(hd))); 
        assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#hd, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#hd, ^s_node));
        // assume ==(old(_dryad_S2, srtl_reach(hd)), old(_dryad_S3, srtl_reach(hd))); 
        assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#hd, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#hd, ^s_node));
        // assume ==(old(_dryad_S2, sll_list_len_next(i)), old(_dryad_S3, sll_list_len_next(i))); 
        assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==(old(_dryad_S2, rsrtl_reach(i)), old(_dryad_S3, rsrtl_reach(i))); 
        assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==(old(_dryad_S2, sll(i)), old(_dryad_S3, sll(i))); 
        assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==(old(_dryad_S2, sll_reach(i)), old(_dryad_S3, sll_reach(i))); 
        assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==(old(_dryad_S2, srtl_reach(i)), old(_dryad_S3, srtl_reach(i))); 
        assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==(old(_dryad_S2, sll_list_len_next(j)), old(_dryad_S3, sll_list_len_next(j))); 
        assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==(old(_dryad_S2, rsrtl_reach(j)), old(_dryad_S3, rsrtl_reach(j))); 
        assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==(old(_dryad_S2, sll(j)), old(_dryad_S3, sll(j))); 
        assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==(old(_dryad_S2, sll_reach(j)), old(_dryad_S3, sll_reach(j))); 
        assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==(old(_dryad_S2, srtl_reach(j)), old(_dryad_S3, srtl_reach(j))); 
        assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==(old(_dryad_S2, sll_list_len_next(h)), old(_dryad_S3, sll_list_len_next(h))); 
        assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==(old(_dryad_S2, rsrtl_reach(h)), old(_dryad_S3, rsrtl_reach(h))); 
        assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==(old(_dryad_S2, sll(h)), old(_dryad_S3, sll(h))); 
        assume F#sll(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==(old(_dryad_S2, sll_reach(h)), old(_dryad_S3, sll_reach(h))); 
        assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==(old(_dryad_S2, srtl_reach(h)), old(_dryad_S3, srtl_reach(h))); 
        assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(i)))), ==(old(_dryad_S2, sll_keys(i)), old(_dryad_S3, sll_keys(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(i)))), ==(old(_dryad_S2, sll_list_len_next(i)), old(_dryad_S3, sll_list_len_next(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, rsrtl_reach(i)))), ==(old(_dryad_S2, rsrtl(i)), old(_dryad_S3, rsrtl(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, rsrtl_reach(i)))), ==(old(_dryad_S2, rsrtl_reach(i)), old(_dryad_S3, rsrtl_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(i)))), ==(old(_dryad_S2, sll(i)), old(_dryad_S3, sll(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(i)))), ==(old(_dryad_S2, sll_reach(i)), old(_dryad_S3, sll_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(i)))), ==(old(_dryad_S2, sll_max_key(i)), old(_dryad_S3, sll_max_key(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(i)))), ==(old(_dryad_S2, sll_min_key(i)), old(_dryad_S3, sll_min_key(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, srtl_reach(i)))), ==(old(_dryad_S2, srtl(i)), old(_dryad_S3, srtl(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, srtl_reach(i)))), ==(old(_dryad_S2, srtl_reach(i)), old(_dryad_S3, srtl_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#i, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(j)))), ==(old(_dryad_S2, sll_keys(j)), old(_dryad_S3, sll_keys(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(j)))), ==(old(_dryad_S2, sll_list_len_next(j)), old(_dryad_S3, sll_list_len_next(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, rsrtl_reach(j)))), ==(old(_dryad_S2, rsrtl(j)), old(_dryad_S3, rsrtl(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, rsrtl_reach(j)))), ==(old(_dryad_S2, rsrtl_reach(j)), old(_dryad_S3, rsrtl_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(j)))), ==(old(_dryad_S2, sll(j)), old(_dryad_S3, sll(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(j)))), ==(old(_dryad_S2, sll_reach(j)), old(_dryad_S3, sll_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(j)))), ==(old(_dryad_S2, sll_max_key(j)), old(_dryad_S3, sll_max_key(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(j)))), ==(old(_dryad_S2, sll_min_key(j)), old(_dryad_S3, sll_min_key(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, srtl_reach(j)))), ==(old(_dryad_S2, srtl(j)), old(_dryad_S3, srtl(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, srtl_reach(j)))), ==(old(_dryad_S2, srtl_reach(j)), old(_dryad_S3, srtl_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#j, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(h)))), ==(old(_dryad_S2, sll_keys(h)), old(_dryad_S3, sll_keys(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(h)))), ==(old(_dryad_S2, sll_list_len_next(h)), old(_dryad_S3, sll_list_len_next(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, rsrtl_reach(h)))), ==(old(_dryad_S2, rsrtl(h)), old(_dryad_S3, rsrtl(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, rsrtl_reach(h)))), ==(old(_dryad_S2, rsrtl_reach(h)), old(_dryad_S3, rsrtl_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(h)))), ==(old(_dryad_S2, sll(h)), old(_dryad_S3, sll(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(h)))), ==(old(_dryad_S2, sll_reach(h)), old(_dryad_S3, sll_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(h)))), ==(old(_dryad_S2, sll_max_key(h)), old(_dryad_S3, sll_max_key(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_reach(h)))), ==(old(_dryad_S2, sll_min_key(h)), old(_dryad_S3, sll_min_key(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, srtl_reach(h)))), ==(old(_dryad_S2, srtl(h)), old(_dryad_S3, srtl(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, srtl_reach(h)))), ==(old(_dryad_S2, srtl_reach(h)), old(_dryad_S3, srtl_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_lseg_reach(h, j)))), ==(old(_dryad_S2, sll_lseg(h, j)), old(_dryad_S3, sll_lseg(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_lseg_reach(h, j)))), ==(old(_dryad_S2, sll_lseg_reach(h, j)), old(_dryad_S3, sll_lseg_reach(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_lseg_reach(h, j)))), ==(old(_dryad_S2, sll_lseg_keys(h, j)), old(_dryad_S3, sll_lseg_keys(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_lseg_reach(h, j)))), ==(old(_dryad_S2, sll_lseg_len_next(h, j)), old(_dryad_S3, sll_lseg_len_next(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_lseg_reach(h, j)))), ==(old(_dryad_S2, sll_lseg_max_key(h, j)), old(_dryad_S3, sll_lseg_max_key(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_lseg_reach(h, j)))), ==(old(_dryad_S2, sll_lseg_min_key(h, j)), old(_dryad_S3, sll_lseg_min_key(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, srtl_lseg_reach(h, j)))), ==(old(_dryad_S2, srtl_lseg(h, j)), old(_dryad_S3, srtl_lseg(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#srtl_lseg(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, srtl_lseg_reach(h, j)))), ==(old(_dryad_S2, srtl_lseg_reach(h, j)), old(_dryad_S3, srtl_lseg_reach(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_lseg_reach(h, i)))), ==(old(_dryad_S2, sll_lseg(h, i)), old(_dryad_S3, sll_lseg(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_lseg_reach(h, i)))), ==(old(_dryad_S2, sll_lseg_reach(h, i)), old(_dryad_S3, sll_lseg_reach(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_lseg_reach(h, i)))), ==(old(_dryad_S2, sll_lseg_keys(h, i)), old(_dryad_S3, sll_lseg_keys(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_lseg_reach(h, i)))), ==(old(_dryad_S2, sll_lseg_len_next(h, i)), old(_dryad_S3, sll_lseg_len_next(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_lseg_reach(h, i)))), ==(old(_dryad_S2, sll_lseg_max_key(h, i)), old(_dryad_S3, sll_lseg_max_key(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, sll_lseg_reach(h, i)))), ==(old(_dryad_S2, sll_lseg_min_key(h, i)), old(_dryad_S3, sll_lseg_min_key(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, srtl_lseg_reach(h, i)))), ==(old(_dryad_S2, srtl_lseg(h, i)), old(_dryad_S3, srtl_lseg(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#srtl_lseg(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S2, srtl_lseg_reach(h, i)))), ==(old(_dryad_S2, srtl_lseg_reach(h, i)), old(_dryad_S3, srtl_lseg_reach(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(hd, i)), ==(*((i->key)), old(_dryad_S2, *((i->key))))); 
        assume !($phys_ptr_cast(L#hd, ^s_node) == $phys_ptr_cast(L#i, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(hd, i)), @_vcc_ptr_eq_pure(*((i->next)), old(_dryad_S2, *((i->next))))); 
        assume !($phys_ptr_cast(L#hd, ^s_node) == $phys_ptr_cast(L#i, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(hd, j)), ==(*((j->key)), old(_dryad_S2, *((j->key))))); 
        assume !($phys_ptr_cast(L#hd, ^s_node) == $phys_ptr_cast(L#j, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(hd, j)), @_vcc_ptr_eq_pure(*((j->next)), old(_dryad_S2, *((j->next))))); 
        assume !($phys_ptr_cast(L#hd, ^s_node) == $phys_ptr_cast(L#j, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(hd, h)), ==(*((h->key)), old(_dryad_S2, *((h->key))))); 
        assume !($phys_ptr_cast(L#hd, ^s_node) == $phys_ptr_cast(P#h, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(hd, h)), @_vcc_ptr_eq_pure(*((h->next)), old(_dryad_S2, *((h->next))))); 
        assume !($phys_ptr_cast(L#hd, ^s_node) == $phys_ptr_cast(P#h, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_keys(i), @_vcc_intset_union(sll_keys(*((i->next))), @_vcc_intset_singleton(*((i->key)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_list_len_next(i), unchecked+(sll_list_len_next(*((i->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(rsrtl(i), &&(&&(rsrtl(*((i->next))), unchecked!(@_vcc_oset_in(i, rsrtl_reach(*((i->next)))))), >=(*((i->key)), sll_max_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(rsrtl_reach(i), @_vcc_oset_union(rsrtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll(i), &&(sll(*((i->next))), unchecked!(@_vcc_oset_in(i, sll_reach(*((i->next)))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#i, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_reach(i), @_vcc_oset_union(sll_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_max_key(i), @\int_max(*((i->key)), sll_max_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_min_key(i), @\int_min(*((i->key)), sll_min_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(srtl(i), &&(&&(srtl(*((i->next))), unchecked!(@_vcc_oset_in(i, srtl_reach(*((i->next)))))), <=(*((i->key)), sll_min_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(srtl_reach(i), @_vcc_oset_union(srtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_keys(j), @_vcc_intset_union(sll_keys(*((j->next))), @_vcc_intset_singleton(*((j->key)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_list_len_next(j), unchecked+(sll_list_len_next(*((j->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(rsrtl(j), &&(&&(rsrtl(*((j->next))), unchecked!(@_vcc_oset_in(j, rsrtl_reach(*((j->next)))))), >=(*((j->key)), sll_max_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(rsrtl_reach(j), @_vcc_oset_union(rsrtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll(j), &&(sll(*((j->next))), unchecked!(@_vcc_oset_in(j, sll_reach(*((j->next)))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#j, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_reach(j), @_vcc_oset_union(sll_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_max_key(j), @\int_max(*((j->key)), sll_max_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_min_key(j), @\int_min(*((j->key)), sll_min_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(srtl(j), &&(&&(srtl(*((j->next))), unchecked!(@_vcc_oset_in(j, srtl_reach(*((j->next)))))), <=(*((j->key)), sll_min_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(srtl_reach(j), @_vcc_oset_union(srtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_keys(h), @_vcc_intset_union(sll_keys(*((h->next))), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#h, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_list_len_next(h), unchecked+(sll_list_len_next(*((h->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#h, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(rsrtl(h), &&(&&(rsrtl(*((h->next))), unchecked!(@_vcc_oset_in(h, rsrtl_reach(*((h->next)))))), >=(*((h->key)), sll_max_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(rsrtl_reach(h), @_vcc_oset_union(rsrtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll(h), &&(sll(*((h->next))), unchecked!(@_vcc_oset_in(h, sll_reach(*((h->next)))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#h, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_reach(h), @_vcc_oset_union(sll_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_max_key(h), @\int_max(*((h->key)), sll_max_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_min_key(h), @\int_min(*((h->key)), sll_min_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(srtl(h), &&(&&(srtl(*((h->next))), unchecked!(@_vcc_oset_in(h, srtl_reach(*((h->next)))))), <=(*((h->key)), sll_min_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(srtl_reach(h), @_vcc_oset_union(srtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(hd), ==(sll_keys(hd), @_vcc_intset_union(sll_keys(*((hd->next))), @_vcc_intset_singleton(*((hd->key)))))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#hd, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#hd, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(hd), @_vcc_ptr_neq_null(*((hd->next)))), ==(rsrtl(hd), &&(&&(rsrtl(*((hd->next))), unchecked!(@_vcc_oset_in(hd, rsrtl_reach(*((hd->next)))))), >=(*((hd->key)), sll_max_key(*((hd->next))))))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#hd, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#hd, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(hd), @_vcc_ptr_neq_null(*((hd->next)))), ==(sll_max_key(hd), @\int_max(*((hd->key)), sll_max_key(*((hd->next)))))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#hd, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#hd, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(hd), @_vcc_ptr_neq_null(*((hd->next)))), ==(sll_min_key(hd), @\int_min(*((hd->key)), sll_min_key(*((hd->next)))))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#hd, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#hd, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(hd), @_vcc_ptr_neq_null(*((hd->next)))), ==(srtl(hd), &&(&&(srtl(*((hd->next))), unchecked!(@_vcc_oset_in(hd, srtl_reach(*((hd->next)))))), <=(*((hd->key)), sll_min_key(*((hd->next))))))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#hd, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#hd, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg(h, j), &&(sll_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), j)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_reach(h, j), @_vcc_oset_union(sll_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_keys(h, j), @_vcc_intset_union(sll_lseg_keys(*((h->next)), j), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_len_next(h, j), unchecked+(sll_lseg_len_next(*((h->next)), j), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_max_key(h, j), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), j)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_min_key(h, j), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), j)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(srtl_lseg(h, j), &&(&&(srtl_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), j)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), j))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(srtl_lseg_reach(h, j), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg(h, i), &&(sll_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), i)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_reach(h, i), @_vcc_oset_union(sll_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_keys(h, i), @_vcc_intset_union(sll_lseg_keys(*((h->next)), i), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_len_next(h, i), unchecked+(sll_lseg_len_next(*((h->next)), i), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_max_key(h, i), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_min_key(h, i), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(srtl_lseg(h, i), &&(&&(srtl_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), i)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), i))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(srtl_lseg_reach(h, i), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // _math \state _dryad_S4; 
        // _dryad_S4 := @_vcc_current_state(@state); 
        SL#_dryad_S4 := $current_state($s);
        // _math \state stmtexpr5#9; 
        // stmtexpr5#9 := _dryad_S4; 
        stmtexpr5#9 := SL#_dryad_S4;
        // assert @prim_writes_check((hd->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#hd, ^s_node), s_node.next));
        // *(hd->next) := i; 
        call $write_int(s_node.next, $phys_ptr_cast(L#hd, ^s_node), $ptr_to_int($phys_ptr_cast(L#i, ^s_node)));
        assume $full_stop_ext(#tok$3^36.5, $s);
        // _math \state _dryad_S5; 
        // _dryad_S5 := @_vcc_current_state(@state); 
        SL#_dryad_S5 := $current_state($s);
        // _math \state stmtexpr6#10; 
        // stmtexpr6#10 := _dryad_S5; 
        stmtexpr6#10 := SL#_dryad_S5;
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(i)))), ==(old(_dryad_S4, sll_keys(i)), old(_dryad_S5, sll_keys(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(i)))), ==(old(_dryad_S4, sll_list_len_next(i)), old(_dryad_S5, sll_list_len_next(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, rsrtl_reach(i)))), ==(old(_dryad_S4, rsrtl(i)), old(_dryad_S5, rsrtl(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, rsrtl_reach(i)))), ==(old(_dryad_S4, rsrtl_reach(i)), old(_dryad_S5, rsrtl_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(i)))), ==(old(_dryad_S4, sll(i)), old(_dryad_S5, sll(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(i)))), ==(old(_dryad_S4, sll_reach(i)), old(_dryad_S5, sll_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(i)))), ==(old(_dryad_S4, sll_max_key(i)), old(_dryad_S5, sll_max_key(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(i)))), ==(old(_dryad_S4, sll_min_key(i)), old(_dryad_S5, sll_min_key(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, srtl_reach(i)))), ==(old(_dryad_S4, srtl(i)), old(_dryad_S5, srtl(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, srtl_reach(i)))), ==(old(_dryad_S4, srtl_reach(i)), old(_dryad_S5, srtl_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#i, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(j)))), ==(old(_dryad_S4, sll_keys(j)), old(_dryad_S5, sll_keys(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(j)))), ==(old(_dryad_S4, sll_list_len_next(j)), old(_dryad_S5, sll_list_len_next(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, rsrtl_reach(j)))), ==(old(_dryad_S4, rsrtl(j)), old(_dryad_S5, rsrtl(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, rsrtl_reach(j)))), ==(old(_dryad_S4, rsrtl_reach(j)), old(_dryad_S5, rsrtl_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(j)))), ==(old(_dryad_S4, sll(j)), old(_dryad_S5, sll(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(j)))), ==(old(_dryad_S4, sll_reach(j)), old(_dryad_S5, sll_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(j)))), ==(old(_dryad_S4, sll_max_key(j)), old(_dryad_S5, sll_max_key(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(j)))), ==(old(_dryad_S4, sll_min_key(j)), old(_dryad_S5, sll_min_key(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, srtl_reach(j)))), ==(old(_dryad_S4, srtl(j)), old(_dryad_S5, srtl(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, srtl_reach(j)))), ==(old(_dryad_S4, srtl_reach(j)), old(_dryad_S5, srtl_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#j, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(h)))), ==(old(_dryad_S4, sll_keys(h)), old(_dryad_S5, sll_keys(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(h)))), ==(old(_dryad_S4, sll_list_len_next(h)), old(_dryad_S5, sll_list_len_next(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, rsrtl_reach(h)))), ==(old(_dryad_S4, rsrtl(h)), old(_dryad_S5, rsrtl(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, rsrtl_reach(h)))), ==(old(_dryad_S4, rsrtl_reach(h)), old(_dryad_S5, rsrtl_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(h)))), ==(old(_dryad_S4, sll(h)), old(_dryad_S5, sll(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(h)))), ==(old(_dryad_S4, sll_reach(h)), old(_dryad_S5, sll_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(h)))), ==(old(_dryad_S4, sll_max_key(h)), old(_dryad_S5, sll_max_key(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_reach(h)))), ==(old(_dryad_S4, sll_min_key(h)), old(_dryad_S5, sll_min_key(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, srtl_reach(h)))), ==(old(_dryad_S4, srtl(h)), old(_dryad_S5, srtl(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, srtl_reach(h)))), ==(old(_dryad_S4, srtl_reach(h)), old(_dryad_S5, srtl_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_lseg_reach(h, j)))), ==(old(_dryad_S4, sll_lseg(h, j)), old(_dryad_S5, sll_lseg(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_lseg_reach(h, j)))), ==(old(_dryad_S4, sll_lseg_reach(h, j)), old(_dryad_S5, sll_lseg_reach(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_lseg_reach(h, j)))), ==(old(_dryad_S4, sll_lseg_keys(h, j)), old(_dryad_S5, sll_lseg_keys(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_lseg_reach(h, j)))), ==(old(_dryad_S4, sll_lseg_len_next(h, j)), old(_dryad_S5, sll_lseg_len_next(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_lseg_reach(h, j)))), ==(old(_dryad_S4, sll_lseg_max_key(h, j)), old(_dryad_S5, sll_lseg_max_key(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_lseg_reach(h, j)))), ==(old(_dryad_S4, sll_lseg_min_key(h, j)), old(_dryad_S5, sll_lseg_min_key(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, srtl_lseg_reach(h, j)))), ==(old(_dryad_S4, srtl_lseg(h, j)), old(_dryad_S5, srtl_lseg(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#srtl_lseg(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, srtl_lseg_reach(h, j)))), ==(old(_dryad_S4, srtl_lseg_reach(h, j)), old(_dryad_S5, srtl_lseg_reach(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_lseg_reach(h, i)))), ==(old(_dryad_S4, sll_lseg(h, i)), old(_dryad_S5, sll_lseg(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_lseg_reach(h, i)))), ==(old(_dryad_S4, sll_lseg_reach(h, i)), old(_dryad_S5, sll_lseg_reach(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_lseg_reach(h, i)))), ==(old(_dryad_S4, sll_lseg_keys(h, i)), old(_dryad_S5, sll_lseg_keys(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_lseg_reach(h, i)))), ==(old(_dryad_S4, sll_lseg_len_next(h, i)), old(_dryad_S5, sll_lseg_len_next(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_lseg_reach(h, i)))), ==(old(_dryad_S4, sll_lseg_max_key(h, i)), old(_dryad_S5, sll_lseg_max_key(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, sll_lseg_reach(h, i)))), ==(old(_dryad_S4, sll_lseg_min_key(h, i)), old(_dryad_S5, sll_lseg_min_key(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, srtl_lseg_reach(h, i)))), ==(old(_dryad_S4, srtl_lseg(h, i)), old(_dryad_S5, srtl_lseg(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#srtl_lseg(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(hd, old(_dryad_S4, srtl_lseg_reach(h, i)))), ==(old(_dryad_S4, srtl_lseg_reach(h, i)), old(_dryad_S5, srtl_lseg_reach(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(hd, i)), ==(*((i->key)), old(_dryad_S4, *((i->key))))); 
        assume !($phys_ptr_cast(L#hd, ^s_node) == $phys_ptr_cast(L#i, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(hd, i)), @_vcc_ptr_eq_pure(*((i->next)), old(_dryad_S4, *((i->next))))); 
        assume !($phys_ptr_cast(L#hd, ^s_node) == $phys_ptr_cast(L#i, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(hd, j)), ==(*((j->key)), old(_dryad_S4, *((j->key))))); 
        assume !($phys_ptr_cast(L#hd, ^s_node) == $phys_ptr_cast(L#j, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(hd, j)), @_vcc_ptr_eq_pure(*((j->next)), old(_dryad_S4, *((j->next))))); 
        assume !($phys_ptr_cast(L#hd, ^s_node) == $phys_ptr_cast(L#j, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(hd, h)), ==(*((h->key)), old(_dryad_S4, *((h->key))))); 
        assume !($phys_ptr_cast(L#hd, ^s_node) == $phys_ptr_cast(P#h, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(hd, h)), @_vcc_ptr_eq_pure(*((h->next)), old(_dryad_S4, *((h->next))))); 
        assume !($phys_ptr_cast(L#hd, ^s_node) == $phys_ptr_cast(P#h, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_keys(i), @_vcc_intset_union(sll_keys(*((i->next))), @_vcc_intset_singleton(*((i->key)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_list_len_next(i), unchecked+(sll_list_len_next(*((i->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(rsrtl(i), &&(&&(rsrtl(*((i->next))), unchecked!(@_vcc_oset_in(i, rsrtl_reach(*((i->next)))))), >=(*((i->key)), sll_max_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(rsrtl_reach(i), @_vcc_oset_union(rsrtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll(i), &&(sll(*((i->next))), unchecked!(@_vcc_oset_in(i, sll_reach(*((i->next)))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#i, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_reach(i), @_vcc_oset_union(sll_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_max_key(i), @\int_max(*((i->key)), sll_max_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_min_key(i), @\int_min(*((i->key)), sll_min_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(srtl(i), &&(&&(srtl(*((i->next))), unchecked!(@_vcc_oset_in(i, srtl_reach(*((i->next)))))), <=(*((i->key)), sll_min_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(srtl_reach(i), @_vcc_oset_union(srtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_keys(j), @_vcc_intset_union(sll_keys(*((j->next))), @_vcc_intset_singleton(*((j->key)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_list_len_next(j), unchecked+(sll_list_len_next(*((j->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(rsrtl(j), &&(&&(rsrtl(*((j->next))), unchecked!(@_vcc_oset_in(j, rsrtl_reach(*((j->next)))))), >=(*((j->key)), sll_max_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(rsrtl_reach(j), @_vcc_oset_union(rsrtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll(j), &&(sll(*((j->next))), unchecked!(@_vcc_oset_in(j, sll_reach(*((j->next)))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#j, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_reach(j), @_vcc_oset_union(sll_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_max_key(j), @\int_max(*((j->key)), sll_max_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_min_key(j), @\int_min(*((j->key)), sll_min_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(srtl(j), &&(&&(srtl(*((j->next))), unchecked!(@_vcc_oset_in(j, srtl_reach(*((j->next)))))), <=(*((j->key)), sll_min_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(srtl_reach(j), @_vcc_oset_union(srtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_keys(h), @_vcc_intset_union(sll_keys(*((h->next))), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#h, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_list_len_next(h), unchecked+(sll_list_len_next(*((h->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#h, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(rsrtl(h), &&(&&(rsrtl(*((h->next))), unchecked!(@_vcc_oset_in(h, rsrtl_reach(*((h->next)))))), >=(*((h->key)), sll_max_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(rsrtl_reach(h), @_vcc_oset_union(rsrtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll(h), &&(sll(*((h->next))), unchecked!(@_vcc_oset_in(h, sll_reach(*((h->next)))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#h, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_reach(h), @_vcc_oset_union(sll_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_max_key(h), @\int_max(*((h->key)), sll_max_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_min_key(h), @\int_min(*((h->key)), sll_min_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(srtl(h), &&(&&(srtl(*((h->next))), unchecked!(@_vcc_oset_in(h, srtl_reach(*((h->next)))))), <=(*((h->key)), sll_min_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(srtl_reach(h), @_vcc_oset_union(srtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(hd), ==(sll_keys(hd), @_vcc_intset_union(sll_keys(*((hd->next))), @_vcc_intset_singleton(*((hd->key)))))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#hd, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#hd, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(hd), ==(sll_list_len_next(hd), unchecked+(sll_list_len_next(*((hd->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#hd, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(hd), @_vcc_ptr_neq_null(*((hd->next)))), ==(rsrtl(hd), &&(&&(rsrtl(*((hd->next))), unchecked!(@_vcc_oset_in(hd, rsrtl_reach(*((hd->next)))))), >=(*((hd->key)), sll_max_key(*((hd->next))))))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#hd, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#hd, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(hd), ==(rsrtl_reach(hd), @_vcc_oset_union(rsrtl_reach(*((hd->next))), @_vcc_oset_singleton(hd)))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#hd, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#hd, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(hd), ==(sll(hd), &&(sll(*((hd->next))), unchecked!(@_vcc_oset_in(hd, sll_reach(*((hd->next)))))))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#hd, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(hd), ==(sll_reach(hd), @_vcc_oset_union(sll_reach(*((hd->next))), @_vcc_oset_singleton(hd)))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#hd, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#hd, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(hd), @_vcc_ptr_neq_null(*((hd->next)))), ==(sll_max_key(hd), @\int_max(*((hd->key)), sll_max_key(*((hd->next)))))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#hd, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#hd, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(hd), @_vcc_ptr_neq_null(*((hd->next)))), ==(sll_min_key(hd), @\int_min(*((hd->key)), sll_min_key(*((hd->next)))))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#hd, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#hd, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(hd), @_vcc_ptr_neq_null(*((hd->next)))), ==(srtl(hd), &&(&&(srtl(*((hd->next))), unchecked!(@_vcc_oset_in(hd, srtl_reach(*((hd->next)))))), <=(*((hd->key)), sll_min_key(*((hd->next))))))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#hd, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#hd, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#hd, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(hd), ==(srtl_reach(hd), @_vcc_oset_union(srtl_reach(*((hd->next))), @_vcc_oset_singleton(hd)))); 
        assume $non_null($phys_ptr_cast(L#hd, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#hd, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#hd, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#hd, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_keys(i), @_vcc_intset_union(sll_keys(*((i->next))), @_vcc_intset_singleton(*((i->key)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_list_len_next(i), unchecked+(sll_list_len_next(*((i->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(rsrtl(i), &&(&&(rsrtl(*((i->next))), unchecked!(@_vcc_oset_in(i, rsrtl_reach(*((i->next)))))), >=(*((i->key)), sll_max_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(rsrtl_reach(i), @_vcc_oset_union(rsrtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll(i), &&(sll(*((i->next))), unchecked!(@_vcc_oset_in(i, sll_reach(*((i->next)))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#i, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_reach(i), @_vcc_oset_union(sll_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_max_key(i), @\int_max(*((i->key)), sll_max_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_min_key(i), @\int_min(*((i->key)), sll_min_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(srtl(i), &&(&&(srtl(*((i->next))), unchecked!(@_vcc_oset_in(i, srtl_reach(*((i->next)))))), <=(*((i->key)), sll_min_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(srtl_reach(i), @_vcc_oset_union(srtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg(h, j), &&(sll_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), j)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_reach(h, j), @_vcc_oset_union(sll_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_keys(h, j), @_vcc_intset_union(sll_lseg_keys(*((h->next)), j), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_len_next(h, j), unchecked+(sll_lseg_len_next(*((h->next)), j), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_max_key(h, j), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), j)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_min_key(h, j), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), j)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(srtl_lseg(h, j), &&(&&(srtl_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), j)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), j))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(srtl_lseg_reach(h, j), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg(h, i), &&(sll_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), i)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_reach(h, i), @_vcc_oset_union(sll_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_keys(h, i), @_vcc_intset_union(sll_lseg_keys(*((h->next)), i), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_len_next(h, i), unchecked+(sll_lseg_len_next(*((h->next)), i), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_max_key(h, i), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_min_key(h, i), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(srtl_lseg(h, i), &&(&&(srtl_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), i)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), i))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(srtl_lseg_reach(h, i), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // return hd; 
        $result := $phys_ptr_cast(L#hd, ^s_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon8:
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_keys(i), @_vcc_intset_union(sll_keys(*((i->next))), @_vcc_intset_singleton(*((i->key)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_list_len_next(i), unchecked+(sll_list_len_next(*((i->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(rsrtl(i), &&(&&(rsrtl(*((i->next))), unchecked!(@_vcc_oset_in(i, rsrtl_reach(*((i->next)))))), >=(*((i->key)), sll_max_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(rsrtl_reach(i), @_vcc_oset_union(rsrtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll(i), &&(sll(*((i->next))), unchecked!(@_vcc_oset_in(i, sll_reach(*((i->next)))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#i, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_reach(i), @_vcc_oset_union(sll_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_max_key(i), @\int_max(*((i->key)), sll_max_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_min_key(i), @\int_min(*((i->key)), sll_min_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(srtl(i), &&(&&(srtl(*((i->next))), unchecked!(@_vcc_oset_in(i, srtl_reach(*((i->next)))))), <=(*((i->key)), sll_min_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(srtl_reach(i), @_vcc_oset_union(srtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_keys(j), @_vcc_intset_union(sll_keys(*((j->next))), @_vcc_intset_singleton(*((j->key)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_list_len_next(j), unchecked+(sll_list_len_next(*((j->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(rsrtl(j), &&(&&(rsrtl(*((j->next))), unchecked!(@_vcc_oset_in(j, rsrtl_reach(*((j->next)))))), >=(*((j->key)), sll_max_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(rsrtl_reach(j), @_vcc_oset_union(rsrtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll(j), &&(sll(*((j->next))), unchecked!(@_vcc_oset_in(j, sll_reach(*((j->next)))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#j, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_reach(j), @_vcc_oset_union(sll_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_max_key(j), @\int_max(*((j->key)), sll_max_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_min_key(j), @\int_min(*((j->key)), sll_min_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(srtl(j), &&(&&(srtl(*((j->next))), unchecked!(@_vcc_oset_in(j, srtl_reach(*((j->next)))))), <=(*((j->key)), sll_min_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(srtl_reach(j), @_vcc_oset_union(srtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_keys(h), @_vcc_intset_union(sll_keys(*((h->next))), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#h, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_list_len_next(h), unchecked+(sll_list_len_next(*((h->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#h, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(rsrtl(h), &&(&&(rsrtl(*((h->next))), unchecked!(@_vcc_oset_in(h, rsrtl_reach(*((h->next)))))), >=(*((h->key)), sll_max_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(rsrtl_reach(h), @_vcc_oset_union(rsrtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll(h), &&(sll(*((h->next))), unchecked!(@_vcc_oset_in(h, sll_reach(*((h->next)))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#h, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_reach(h), @_vcc_oset_union(sll_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_max_key(h), @\int_max(*((h->key)), sll_max_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_min_key(h), @\int_min(*((h->key)), sll_min_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(srtl(h), &&(&&(srtl(*((h->next))), unchecked!(@_vcc_oset_in(h, srtl_reach(*((h->next)))))), <=(*((h->key)), sll_min_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(srtl_reach(h), @_vcc_oset_union(srtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg(h, j), &&(sll_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), j)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_reach(h, j), @_vcc_oset_union(sll_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_keys(h, j), @_vcc_intset_union(sll_lseg_keys(*((h->next)), j), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_len_next(h, j), unchecked+(sll_lseg_len_next(*((h->next)), j), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_max_key(h, j), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), j)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_min_key(h, j), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), j)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(srtl_lseg(h, j), &&(&&(srtl_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), j)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), j))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(srtl_lseg_reach(h, j), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg(h, i), &&(sll_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), i)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_reach(h, i), @_vcc_oset_union(sll_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_keys(h, i), @_vcc_intset_union(sll_lseg_keys(*((h->next)), i), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_len_next(h, i), unchecked+(sll_lseg_len_next(*((h->next)), i), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_max_key(h, i), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_min_key(h, i), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(srtl_lseg(h, i), &&(&&(srtl_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), i)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), i))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(srtl_lseg_reach(h, i), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // struct s_node* e; 
        // _math \state _dryad_S0#0; 
        // _dryad_S0#0 := @_vcc_current_state(@state); 
        _dryad_S0#0 := $current_state($s);
        // _math \state stmtexpr0#11; 
        // stmtexpr0#11 := _dryad_S0#0; 
        stmtexpr0#11 := _dryad_S0#0;
        // e := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
        call L#e := $alloc(^s_node);
        assume $full_stop_ext(#tok$3^40.16, $s);
        // assume !(@_vcc_oset_in(e, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
        // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(e)); 
        SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#e, ^s_node)));
        // _math \oset stmtexpr1#12; 
        // stmtexpr1#12 := _dryad_G1; 
        stmtexpr1#12 := SL#_dryad_G1;
        // assume ==(glob_reach(), _dryad_G1); 
        assume F#glob_reach() == SL#_dryad_G1;
        // _math \state _dryad_S1#1; 
        // _dryad_S1#1 := @_vcc_current_state(@state); 
        _dryad_S1#1 := $current_state($s);
        // _math \state stmtexpr2#13; 
        // stmtexpr2#13 := _dryad_S1#1; 
        stmtexpr2#13 := _dryad_S1#1;
        // assume ==>(@_vcc_ptr_neq_null(e), ==(sll_keys(e), @_vcc_intset_union(sll_keys(*((e->next))), @_vcc_intset_singleton(*((e->key)))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#e, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(sll_list_len_next(e), unchecked+(sll_list_len_next(*((e->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#e, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(rsrtl(e), &&(&&(rsrtl(*((e->next))), unchecked!(@_vcc_oset_in(e, rsrtl_reach(*((e->next)))))), >=(*((e->key)), sll_max_key(*((e->next))))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#e, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(rsrtl_reach(e), @_vcc_oset_union(rsrtl_reach(*((e->next))), @_vcc_oset_singleton(e)))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#e, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#e, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(sll(e), &&(sll(*((e->next))), unchecked!(@_vcc_oset_in(e, sll_reach(*((e->next)))))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#e, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(sll_reach(e), @_vcc_oset_union(sll_reach(*((e->next))), @_vcc_oset_singleton(e)))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#e, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#e, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(sll_max_key(e), @\int_max(*((e->key)), sll_max_key(*((e->next)))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#e, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(sll_min_key(e), @\int_min(*((e->key)), sll_min_key(*((e->next)))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#e, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(srtl(e), &&(&&(srtl(*((e->next))), unchecked!(@_vcc_oset_in(e, srtl_reach(*((e->next)))))), <=(*((e->key)), sll_min_key(*((e->next))))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#e, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(srtl_reach(e), @_vcc_oset_union(srtl_reach(*((e->next))), @_vcc_oset_singleton(e)))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#e, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#e, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_keys(i), @_vcc_intset_union(sll_keys(*((i->next))), @_vcc_intset_singleton(*((i->key)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_list_len_next(i), unchecked+(sll_list_len_next(*((i->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(rsrtl(i), &&(&&(rsrtl(*((i->next))), unchecked!(@_vcc_oset_in(i, rsrtl_reach(*((i->next)))))), >=(*((i->key)), sll_max_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(rsrtl_reach(i), @_vcc_oset_union(rsrtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll(i), &&(sll(*((i->next))), unchecked!(@_vcc_oset_in(i, sll_reach(*((i->next)))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#i, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_reach(i), @_vcc_oset_union(sll_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_max_key(i), @\int_max(*((i->key)), sll_max_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_min_key(i), @\int_min(*((i->key)), sll_min_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(srtl(i), &&(&&(srtl(*((i->next))), unchecked!(@_vcc_oset_in(i, srtl_reach(*((i->next)))))), <=(*((i->key)), sll_min_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(srtl_reach(i), @_vcc_oset_union(srtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_keys(j), @_vcc_intset_union(sll_keys(*((j->next))), @_vcc_intset_singleton(*((j->key)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_list_len_next(j), unchecked+(sll_list_len_next(*((j->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(rsrtl(j), &&(&&(rsrtl(*((j->next))), unchecked!(@_vcc_oset_in(j, rsrtl_reach(*((j->next)))))), >=(*((j->key)), sll_max_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(rsrtl_reach(j), @_vcc_oset_union(rsrtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll(j), &&(sll(*((j->next))), unchecked!(@_vcc_oset_in(j, sll_reach(*((j->next)))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#j, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_reach(j), @_vcc_oset_union(sll_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_max_key(j), @\int_max(*((j->key)), sll_max_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_min_key(j), @\int_min(*((j->key)), sll_min_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(srtl(j), &&(&&(srtl(*((j->next))), unchecked!(@_vcc_oset_in(j, srtl_reach(*((j->next)))))), <=(*((j->key)), sll_min_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(srtl_reach(j), @_vcc_oset_union(srtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_keys(h), @_vcc_intset_union(sll_keys(*((h->next))), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#h, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_list_len_next(h), unchecked+(sll_list_len_next(*((h->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#h, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(rsrtl(h), &&(&&(rsrtl(*((h->next))), unchecked!(@_vcc_oset_in(h, rsrtl_reach(*((h->next)))))), >=(*((h->key)), sll_max_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(rsrtl_reach(h), @_vcc_oset_union(rsrtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll(h), &&(sll(*((h->next))), unchecked!(@_vcc_oset_in(h, sll_reach(*((h->next)))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#h, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_reach(h), @_vcc_oset_union(sll_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_max_key(h), @\int_max(*((h->key)), sll_max_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_min_key(h), @\int_min(*((h->key)), sll_min_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(srtl(h), &&(&&(srtl(*((h->next))), unchecked!(@_vcc_oset_in(h, srtl_reach(*((h->next)))))), <=(*((h->key)), sll_min_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(srtl_reach(h), @_vcc_oset_union(srtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg(h, j), &&(sll_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), j)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_reach(h, j), @_vcc_oset_union(sll_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_keys(h, j), @_vcc_intset_union(sll_lseg_keys(*((h->next)), j), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_len_next(h, j), unchecked+(sll_lseg_len_next(*((h->next)), j), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_max_key(h, j), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), j)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_min_key(h, j), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), j)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(srtl_lseg(h, j), &&(&&(srtl_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), j)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), j))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(srtl_lseg_reach(h, j), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg(h, i), &&(sll_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), i)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_reach(h, i), @_vcc_oset_union(sll_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_keys(h, i), @_vcc_intset_union(sll_lseg_keys(*((h->next)), i), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_len_next(h, i), unchecked+(sll_lseg_len_next(*((h->next)), i), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_max_key(h, i), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_min_key(h, i), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(srtl_lseg(h, i), &&(&&(srtl_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), i)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), i))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(srtl_lseg_reach(h, i), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(i)))), ==(old(_dryad_S0#0, sll_keys(i)), old(_dryad_S1#1, sll_keys(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_keys(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node)) == F#sll_keys(_dryad_S1#1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(i)))), ==(old(_dryad_S0#0, sll_list_len_next(i)), old(_dryad_S1#1, sll_list_len_next(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_list_len_next(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node)) == F#sll_list_len_next(_dryad_S1#1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, rsrtl_reach(i)))), ==(old(_dryad_S0#0, rsrtl(i)), old(_dryad_S1#1, rsrtl(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node))) ==> F#rsrtl(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node)) == F#rsrtl(_dryad_S1#1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, rsrtl_reach(i)))), ==(old(_dryad_S0#0, rsrtl_reach(i)), old(_dryad_S1#1, rsrtl_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node))) ==> F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node)) == F#rsrtl_reach(_dryad_S1#1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(i)))), ==(old(_dryad_S0#0, sll(i)), old(_dryad_S1#1, sll(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node)) == F#sll(_dryad_S1#1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(i)))), ==(old(_dryad_S0#0, sll_reach(i)), old(_dryad_S1#1, sll_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node)) == F#sll_reach(_dryad_S1#1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(i)))), ==(old(_dryad_S0#0, sll_max_key(i)), old(_dryad_S1#1, sll_max_key(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_max_key(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node)) == F#sll_max_key(_dryad_S1#1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(i)))), ==(old(_dryad_S0#0, sll_min_key(i)), old(_dryad_S1#1, sll_min_key(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_min_key(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node)) == F#sll_min_key(_dryad_S1#1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, srtl_reach(i)))), ==(old(_dryad_S0#0, srtl(i)), old(_dryad_S1#1, srtl(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node)) == F#srtl(_dryad_S1#1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, srtl_reach(i)))), ==(old(_dryad_S0#0, srtl_reach(i)), old(_dryad_S1#1, srtl_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(L#i, ^s_node)) == F#srtl_reach(_dryad_S1#1, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(j)))), ==(old(_dryad_S0#0, sll_keys(j)), old(_dryad_S1#1, sll_keys(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_keys(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node)) == F#sll_keys(_dryad_S1#1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(j)))), ==(old(_dryad_S0#0, sll_list_len_next(j)), old(_dryad_S1#1, sll_list_len_next(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_list_len_next(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node)) == F#sll_list_len_next(_dryad_S1#1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, rsrtl_reach(j)))), ==(old(_dryad_S0#0, rsrtl(j)), old(_dryad_S1#1, rsrtl(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node))) ==> F#rsrtl(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node)) == F#rsrtl(_dryad_S1#1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, rsrtl_reach(j)))), ==(old(_dryad_S0#0, rsrtl_reach(j)), old(_dryad_S1#1, rsrtl_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node))) ==> F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node)) == F#rsrtl_reach(_dryad_S1#1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(j)))), ==(old(_dryad_S0#0, sll(j)), old(_dryad_S1#1, sll(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node)) == F#sll(_dryad_S1#1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(j)))), ==(old(_dryad_S0#0, sll_reach(j)), old(_dryad_S1#1, sll_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node)) == F#sll_reach(_dryad_S1#1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(j)))), ==(old(_dryad_S0#0, sll_max_key(j)), old(_dryad_S1#1, sll_max_key(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_max_key(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node)) == F#sll_max_key(_dryad_S1#1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(j)))), ==(old(_dryad_S0#0, sll_min_key(j)), old(_dryad_S1#1, sll_min_key(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_min_key(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node)) == F#sll_min_key(_dryad_S1#1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, srtl_reach(j)))), ==(old(_dryad_S0#0, srtl(j)), old(_dryad_S1#1, srtl(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node)) == F#srtl(_dryad_S1#1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, srtl_reach(j)))), ==(old(_dryad_S0#0, srtl_reach(j)), old(_dryad_S1#1, srtl_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(L#j, ^s_node)) == F#srtl_reach(_dryad_S1#1, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(h)))), ==(old(_dryad_S0#0, sll_keys(h)), old(_dryad_S1#1, sll_keys(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_keys(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node)) == F#sll_keys(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(h)))), ==(old(_dryad_S0#0, sll_list_len_next(h)), old(_dryad_S1#1, sll_list_len_next(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_list_len_next(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node)) == F#sll_list_len_next(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, rsrtl_reach(h)))), ==(old(_dryad_S0#0, rsrtl(h)), old(_dryad_S1#1, rsrtl(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node))) ==> F#rsrtl(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node)) == F#rsrtl(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, rsrtl_reach(h)))), ==(old(_dryad_S0#0, rsrtl_reach(h)), old(_dryad_S1#1, rsrtl_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node))) ==> F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node)) == F#rsrtl_reach(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(h)))), ==(old(_dryad_S0#0, sll(h)), old(_dryad_S1#1, sll(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node)) == F#sll(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(h)))), ==(old(_dryad_S0#0, sll_reach(h)), old(_dryad_S1#1, sll_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node)) == F#sll_reach(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(h)))), ==(old(_dryad_S0#0, sll_max_key(h)), old(_dryad_S1#1, sll_max_key(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_max_key(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node)) == F#sll_max_key(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_reach(h)))), ==(old(_dryad_S0#0, sll_min_key(h)), old(_dryad_S1#1, sll_min_key(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_min_key(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node)) == F#sll_min_key(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, srtl_reach(h)))), ==(old(_dryad_S0#0, srtl(h)), old(_dryad_S1#1, srtl(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node))) ==> F#srtl(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node)) == F#srtl(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, srtl_reach(h)))), ==(old(_dryad_S0#0, srtl_reach(h)), old(_dryad_S1#1, srtl_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node))) ==> F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node)) == F#srtl_reach(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_lseg_reach(h, j)))), ==(old(_dryad_S0#0, sll_lseg(h, j)), old(_dryad_S1#1, sll_lseg(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_lseg_reach(h, j)))), ==(old(_dryad_S0#0, sll_lseg_reach(h, j)), old(_dryad_S1#1, sll_lseg_reach(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_reach(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_lseg_reach(h, j)))), ==(old(_dryad_S0#0, sll_lseg_keys(h, j)), old(_dryad_S1#1, sll_lseg_keys(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_keys(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_keys(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_lseg_reach(h, j)))), ==(old(_dryad_S0#0, sll_lseg_len_next(h, j)), old(_dryad_S1#1, sll_lseg_len_next(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_len_next(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_lseg_reach(h, j)))), ==(old(_dryad_S0#0, sll_lseg_max_key(h, j)), old(_dryad_S1#1, sll_lseg_max_key(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_max_key(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_lseg_reach(h, j)))), ==(old(_dryad_S0#0, sll_lseg_min_key(h, j)), old(_dryad_S1#1, sll_lseg_min_key(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_min_key(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, srtl_lseg_reach(h, j)))), ==(old(_dryad_S0#0, srtl_lseg(h, j)), old(_dryad_S1#1, srtl_lseg(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_lseg(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#srtl_lseg(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, srtl_lseg_reach(h, j)))), ==(old(_dryad_S0#0, srtl_lseg_reach(h, j)), old(_dryad_S1#1, srtl_lseg_reach(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#srtl_lseg_reach(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_lseg_reach(h, i)))), ==(old(_dryad_S0#0, sll_lseg(h, i)), old(_dryad_S1#1, sll_lseg(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_lseg_reach(h, i)))), ==(old(_dryad_S0#0, sll_lseg_reach(h, i)), old(_dryad_S1#1, sll_lseg_reach(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_reach(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_lseg_reach(h, i)))), ==(old(_dryad_S0#0, sll_lseg_keys(h, i)), old(_dryad_S1#1, sll_lseg_keys(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_keys(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_keys(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_lseg_reach(h, i)))), ==(old(_dryad_S0#0, sll_lseg_len_next(h, i)), old(_dryad_S1#1, sll_lseg_len_next(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_len_next(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_lseg_reach(h, i)))), ==(old(_dryad_S0#0, sll_lseg_max_key(h, i)), old(_dryad_S1#1, sll_lseg_max_key(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_max_key(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, sll_lseg_reach(h, i)))), ==(old(_dryad_S0#0, sll_lseg_min_key(h, i)), old(_dryad_S1#1, sll_lseg_min_key(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_min_key(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, srtl_lseg_reach(h, i)))), ==(old(_dryad_S0#0, srtl_lseg(h, i)), old(_dryad_S1#1, srtl_lseg(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_lseg(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#srtl_lseg(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S0#0, srtl_lseg_reach(h, i)))), ==(old(_dryad_S0#0, srtl_lseg_reach(h, i)), old(_dryad_S1#1, srtl_lseg_reach(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#srtl_lseg_reach(_dryad_S1#1, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume @_vcc_ptr_neq_null(e); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node));
        // _math \state _dryad_S2#2; 
        // _dryad_S2#2 := @_vcc_current_state(@state); 
        _dryad_S2#2 := $current_state($s);
        // _math \state stmtexpr3#14; 
        // stmtexpr3#14 := _dryad_S2#2; 
        stmtexpr3#14 := _dryad_S2#2;
        // assert @prim_writes_check((e->key)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#e, ^s_node), s_node.key));
        // *(e->key) := v; 
        call $write_int(s_node.key, $phys_ptr_cast(L#e, ^s_node), P#v);
        assume $full_stop_ext(#tok$3^43.5, $s);
        // _math \state _dryad_S3#3; 
        // _dryad_S3#3 := @_vcc_current_state(@state); 
        _dryad_S3#3 := $current_state($s);
        // _math \state stmtexpr4#15; 
        // stmtexpr4#15 := _dryad_S3#3; 
        stmtexpr4#15 := _dryad_S3#3;
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(*((e->next)))))), ==(old(_dryad_S2#2, sll_keys(*((e->next)))), old(_dryad_S3#3, sll_keys(*((e->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) ==> F#sll_keys(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) == F#sll_keys(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(*((e->next)))))), ==(old(_dryad_S2#2, sll_list_len_next(*((e->next)))), old(_dryad_S3#3, sll_list_len_next(*((e->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, rsrtl_reach(*((e->next)))))), ==(old(_dryad_S2#2, rsrtl(*((e->next)))), old(_dryad_S3#3, rsrtl(*((e->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) ==> F#rsrtl(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) == F#rsrtl(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, rsrtl_reach(*((e->next)))))), ==(old(_dryad_S2#2, rsrtl_reach(*((e->next)))), old(_dryad_S3#3, rsrtl_reach(*((e->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) ==> F#rsrtl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(*((e->next)))))), ==(old(_dryad_S2#2, sll(*((e->next)))), old(_dryad_S3#3, sll(*((e->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) ==> F#sll(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) == F#sll(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(*((e->next)))))), ==(old(_dryad_S2#2, sll_reach(*((e->next)))), old(_dryad_S3#3, sll_reach(*((e->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) ==> F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) == F#sll_reach(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(*((e->next)))))), ==(old(_dryad_S2#2, sll_max_key(*((e->next)))), old(_dryad_S3#3, sll_max_key(*((e->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) ==> F#sll_max_key(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) == F#sll_max_key(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(*((e->next)))))), ==(old(_dryad_S2#2, sll_min_key(*((e->next)))), old(_dryad_S3#3, sll_min_key(*((e->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) ==> F#sll_min_key(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) == F#sll_min_key(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, srtl_reach(*((e->next)))))), ==(old(_dryad_S2#2, srtl(*((e->next)))), old(_dryad_S3#3, srtl(*((e->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) ==> F#srtl(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) == F#srtl(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, srtl_reach(*((e->next)))))), ==(old(_dryad_S2#2, srtl_reach(*((e->next)))), old(_dryad_S3#3, srtl_reach(*((e->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) ==> F#srtl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) == F#srtl_reach(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node));
        // assume ==(old(_dryad_S2#2, sll_list_len_next(e)), old(_dryad_S3#3, sll_list_len_next(e))); 
        assume F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#e, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#e, ^s_node));
        // assume ==(old(_dryad_S2#2, rsrtl_reach(e)), old(_dryad_S3#3, rsrtl_reach(e))); 
        assume F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#e, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(L#e, ^s_node));
        // assume ==(old(_dryad_S2#2, sll(e)), old(_dryad_S3#3, sll(e))); 
        assume F#sll(_dryad_S2#2, $phys_ptr_cast(L#e, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#e, ^s_node));
        // assume ==(old(_dryad_S2#2, sll_reach(e)), old(_dryad_S3#3, sll_reach(e))); 
        assume F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#e, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#e, ^s_node));
        // assume ==(old(_dryad_S2#2, srtl_reach(e)), old(_dryad_S3#3, srtl_reach(e))); 
        assume F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#e, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(L#e, ^s_node));
        // assume ==(old(_dryad_S2#2, sll_list_len_next(i)), old(_dryad_S3#3, sll_list_len_next(i))); 
        assume F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==(old(_dryad_S2#2, rsrtl_reach(i)), old(_dryad_S3#3, rsrtl_reach(i))); 
        assume F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==(old(_dryad_S2#2, sll(i)), old(_dryad_S3#3, sll(i))); 
        assume F#sll(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==(old(_dryad_S2#2, sll_reach(i)), old(_dryad_S3#3, sll_reach(i))); 
        assume F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==(old(_dryad_S2#2, srtl_reach(i)), old(_dryad_S3#3, srtl_reach(i))); 
        assume F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==(old(_dryad_S2#2, sll_list_len_next(j)), old(_dryad_S3#3, sll_list_len_next(j))); 
        assume F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==(old(_dryad_S2#2, rsrtl_reach(j)), old(_dryad_S3#3, rsrtl_reach(j))); 
        assume F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==(old(_dryad_S2#2, sll(j)), old(_dryad_S3#3, sll(j))); 
        assume F#sll(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==(old(_dryad_S2#2, sll_reach(j)), old(_dryad_S3#3, sll_reach(j))); 
        assume F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==(old(_dryad_S2#2, srtl_reach(j)), old(_dryad_S3#3, srtl_reach(j))); 
        assume F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==(old(_dryad_S2#2, sll_list_len_next(h)), old(_dryad_S3#3, sll_list_len_next(h))); 
        assume F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==(old(_dryad_S2#2, rsrtl_reach(h)), old(_dryad_S3#3, rsrtl_reach(h))); 
        assume F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==(old(_dryad_S2#2, sll(h)), old(_dryad_S3#3, sll(h))); 
        assume F#sll(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==(old(_dryad_S2#2, sll_reach(h)), old(_dryad_S3#3, sll_reach(h))); 
        assume F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==(old(_dryad_S2#2, srtl_reach(h)), old(_dryad_S3#3, srtl_reach(h))); 
        assume F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(i)))), ==(old(_dryad_S2#2, sll_keys(i)), old(_dryad_S3#3, sll_keys(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_keys(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node)) == F#sll_keys(_dryad_S3#3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(i)))), ==(old(_dryad_S2#2, sll_list_len_next(i)), old(_dryad_S3#3, sll_list_len_next(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, rsrtl_reach(i)))), ==(old(_dryad_S2#2, rsrtl(i)), old(_dryad_S3#3, rsrtl(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node))) ==> F#rsrtl(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node)) == F#rsrtl(_dryad_S3#3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, rsrtl_reach(i)))), ==(old(_dryad_S2#2, rsrtl_reach(i)), old(_dryad_S3#3, rsrtl_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(i)))), ==(old(_dryad_S2#2, sll(i)), old(_dryad_S3#3, sll(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(i)))), ==(old(_dryad_S2#2, sll_reach(i)), old(_dryad_S3#3, sll_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(i)))), ==(old(_dryad_S2#2, sll_max_key(i)), old(_dryad_S3#3, sll_max_key(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_max_key(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node)) == F#sll_max_key(_dryad_S3#3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(i)))), ==(old(_dryad_S2#2, sll_min_key(i)), old(_dryad_S3#3, sll_min_key(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_min_key(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node)) == F#sll_min_key(_dryad_S3#3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, srtl_reach(i)))), ==(old(_dryad_S2#2, srtl(i)), old(_dryad_S3#3, srtl(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node)) == F#srtl(_dryad_S3#3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, srtl_reach(i)))), ==(old(_dryad_S2#2, srtl_reach(i)), old(_dryad_S3#3, srtl_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#i, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(j)))), ==(old(_dryad_S2#2, sll_keys(j)), old(_dryad_S3#3, sll_keys(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_keys(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node)) == F#sll_keys(_dryad_S3#3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(j)))), ==(old(_dryad_S2#2, sll_list_len_next(j)), old(_dryad_S3#3, sll_list_len_next(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, rsrtl_reach(j)))), ==(old(_dryad_S2#2, rsrtl(j)), old(_dryad_S3#3, rsrtl(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node))) ==> F#rsrtl(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node)) == F#rsrtl(_dryad_S3#3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, rsrtl_reach(j)))), ==(old(_dryad_S2#2, rsrtl_reach(j)), old(_dryad_S3#3, rsrtl_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(j)))), ==(old(_dryad_S2#2, sll(j)), old(_dryad_S3#3, sll(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(j)))), ==(old(_dryad_S2#2, sll_reach(j)), old(_dryad_S3#3, sll_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(j)))), ==(old(_dryad_S2#2, sll_max_key(j)), old(_dryad_S3#3, sll_max_key(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_max_key(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node)) == F#sll_max_key(_dryad_S3#3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(j)))), ==(old(_dryad_S2#2, sll_min_key(j)), old(_dryad_S3#3, sll_min_key(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_min_key(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node)) == F#sll_min_key(_dryad_S3#3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, srtl_reach(j)))), ==(old(_dryad_S2#2, srtl(j)), old(_dryad_S3#3, srtl(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node)) == F#srtl(_dryad_S3#3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, srtl_reach(j)))), ==(old(_dryad_S2#2, srtl_reach(j)), old(_dryad_S3#3, srtl_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#j, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(h)))), ==(old(_dryad_S2#2, sll_keys(h)), old(_dryad_S3#3, sll_keys(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_keys(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node)) == F#sll_keys(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(h)))), ==(old(_dryad_S2#2, sll_list_len_next(h)), old(_dryad_S3#3, sll_list_len_next(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, rsrtl_reach(h)))), ==(old(_dryad_S2#2, rsrtl(h)), old(_dryad_S3#3, rsrtl(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node))) ==> F#rsrtl(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node)) == F#rsrtl(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, rsrtl_reach(h)))), ==(old(_dryad_S2#2, rsrtl_reach(h)), old(_dryad_S3#3, rsrtl_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(h)))), ==(old(_dryad_S2#2, sll(h)), old(_dryad_S3#3, sll(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(h)))), ==(old(_dryad_S2#2, sll_reach(h)), old(_dryad_S3#3, sll_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(h)))), ==(old(_dryad_S2#2, sll_max_key(h)), old(_dryad_S3#3, sll_max_key(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_max_key(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node)) == F#sll_max_key(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_reach(h)))), ==(old(_dryad_S2#2, sll_min_key(h)), old(_dryad_S3#3, sll_min_key(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_min_key(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node)) == F#sll_min_key(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, srtl_reach(h)))), ==(old(_dryad_S2#2, srtl(h)), old(_dryad_S3#3, srtl(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node))) ==> F#srtl(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node)) == F#srtl(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, srtl_reach(h)))), ==(old(_dryad_S2#2, srtl_reach(h)), old(_dryad_S3#3, srtl_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node))) ==> F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_lseg_reach(h, j)))), ==(old(_dryad_S2#2, sll_lseg(h, j)), old(_dryad_S3#3, sll_lseg(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_lseg_reach(h, j)))), ==(old(_dryad_S2#2, sll_lseg_reach(h, j)), old(_dryad_S3#3, sll_lseg_reach(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_reach(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_lseg_reach(h, j)))), ==(old(_dryad_S2#2, sll_lseg_keys(h, j)), old(_dryad_S3#3, sll_lseg_keys(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_keys(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_keys(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_lseg_reach(h, j)))), ==(old(_dryad_S2#2, sll_lseg_len_next(h, j)), old(_dryad_S3#3, sll_lseg_len_next(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_len_next(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_lseg_reach(h, j)))), ==(old(_dryad_S2#2, sll_lseg_max_key(h, j)), old(_dryad_S3#3, sll_lseg_max_key(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_max_key(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_lseg_reach(h, j)))), ==(old(_dryad_S2#2, sll_lseg_min_key(h, j)), old(_dryad_S3#3, sll_lseg_min_key(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_min_key(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, srtl_lseg_reach(h, j)))), ==(old(_dryad_S2#2, srtl_lseg(h, j)), old(_dryad_S3#3, srtl_lseg(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_lseg(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#srtl_lseg(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, srtl_lseg_reach(h, j)))), ==(old(_dryad_S2#2, srtl_lseg_reach(h, j)), old(_dryad_S3#3, srtl_lseg_reach(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#srtl_lseg_reach(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_lseg_reach(h, i)))), ==(old(_dryad_S2#2, sll_lseg(h, i)), old(_dryad_S3#3, sll_lseg(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_lseg_reach(h, i)))), ==(old(_dryad_S2#2, sll_lseg_reach(h, i)), old(_dryad_S3#3, sll_lseg_reach(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_reach(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_lseg_reach(h, i)))), ==(old(_dryad_S2#2, sll_lseg_keys(h, i)), old(_dryad_S3#3, sll_lseg_keys(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_keys(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_keys(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_lseg_reach(h, i)))), ==(old(_dryad_S2#2, sll_lseg_len_next(h, i)), old(_dryad_S3#3, sll_lseg_len_next(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_len_next(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_lseg_reach(h, i)))), ==(old(_dryad_S2#2, sll_lseg_max_key(h, i)), old(_dryad_S3#3, sll_lseg_max_key(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_max_key(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, sll_lseg_reach(h, i)))), ==(old(_dryad_S2#2, sll_lseg_min_key(h, i)), old(_dryad_S3#3, sll_lseg_min_key(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_min_key(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, srtl_lseg_reach(h, i)))), ==(old(_dryad_S2#2, srtl_lseg(h, i)), old(_dryad_S3#3, srtl_lseg(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_lseg(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#srtl_lseg(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S2#2, srtl_lseg_reach(h, i)))), ==(old(_dryad_S2#2, srtl_lseg_reach(h, i)), old(_dryad_S3#3, srtl_lseg_reach(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#srtl_lseg_reach(_dryad_S3#3, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(e, i)), ==(*((i->key)), old(_dryad_S2#2, *((i->key))))); 
        assume !($phys_ptr_cast(L#e, ^s_node) == $phys_ptr_cast(L#i, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) == $rd_inv(_dryad_S2#2, s_node.key, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(e, i)), @_vcc_ptr_eq_pure(*((i->next)), old(_dryad_S2#2, *((i->next))))); 
        assume !($phys_ptr_cast(L#e, ^s_node) == $phys_ptr_cast(L#i, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(e, j)), ==(*((j->key)), old(_dryad_S2#2, *((j->key))))); 
        assume !($phys_ptr_cast(L#e, ^s_node) == $phys_ptr_cast(L#j, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) == $rd_inv(_dryad_S2#2, s_node.key, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(e, j)), @_vcc_ptr_eq_pure(*((j->next)), old(_dryad_S2#2, *((j->next))))); 
        assume !($phys_ptr_cast(L#e, ^s_node) == $phys_ptr_cast(L#j, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(e, h)), ==(*((h->key)), old(_dryad_S2#2, *((h->key))))); 
        assume !($phys_ptr_cast(L#e, ^s_node) == $phys_ptr_cast(P#h, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) == $rd_inv(_dryad_S2#2, s_node.key, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(e, h)), @_vcc_ptr_eq_pure(*((h->next)), old(_dryad_S2#2, *((h->next))))); 
        assume !($phys_ptr_cast(L#e, ^s_node) == $phys_ptr_cast(P#h, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_keys(i), @_vcc_intset_union(sll_keys(*((i->next))), @_vcc_intset_singleton(*((i->key)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_list_len_next(i), unchecked+(sll_list_len_next(*((i->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(rsrtl(i), &&(&&(rsrtl(*((i->next))), unchecked!(@_vcc_oset_in(i, rsrtl_reach(*((i->next)))))), >=(*((i->key)), sll_max_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(rsrtl_reach(i), @_vcc_oset_union(rsrtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll(i), &&(sll(*((i->next))), unchecked!(@_vcc_oset_in(i, sll_reach(*((i->next)))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#i, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_reach(i), @_vcc_oset_union(sll_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_max_key(i), @\int_max(*((i->key)), sll_max_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_min_key(i), @\int_min(*((i->key)), sll_min_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(srtl(i), &&(&&(srtl(*((i->next))), unchecked!(@_vcc_oset_in(i, srtl_reach(*((i->next)))))), <=(*((i->key)), sll_min_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(srtl_reach(i), @_vcc_oset_union(srtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_keys(j), @_vcc_intset_union(sll_keys(*((j->next))), @_vcc_intset_singleton(*((j->key)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_list_len_next(j), unchecked+(sll_list_len_next(*((j->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(rsrtl(j), &&(&&(rsrtl(*((j->next))), unchecked!(@_vcc_oset_in(j, rsrtl_reach(*((j->next)))))), >=(*((j->key)), sll_max_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(rsrtl_reach(j), @_vcc_oset_union(rsrtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll(j), &&(sll(*((j->next))), unchecked!(@_vcc_oset_in(j, sll_reach(*((j->next)))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#j, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_reach(j), @_vcc_oset_union(sll_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_max_key(j), @\int_max(*((j->key)), sll_max_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_min_key(j), @\int_min(*((j->key)), sll_min_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(srtl(j), &&(&&(srtl(*((j->next))), unchecked!(@_vcc_oset_in(j, srtl_reach(*((j->next)))))), <=(*((j->key)), sll_min_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(srtl_reach(j), @_vcc_oset_union(srtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_keys(h), @_vcc_intset_union(sll_keys(*((h->next))), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#h, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_list_len_next(h), unchecked+(sll_list_len_next(*((h->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#h, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(rsrtl(h), &&(&&(rsrtl(*((h->next))), unchecked!(@_vcc_oset_in(h, rsrtl_reach(*((h->next)))))), >=(*((h->key)), sll_max_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(rsrtl_reach(h), @_vcc_oset_union(rsrtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll(h), &&(sll(*((h->next))), unchecked!(@_vcc_oset_in(h, sll_reach(*((h->next)))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#h, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_reach(h), @_vcc_oset_union(sll_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_max_key(h), @\int_max(*((h->key)), sll_max_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_min_key(h), @\int_min(*((h->key)), sll_min_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(srtl(h), &&(&&(srtl(*((h->next))), unchecked!(@_vcc_oset_in(h, srtl_reach(*((h->next)))))), <=(*((h->key)), sll_min_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(srtl_reach(h), @_vcc_oset_union(srtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(sll_keys(e), @_vcc_intset_union(sll_keys(*((e->next))), @_vcc_intset_singleton(*((e->key)))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#e, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(rsrtl(e), &&(&&(rsrtl(*((e->next))), unchecked!(@_vcc_oset_in(e, rsrtl_reach(*((e->next)))))), >=(*((e->key)), sll_max_key(*((e->next))))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#e, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(sll_max_key(e), @\int_max(*((e->key)), sll_max_key(*((e->next)))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#e, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(sll_min_key(e), @\int_min(*((e->key)), sll_min_key(*((e->next)))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#e, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(srtl(e), &&(&&(srtl(*((e->next))), unchecked!(@_vcc_oset_in(e, srtl_reach(*((e->next)))))), <=(*((e->key)), sll_min_key(*((e->next))))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#e, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg(h, j), &&(sll_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), j)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_reach(h, j), @_vcc_oset_union(sll_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_keys(h, j), @_vcc_intset_union(sll_lseg_keys(*((h->next)), j), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_len_next(h, j), unchecked+(sll_lseg_len_next(*((h->next)), j), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_max_key(h, j), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), j)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_min_key(h, j), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), j)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(srtl_lseg(h, j), &&(&&(srtl_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), j)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), j))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(srtl_lseg_reach(h, j), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg(h, i), &&(sll_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), i)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_reach(h, i), @_vcc_oset_union(sll_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_keys(h, i), @_vcc_intset_union(sll_lseg_keys(*((h->next)), i), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_len_next(h, i), unchecked+(sll_lseg_len_next(*((h->next)), i), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_max_key(h, i), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_min_key(h, i), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(srtl_lseg(h, i), &&(&&(srtl_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), i)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), i))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(srtl_lseg_reach(h, i), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // _math \state _dryad_S4#4; 
        // _dryad_S4#4 := @_vcc_current_state(@state); 
        _dryad_S4#4 := $current_state($s);
        // _math \state stmtexpr5#16; 
        // stmtexpr5#16 := _dryad_S4#4; 
        stmtexpr5#16 := _dryad_S4#4;
        // assert @prim_writes_check((j->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#j, ^s_node), s_node.next));
        // *(j->next) := e; 
        call $write_int(s_node.next, $phys_ptr_cast(L#j, ^s_node), $ptr_to_int($phys_ptr_cast(L#e, ^s_node)));
        assume $full_stop_ext(#tok$3^44.5, $s);
        // _math \state _dryad_S5#5; 
        // _dryad_S5#5 := @_vcc_current_state(@state); 
        _dryad_S5#5 := $current_state($s);
        // _math \state stmtexpr6#17; 
        // stmtexpr6#17 := _dryad_S5#5; 
        stmtexpr6#17 := _dryad_S5#5;
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(e)))), ==(old(_dryad_S4#4, sll_keys(e)), old(_dryad_S5#5, sll_keys(e)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node))) ==> F#sll_keys(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node)) == F#sll_keys(_dryad_S5#5, $phys_ptr_cast(L#e, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(e)))), ==(old(_dryad_S4#4, sll_list_len_next(e)), old(_dryad_S5#5, sll_list_len_next(e)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node)) == F#sll_list_len_next(_dryad_S5#5, $phys_ptr_cast(L#e, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, rsrtl_reach(e)))), ==(old(_dryad_S4#4, rsrtl(e)), old(_dryad_S5#5, rsrtl(e)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node))) ==> F#rsrtl(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node)) == F#rsrtl(_dryad_S5#5, $phys_ptr_cast(L#e, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, rsrtl_reach(e)))), ==(old(_dryad_S4#4, rsrtl_reach(e)), old(_dryad_S5#5, rsrtl_reach(e)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node))) ==> F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node)) == F#rsrtl_reach(_dryad_S5#5, $phys_ptr_cast(L#e, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(e)))), ==(old(_dryad_S4#4, sll(e)), old(_dryad_S5#5, sll(e)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node))) ==> F#sll(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node)) == F#sll(_dryad_S5#5, $phys_ptr_cast(L#e, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(e)))), ==(old(_dryad_S4#4, sll_reach(e)), old(_dryad_S5#5, sll_reach(e)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node))) ==> F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node)) == F#sll_reach(_dryad_S5#5, $phys_ptr_cast(L#e, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(e)))), ==(old(_dryad_S4#4, sll_max_key(e)), old(_dryad_S5#5, sll_max_key(e)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node))) ==> F#sll_max_key(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node)) == F#sll_max_key(_dryad_S5#5, $phys_ptr_cast(L#e, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(e)))), ==(old(_dryad_S4#4, sll_min_key(e)), old(_dryad_S5#5, sll_min_key(e)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node))) ==> F#sll_min_key(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node)) == F#sll_min_key(_dryad_S5#5, $phys_ptr_cast(L#e, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, srtl_reach(e)))), ==(old(_dryad_S4#4, srtl(e)), old(_dryad_S5#5, srtl(e)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node))) ==> F#srtl(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node)) == F#srtl(_dryad_S5#5, $phys_ptr_cast(L#e, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, srtl_reach(e)))), ==(old(_dryad_S4#4, srtl_reach(e)), old(_dryad_S5#5, srtl_reach(e)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node))) ==> F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(L#e, ^s_node)) == F#srtl_reach(_dryad_S5#5, $phys_ptr_cast(L#e, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(i)))), ==(old(_dryad_S4#4, sll_keys(i)), old(_dryad_S5#5, sll_keys(i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_keys(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node)) == F#sll_keys(_dryad_S5#5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(i)))), ==(old(_dryad_S4#4, sll_list_len_next(i)), old(_dryad_S5#5, sll_list_len_next(i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node)) == F#sll_list_len_next(_dryad_S5#5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, rsrtl_reach(i)))), ==(old(_dryad_S4#4, rsrtl(i)), old(_dryad_S5#5, rsrtl(i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node))) ==> F#rsrtl(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node)) == F#rsrtl(_dryad_S5#5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, rsrtl_reach(i)))), ==(old(_dryad_S4#4, rsrtl_reach(i)), old(_dryad_S5#5, rsrtl_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node))) ==> F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node)) == F#rsrtl_reach(_dryad_S5#5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(i)))), ==(old(_dryad_S4#4, sll(i)), old(_dryad_S5#5, sll(i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node)) == F#sll(_dryad_S5#5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(i)))), ==(old(_dryad_S4#4, sll_reach(i)), old(_dryad_S5#5, sll_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node)) == F#sll_reach(_dryad_S5#5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(i)))), ==(old(_dryad_S4#4, sll_max_key(i)), old(_dryad_S5#5, sll_max_key(i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_max_key(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node)) == F#sll_max_key(_dryad_S5#5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(i)))), ==(old(_dryad_S4#4, sll_min_key(i)), old(_dryad_S5#5, sll_min_key(i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_min_key(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node)) == F#sll_min_key(_dryad_S5#5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, srtl_reach(i)))), ==(old(_dryad_S4#4, srtl(i)), old(_dryad_S5#5, srtl(i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node)) == F#srtl(_dryad_S5#5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, srtl_reach(i)))), ==(old(_dryad_S4#4, srtl_reach(i)), old(_dryad_S5#5, srtl_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(L#i, ^s_node)) == F#srtl_reach(_dryad_S5#5, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(h)))), ==(old(_dryad_S4#4, sll_keys(h)), old(_dryad_S5#5, sll_keys(h)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_keys(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node)) == F#sll_keys(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(h)))), ==(old(_dryad_S4#4, sll_list_len_next(h)), old(_dryad_S5#5, sll_list_len_next(h)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node)) == F#sll_list_len_next(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, rsrtl_reach(h)))), ==(old(_dryad_S4#4, rsrtl(h)), old(_dryad_S5#5, rsrtl(h)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node))) ==> F#rsrtl(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node)) == F#rsrtl(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, rsrtl_reach(h)))), ==(old(_dryad_S4#4, rsrtl_reach(h)), old(_dryad_S5#5, rsrtl_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node))) ==> F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node)) == F#rsrtl_reach(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(h)))), ==(old(_dryad_S4#4, sll(h)), old(_dryad_S5#5, sll(h)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node)) == F#sll(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(h)))), ==(old(_dryad_S4#4, sll_reach(h)), old(_dryad_S5#5, sll_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node)) == F#sll_reach(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(h)))), ==(old(_dryad_S4#4, sll_max_key(h)), old(_dryad_S5#5, sll_max_key(h)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_max_key(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node)) == F#sll_max_key(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_reach(h)))), ==(old(_dryad_S4#4, sll_min_key(h)), old(_dryad_S5#5, sll_min_key(h)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_min_key(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node)) == F#sll_min_key(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, srtl_reach(h)))), ==(old(_dryad_S4#4, srtl(h)), old(_dryad_S5#5, srtl(h)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node))) ==> F#srtl(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node)) == F#srtl(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, srtl_reach(h)))), ==(old(_dryad_S4#4, srtl_reach(h)), old(_dryad_S5#5, srtl_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node))) ==> F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node)) == F#srtl_reach(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_lseg_reach(h, j)))), ==(old(_dryad_S4#4, sll_lseg(h, j)), old(_dryad_S5#5, sll_lseg(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_lseg_reach(h, j)))), ==(old(_dryad_S4#4, sll_lseg_reach(h, j)), old(_dryad_S5#5, sll_lseg_reach(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_reach(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_lseg_reach(h, j)))), ==(old(_dryad_S4#4, sll_lseg_keys(h, j)), old(_dryad_S5#5, sll_lseg_keys(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_keys(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_lseg_reach(h, j)))), ==(old(_dryad_S4#4, sll_lseg_len_next(h, j)), old(_dryad_S5#5, sll_lseg_len_next(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_lseg_reach(h, j)))), ==(old(_dryad_S4#4, sll_lseg_max_key(h, j)), old(_dryad_S5#5, sll_lseg_max_key(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_max_key(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_lseg_reach(h, j)))), ==(old(_dryad_S4#4, sll_lseg_min_key(h, j)), old(_dryad_S5#5, sll_lseg_min_key(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_min_key(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, srtl_lseg_reach(h, j)))), ==(old(_dryad_S4#4, srtl_lseg(h, j)), old(_dryad_S5#5, srtl_lseg(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_lseg(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#srtl_lseg(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, srtl_lseg_reach(h, j)))), ==(old(_dryad_S4#4, srtl_lseg_reach(h, j)), old(_dryad_S5#5, srtl_lseg_reach(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#srtl_lseg_reach(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_lseg_reach(h, i)))), ==(old(_dryad_S4#4, sll_lseg(h, i)), old(_dryad_S5#5, sll_lseg(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_lseg_reach(h, i)))), ==(old(_dryad_S4#4, sll_lseg_reach(h, i)), old(_dryad_S5#5, sll_lseg_reach(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_reach(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_lseg_reach(h, i)))), ==(old(_dryad_S4#4, sll_lseg_keys(h, i)), old(_dryad_S5#5, sll_lseg_keys(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_keys(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_lseg_reach(h, i)))), ==(old(_dryad_S4#4, sll_lseg_len_next(h, i)), old(_dryad_S5#5, sll_lseg_len_next(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_lseg_reach(h, i)))), ==(old(_dryad_S4#4, sll_lseg_max_key(h, i)), old(_dryad_S5#5, sll_lseg_max_key(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_max_key(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, sll_lseg_reach(h, i)))), ==(old(_dryad_S4#4, sll_lseg_min_key(h, i)), old(_dryad_S5#5, sll_lseg_min_key(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_min_key(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, srtl_lseg_reach(h, i)))), ==(old(_dryad_S4#4, srtl_lseg(h, i)), old(_dryad_S5#5, srtl_lseg(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_lseg(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#srtl_lseg(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(j, old(_dryad_S4#4, srtl_lseg_reach(h, i)))), ==(old(_dryad_S4#4, srtl_lseg_reach(h, i)), old(_dryad_S5#5, srtl_lseg_reach(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#srtl_lseg_reach(_dryad_S5#5, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(j, e)), ==(*((e->key)), old(_dryad_S4#4, *((e->key))))); 
        assume !($phys_ptr_cast(L#j, ^s_node) == $phys_ptr_cast(L#e, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)) == $rd_inv(_dryad_S4#4, s_node.key, $phys_ptr_cast(L#e, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(j, e)), @_vcc_ptr_eq_pure(*((e->next)), old(_dryad_S4#4, *((e->next))))); 
        assume !($phys_ptr_cast(L#j, ^s_node) == $phys_ptr_cast(L#e, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#4, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(j, i)), ==(*((i->key)), old(_dryad_S4#4, *((i->key))))); 
        assume !($phys_ptr_cast(L#j, ^s_node) == $phys_ptr_cast(L#i, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) == $rd_inv(_dryad_S4#4, s_node.key, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(j, i)), @_vcc_ptr_eq_pure(*((i->next)), old(_dryad_S4#4, *((i->next))))); 
        assume !($phys_ptr_cast(L#j, ^s_node) == $phys_ptr_cast(L#i, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#4, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(j, h)), ==(*((h->key)), old(_dryad_S4#4, *((h->key))))); 
        assume !($phys_ptr_cast(L#j, ^s_node) == $phys_ptr_cast(P#h, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) == $rd_inv(_dryad_S4#4, s_node.key, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(j, h)), @_vcc_ptr_eq_pure(*((h->next)), old(_dryad_S4#4, *((h->next))))); 
        assume !($phys_ptr_cast(L#j, ^s_node) == $phys_ptr_cast(P#h, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#4, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(e), ==(sll_keys(e), @_vcc_intset_union(sll_keys(*((e->next))), @_vcc_intset_singleton(*((e->key)))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#e, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(sll_list_len_next(e), unchecked+(sll_list_len_next(*((e->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#e, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(rsrtl(e), &&(&&(rsrtl(*((e->next))), unchecked!(@_vcc_oset_in(e, rsrtl_reach(*((e->next)))))), >=(*((e->key)), sll_max_key(*((e->next))))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#e, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(rsrtl_reach(e), @_vcc_oset_union(rsrtl_reach(*((e->next))), @_vcc_oset_singleton(e)))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#e, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#e, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(sll(e), &&(sll(*((e->next))), unchecked!(@_vcc_oset_in(e, sll_reach(*((e->next)))))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#e, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(sll_reach(e), @_vcc_oset_union(sll_reach(*((e->next))), @_vcc_oset_singleton(e)))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#e, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#e, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(sll_max_key(e), @\int_max(*((e->key)), sll_max_key(*((e->next)))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#e, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(sll_min_key(e), @\int_min(*((e->key)), sll_min_key(*((e->next)))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#e, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(srtl(e), &&(&&(srtl(*((e->next))), unchecked!(@_vcc_oset_in(e, srtl_reach(*((e->next)))))), <=(*((e->key)), sll_min_key(*((e->next))))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#e, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(srtl_reach(e), @_vcc_oset_union(srtl_reach(*((e->next))), @_vcc_oset_singleton(e)))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#e, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#e, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_keys(i), @_vcc_intset_union(sll_keys(*((i->next))), @_vcc_intset_singleton(*((i->key)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_list_len_next(i), unchecked+(sll_list_len_next(*((i->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(rsrtl(i), &&(&&(rsrtl(*((i->next))), unchecked!(@_vcc_oset_in(i, rsrtl_reach(*((i->next)))))), >=(*((i->key)), sll_max_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(rsrtl_reach(i), @_vcc_oset_union(rsrtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll(i), &&(sll(*((i->next))), unchecked!(@_vcc_oset_in(i, sll_reach(*((i->next)))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#i, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_reach(i), @_vcc_oset_union(sll_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_max_key(i), @\int_max(*((i->key)), sll_max_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_min_key(i), @\int_min(*((i->key)), sll_min_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(srtl(i), &&(&&(srtl(*((i->next))), unchecked!(@_vcc_oset_in(i, srtl_reach(*((i->next)))))), <=(*((i->key)), sll_min_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(srtl_reach(i), @_vcc_oset_union(srtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_keys(h), @_vcc_intset_union(sll_keys(*((h->next))), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#h, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_list_len_next(h), unchecked+(sll_list_len_next(*((h->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#h, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(rsrtl(h), &&(&&(rsrtl(*((h->next))), unchecked!(@_vcc_oset_in(h, rsrtl_reach(*((h->next)))))), >=(*((h->key)), sll_max_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(rsrtl_reach(h), @_vcc_oset_union(rsrtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll(h), &&(sll(*((h->next))), unchecked!(@_vcc_oset_in(h, sll_reach(*((h->next)))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#h, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_reach(h), @_vcc_oset_union(sll_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_max_key(h), @\int_max(*((h->key)), sll_max_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_min_key(h), @\int_min(*((h->key)), sll_min_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(srtl(h), &&(&&(srtl(*((h->next))), unchecked!(@_vcc_oset_in(h, srtl_reach(*((h->next)))))), <=(*((h->key)), sll_min_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(srtl_reach(h), @_vcc_oset_union(srtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_keys(j), @_vcc_intset_union(sll_keys(*((j->next))), @_vcc_intset_singleton(*((j->key)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_list_len_next(j), unchecked+(sll_list_len_next(*((j->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(rsrtl(j), &&(&&(rsrtl(*((j->next))), unchecked!(@_vcc_oset_in(j, rsrtl_reach(*((j->next)))))), >=(*((j->key)), sll_max_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(rsrtl_reach(j), @_vcc_oset_union(rsrtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll(j), &&(sll(*((j->next))), unchecked!(@_vcc_oset_in(j, sll_reach(*((j->next)))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#j, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_reach(j), @_vcc_oset_union(sll_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_max_key(j), @\int_max(*((j->key)), sll_max_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_min_key(j), @\int_min(*((j->key)), sll_min_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(srtl(j), &&(&&(srtl(*((j->next))), unchecked!(@_vcc_oset_in(j, srtl_reach(*((j->next)))))), <=(*((j->key)), sll_min_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(srtl_reach(j), @_vcc_oset_union(srtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(sll_keys(e), @_vcc_intset_union(sll_keys(*((e->next))), @_vcc_intset_singleton(*((e->key)))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#e, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(sll_list_len_next(e), unchecked+(sll_list_len_next(*((e->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#e, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(rsrtl(e), &&(&&(rsrtl(*((e->next))), unchecked!(@_vcc_oset_in(e, rsrtl_reach(*((e->next)))))), >=(*((e->key)), sll_max_key(*((e->next))))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#e, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(rsrtl_reach(e), @_vcc_oset_union(rsrtl_reach(*((e->next))), @_vcc_oset_singleton(e)))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#e, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#e, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(sll(e), &&(sll(*((e->next))), unchecked!(@_vcc_oset_in(e, sll_reach(*((e->next)))))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#e, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(sll_reach(e), @_vcc_oset_union(sll_reach(*((e->next))), @_vcc_oset_singleton(e)))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#e, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#e, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(sll_max_key(e), @\int_max(*((e->key)), sll_max_key(*((e->next)))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#e, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(sll_min_key(e), @\int_min(*((e->key)), sll_min_key(*((e->next)))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#e, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(srtl(e), &&(&&(srtl(*((e->next))), unchecked!(@_vcc_oset_in(e, srtl_reach(*((e->next)))))), <=(*((e->key)), sll_min_key(*((e->next))))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#e, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(srtl_reach(e), @_vcc_oset_union(srtl_reach(*((e->next))), @_vcc_oset_singleton(e)))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#e, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#e, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg(h, i), &&(sll_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), i)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_reach(h, i), @_vcc_oset_union(sll_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_keys(h, i), @_vcc_intset_union(sll_lseg_keys(*((h->next)), i), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_len_next(h, i), unchecked+(sll_lseg_len_next(*((h->next)), i), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_max_key(h, i), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_min_key(h, i), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(srtl_lseg(h, i), &&(&&(srtl_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), i)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), i))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(srtl_lseg_reach(h, i), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // _math \state _dryad_S6; 
        // _dryad_S6 := @_vcc_current_state(@state); 
        SL#_dryad_S6 := $current_state($s);
        // _math \state stmtexpr7#18; 
        // stmtexpr7#18 := _dryad_S6; 
        stmtexpr7#18 := SL#_dryad_S6;
        // assert @prim_writes_check((e->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#e, ^s_node), s_node.next));
        // *(e->next) := i; 
        call $write_int(s_node.next, $phys_ptr_cast(L#e, ^s_node), $ptr_to_int($phys_ptr_cast(L#i, ^s_node)));
        assume $full_stop_ext(#tok$3^45.5, $s);
        // _math \state _dryad_S7; 
        // _dryad_S7 := @_vcc_current_state(@state); 
        SL#_dryad_S7 := $current_state($s);
        // _math \state stmtexpr8#19; 
        // stmtexpr8#19 := _dryad_S7; 
        stmtexpr8#19 := SL#_dryad_S7;
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(i)))), ==(old(_dryad_S6, sll_keys(i)), old(_dryad_S7, sll_keys(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(i)))), ==(old(_dryad_S6, sll_list_len_next(i)), old(_dryad_S7, sll_list_len_next(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, rsrtl_reach(i)))), ==(old(_dryad_S6, rsrtl(i)), old(_dryad_S7, rsrtl(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, rsrtl_reach(i)))), ==(old(_dryad_S6, rsrtl_reach(i)), old(_dryad_S7, rsrtl_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(i)))), ==(old(_dryad_S6, sll(i)), old(_dryad_S7, sll(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(i)))), ==(old(_dryad_S6, sll_reach(i)), old(_dryad_S7, sll_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(i)))), ==(old(_dryad_S6, sll_max_key(i)), old(_dryad_S7, sll_max_key(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(i)))), ==(old(_dryad_S6, sll_min_key(i)), old(_dryad_S7, sll_min_key(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, srtl_reach(i)))), ==(old(_dryad_S6, srtl(i)), old(_dryad_S7, srtl(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, srtl_reach(i)))), ==(old(_dryad_S6, srtl_reach(i)), old(_dryad_S7, srtl_reach(i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#i, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(j)))), ==(old(_dryad_S6, sll_keys(j)), old(_dryad_S7, sll_keys(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(j)))), ==(old(_dryad_S6, sll_list_len_next(j)), old(_dryad_S7, sll_list_len_next(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, rsrtl_reach(j)))), ==(old(_dryad_S6, rsrtl(j)), old(_dryad_S7, rsrtl(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, rsrtl_reach(j)))), ==(old(_dryad_S6, rsrtl_reach(j)), old(_dryad_S7, rsrtl_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(j)))), ==(old(_dryad_S6, sll(j)), old(_dryad_S7, sll(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(j)))), ==(old(_dryad_S6, sll_reach(j)), old(_dryad_S7, sll_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(j)))), ==(old(_dryad_S6, sll_max_key(j)), old(_dryad_S7, sll_max_key(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(j)))), ==(old(_dryad_S6, sll_min_key(j)), old(_dryad_S7, sll_min_key(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, srtl_reach(j)))), ==(old(_dryad_S6, srtl(j)), old(_dryad_S7, srtl(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, srtl_reach(j)))), ==(old(_dryad_S6, srtl_reach(j)), old(_dryad_S7, srtl_reach(j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#j, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(h)))), ==(old(_dryad_S6, sll_keys(h)), old(_dryad_S7, sll_keys(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(h)))), ==(old(_dryad_S6, sll_list_len_next(h)), old(_dryad_S7, sll_list_len_next(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, rsrtl_reach(h)))), ==(old(_dryad_S6, rsrtl(h)), old(_dryad_S7, rsrtl(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, rsrtl_reach(h)))), ==(old(_dryad_S6, rsrtl_reach(h)), old(_dryad_S7, rsrtl_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(h)))), ==(old(_dryad_S6, sll(h)), old(_dryad_S7, sll(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(h)))), ==(old(_dryad_S6, sll_reach(h)), old(_dryad_S7, sll_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(h)))), ==(old(_dryad_S6, sll_max_key(h)), old(_dryad_S7, sll_max_key(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_reach(h)))), ==(old(_dryad_S6, sll_min_key(h)), old(_dryad_S7, sll_min_key(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, srtl_reach(h)))), ==(old(_dryad_S6, srtl(h)), old(_dryad_S7, srtl(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, srtl_reach(h)))), ==(old(_dryad_S6, srtl_reach(h)), old(_dryad_S7, srtl_reach(h)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_lseg_reach(h, j)))), ==(old(_dryad_S6, sll_lseg(h, j)), old(_dryad_S7, sll_lseg(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_lseg_reach(h, j)))), ==(old(_dryad_S6, sll_lseg_reach(h, j)), old(_dryad_S7, sll_lseg_reach(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_lseg_reach(h, j)))), ==(old(_dryad_S6, sll_lseg_keys(h, j)), old(_dryad_S7, sll_lseg_keys(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_lseg_reach(h, j)))), ==(old(_dryad_S6, sll_lseg_len_next(h, j)), old(_dryad_S7, sll_lseg_len_next(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_lseg_reach(h, j)))), ==(old(_dryad_S6, sll_lseg_max_key(h, j)), old(_dryad_S7, sll_lseg_max_key(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_lseg_reach(h, j)))), ==(old(_dryad_S6, sll_lseg_min_key(h, j)), old(_dryad_S7, sll_lseg_min_key(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, srtl_lseg_reach(h, j)))), ==(old(_dryad_S6, srtl_lseg(h, j)), old(_dryad_S7, srtl_lseg(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, srtl_lseg_reach(h, j)))), ==(old(_dryad_S6, srtl_lseg_reach(h, j)), old(_dryad_S7, srtl_lseg_reach(h, j)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_lseg_reach(h, i)))), ==(old(_dryad_S6, sll_lseg(h, i)), old(_dryad_S7, sll_lseg(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_lseg_reach(h, i)))), ==(old(_dryad_S6, sll_lseg_reach(h, i)), old(_dryad_S7, sll_lseg_reach(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_lseg_reach(h, i)))), ==(old(_dryad_S6, sll_lseg_keys(h, i)), old(_dryad_S7, sll_lseg_keys(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_lseg_reach(h, i)))), ==(old(_dryad_S6, sll_lseg_len_next(h, i)), old(_dryad_S7, sll_lseg_len_next(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_lseg_reach(h, i)))), ==(old(_dryad_S6, sll_lseg_max_key(h, i)), old(_dryad_S7, sll_lseg_max_key(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, sll_lseg_reach(h, i)))), ==(old(_dryad_S6, sll_lseg_min_key(h, i)), old(_dryad_S7, sll_lseg_min_key(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, srtl_lseg_reach(h, i)))), ==(old(_dryad_S6, srtl_lseg(h, i)), old(_dryad_S7, srtl_lseg(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(e, old(_dryad_S6, srtl_lseg_reach(h, i)))), ==(old(_dryad_S6, srtl_lseg_reach(h, i)), old(_dryad_S7, srtl_lseg_reach(h, i)))); 
        assume !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(e, i)), ==(*((i->key)), old(_dryad_S6, *((i->key))))); 
        assume !($phys_ptr_cast(L#e, ^s_node) == $phys_ptr_cast(L#i, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#i, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(e, i)), @_vcc_ptr_eq_pure(*((i->next)), old(_dryad_S6, *((i->next))))); 
        assume !($phys_ptr_cast(L#e, ^s_node) == $phys_ptr_cast(L#i, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(e, j)), ==(*((j->key)), old(_dryad_S6, *((j->key))))); 
        assume !($phys_ptr_cast(L#e, ^s_node) == $phys_ptr_cast(L#j, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#j, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(e, j)), @_vcc_ptr_eq_pure(*((j->next)), old(_dryad_S6, *((j->next))))); 
        assume !($phys_ptr_cast(L#e, ^s_node) == $phys_ptr_cast(L#j, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(e, h)), ==(*((h->key)), old(_dryad_S6, *((h->key))))); 
        assume !($phys_ptr_cast(L#e, ^s_node) == $phys_ptr_cast(P#h, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(P#h, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(e, h)), @_vcc_ptr_eq_pure(*((h->next)), old(_dryad_S6, *((h->next))))); 
        assume !($phys_ptr_cast(L#e, ^s_node) == $phys_ptr_cast(P#h, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_keys(i), @_vcc_intset_union(sll_keys(*((i->next))), @_vcc_intset_singleton(*((i->key)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_list_len_next(i), unchecked+(sll_list_len_next(*((i->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(rsrtl(i), &&(&&(rsrtl(*((i->next))), unchecked!(@_vcc_oset_in(i, rsrtl_reach(*((i->next)))))), >=(*((i->key)), sll_max_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(rsrtl_reach(i), @_vcc_oset_union(rsrtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll(i), &&(sll(*((i->next))), unchecked!(@_vcc_oset_in(i, sll_reach(*((i->next)))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#i, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_reach(i), @_vcc_oset_union(sll_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_max_key(i), @\int_max(*((i->key)), sll_max_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_min_key(i), @\int_min(*((i->key)), sll_min_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(srtl(i), &&(&&(srtl(*((i->next))), unchecked!(@_vcc_oset_in(i, srtl_reach(*((i->next)))))), <=(*((i->key)), sll_min_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(srtl_reach(i), @_vcc_oset_union(srtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_keys(j), @_vcc_intset_union(sll_keys(*((j->next))), @_vcc_intset_singleton(*((j->key)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_list_len_next(j), unchecked+(sll_list_len_next(*((j->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(rsrtl(j), &&(&&(rsrtl(*((j->next))), unchecked!(@_vcc_oset_in(j, rsrtl_reach(*((j->next)))))), >=(*((j->key)), sll_max_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(rsrtl_reach(j), @_vcc_oset_union(rsrtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll(j), &&(sll(*((j->next))), unchecked!(@_vcc_oset_in(j, sll_reach(*((j->next)))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#j, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(sll_reach(j), @_vcc_oset_union(sll_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_max_key(j), @\int_max(*((j->key)), sll_max_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(sll_min_key(j), @\int_min(*((j->key)), sll_min_key(*((j->next)))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(j), @_vcc_ptr_neq_null(*((j->next)))), ==(srtl(j), &&(&&(srtl(*((j->next))), unchecked!(@_vcc_oset_in(j, srtl_reach(*((j->next)))))), <=(*((j->key)), sll_min_key(*((j->next))))))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#j, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#j, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#j, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(j), ==(srtl_reach(j), @_vcc_oset_union(srtl_reach(*((j->next))), @_vcc_oset_singleton(j)))); 
        assume $non_null($phys_ptr_cast(L#j, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#j, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_keys(h), @_vcc_intset_union(sll_keys(*((h->next))), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#h, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_list_len_next(h), unchecked+(sll_list_len_next(*((h->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#h, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(rsrtl(h), &&(&&(rsrtl(*((h->next))), unchecked!(@_vcc_oset_in(h, rsrtl_reach(*((h->next)))))), >=(*((h->key)), sll_max_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(rsrtl_reach(h), @_vcc_oset_union(rsrtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll(h), &&(sll(*((h->next))), unchecked!(@_vcc_oset_in(h, sll_reach(*((h->next)))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#h, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(sll_reach(h), @_vcc_oset_union(sll_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_max_key(h), @\int_max(*((h->key)), sll_max_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(sll_min_key(h), @\int_min(*((h->key)), sll_min_key(*((h->next)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#h, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_null(*((h->next)))), ==(srtl(h), &&(&&(srtl(*((h->next))), unchecked!(@_vcc_oset_in(h, srtl_reach(*((h->next)))))), <=(*((h->key)), sll_min_key(*((h->next))))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#h, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(h), ==(srtl_reach(h), @_vcc_oset_union(srtl_reach(*((h->next))), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#h, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(sll_keys(e), @_vcc_intset_union(sll_keys(*((e->next))), @_vcc_intset_singleton(*((e->key)))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#e, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(sll_list_len_next(e), unchecked+(sll_list_len_next(*((e->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#e, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(rsrtl(e), &&(&&(rsrtl(*((e->next))), unchecked!(@_vcc_oset_in(e, rsrtl_reach(*((e->next)))))), >=(*((e->key)), sll_max_key(*((e->next))))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#e, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#e, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(rsrtl_reach(e), @_vcc_oset_union(rsrtl_reach(*((e->next))), @_vcc_oset_singleton(e)))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#e, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#e, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(sll(e), &&(sll(*((e->next))), unchecked!(@_vcc_oset_in(e, sll_reach(*((e->next)))))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#e, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#e, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(sll_reach(e), @_vcc_oset_union(sll_reach(*((e->next))), @_vcc_oset_singleton(e)))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#e, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#e, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(sll_max_key(e), @\int_max(*((e->key)), sll_max_key(*((e->next)))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#e, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(sll_min_key(e), @\int_min(*((e->key)), sll_min_key(*((e->next)))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#e, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(e), @_vcc_ptr_neq_null(*((e->next)))), ==(srtl(e), &&(&&(srtl(*((e->next))), unchecked!(@_vcc_oset_in(e, srtl_reach(*((e->next)))))), <=(*((e->key)), sll_min_key(*((e->next))))))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#e, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#e, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#e, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(e), ==(srtl_reach(e), @_vcc_oset_union(srtl_reach(*((e->next))), @_vcc_oset_singleton(e)))); 
        assume $non_null($phys_ptr_cast(L#e, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#e, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#e, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#e, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_keys(i), @_vcc_intset_union(sll_keys(*((i->next))), @_vcc_intset_singleton(*((i->key)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_list_len_next(i), unchecked+(sll_list_len_next(*((i->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(rsrtl(i), &&(&&(rsrtl(*((i->next))), unchecked!(@_vcc_oset_in(i, rsrtl_reach(*((i->next)))))), >=(*((i->key)), sll_max_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(rsrtl_reach(i), @_vcc_oset_union(rsrtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll(i), &&(sll(*((i->next))), unchecked!(@_vcc_oset_in(i, sll_reach(*((i->next)))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#i, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(sll_reach(i), @_vcc_oset_union(sll_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_max_key(i), @\int_max(*((i->key)), sll_max_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(sll_min_key(i), @\int_min(*((i->key)), sll_min_key(*((i->next)))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(i), @_vcc_ptr_neq_null(*((i->next)))), ==(srtl(i), &&(&&(srtl(*((i->next))), unchecked!(@_vcc_oset_in(i, srtl_reach(*((i->next)))))), <=(*((i->key)), sll_min_key(*((i->next))))))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#i, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#i, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#i, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(i), ==(srtl_reach(i), @_vcc_oset_union(srtl_reach(*((i->next))), @_vcc_oset_singleton(i)))); 
        assume $non_null($phys_ptr_cast(L#i, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#i, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg(h, j), &&(sll_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), j)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_reach(h, j), @_vcc_oset_union(sll_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_keys(h, j), @_vcc_intset_union(sll_lseg_keys(*((h->next)), j), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(sll_lseg_len_next(h, j), unchecked+(sll_lseg_len_next(*((h->next)), j), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_max_key(h, j), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), j)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(sll_lseg_min_key(h, j), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), j)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), @_vcc_ptr_neq_pure(*((h->next)), j)), ==(srtl_lseg(h, j), &&(&&(srtl_lseg(*((h->next)), j), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), j)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), j))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, j)), ==(srtl_lseg_reach(h, j), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), j), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#j, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#j, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#j, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg(h, i), &&(sll_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, sll_lseg_reach(*((h->next)), i)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_reach(h, i), @_vcc_oset_union(sll_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_keys(h, i), @_vcc_intset_union(sll_lseg_keys(*((h->next)), i), @_vcc_intset_singleton(*((h->key)))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(sll_lseg_len_next(h, i), unchecked+(sll_lseg_len_next(*((h->next)), i), 1))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_max_key(h, i), @\int_max(*((h->key)), sll_lseg_max_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(sll_lseg_min_key(h, i), @\int_min(*((h->key)), sll_lseg_min_key(*((h->next)), i)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), @_vcc_ptr_neq_pure(*((h->next)), i)), ==(srtl_lseg(h, i), &&(&&(srtl_lseg(*((h->next)), i), unchecked!(@_vcc_oset_in(h, srtl_lseg_reach(*((h->next)), i)))), <=(*((h->key)), sll_lseg_min_key(*((h->next)), i))))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)) && !$oset_in($phys_ptr_cast(P#h, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#h, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(h), @_vcc_ptr_neq_pure(h, i)), ==(srtl_lseg_reach(h, i), @_vcc_oset_union(srtl_lseg_reach(*((h->next)), i), @_vcc_oset_singleton(h)))); 
        assume $non_null($phys_ptr_cast(P#h, ^s_node)) && $phys_ptr_cast(P#h, ^s_node) != $phys_ptr_cast(L#i, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#h, ^s_node), $phys_ptr_cast(L#i, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#h, ^s_node), ^s_node), $phys_ptr_cast(L#i, ^s_node)), $oset_singleton($phys_ptr_cast(P#h, ^s_node)));
        // return h; 
        $result := $phys_ptr_cast(P#h, ^s_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }

  anon11:
    // skip

  #exit:
}



axiom (forall Q#__vcc_state$2^687.9#tc2#1679: $state, Q#x$2^687.9#dt1#1622: $ptr :: {:weight 10} { F#srtl(Q#__vcc_state$2^687.9#tc2#1679, $phys_ptr_cast(Q#x$2^687.9#dt1#1622, ^s_node)) } { F#sll(Q#__vcc_state$2^687.9#tc2#1679, $phys_ptr_cast(Q#x$2^687.9#dt1#1622, ^s_node)) } $good_state(Q#__vcc_state$2^687.9#tc2#1679) && true ==> F#srtl(Q#__vcc_state$2^687.9#tc2#1679, $phys_ptr_cast(Q#x$2^687.9#dt1#1622, ^s_node)) ==> F#sll(Q#__vcc_state$2^687.9#tc2#1679, $phys_ptr_cast(Q#x$2^687.9#dt1#1622, ^s_node)));

axiom (forall Q#__vcc_state$2^688.9#tc2#1680: $state, Q#x$2^688.9#dt1#1623: $ptr :: {:weight 10} { F#rsrtl(Q#__vcc_state$2^688.9#tc2#1680, $phys_ptr_cast(Q#x$2^688.9#dt1#1623, ^s_node)) } { F#sll(Q#__vcc_state$2^688.9#tc2#1680, $phys_ptr_cast(Q#x$2^688.9#dt1#1623, ^s_node)) } $good_state(Q#__vcc_state$2^688.9#tc2#1680) && true ==> F#rsrtl(Q#__vcc_state$2^688.9#tc2#1680, $phys_ptr_cast(Q#x$2^688.9#dt1#1623, ^s_node)) ==> F#sll(Q#__vcc_state$2^688.9#tc2#1680, $phys_ptr_cast(Q#x$2^688.9#dt1#1623, ^s_node)));

axiom (forall Q#__vcc_state$2^689.9#tc2#1681: $state, Q#x$2^689.9#dt1#1624: $ptr :: {:weight 10} { F#sll_reach(Q#__vcc_state$2^689.9#tc2#1681, $phys_ptr_cast(Q#x$2^689.9#dt1#1624, ^s_node)) } { F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1681, $phys_ptr_cast(Q#x$2^689.9#dt1#1624, ^s_node)) } $good_state(Q#__vcc_state$2^689.9#tc2#1681) && true ==> F#sll_reach(Q#__vcc_state$2^689.9#tc2#1681, $phys_ptr_cast(Q#x$2^689.9#dt1#1624, ^s_node)) == F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1681, $phys_ptr_cast(Q#x$2^689.9#dt1#1624, ^s_node)));

axiom (forall Q#__vcc_state$2^690.9#tc2#1682: $state, Q#x$2^690.9#dt1#1625: $ptr :: {:weight 10} { F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1682, $phys_ptr_cast(Q#x$2^690.9#dt1#1625, ^s_node)) } { F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1682, $phys_ptr_cast(Q#x$2^690.9#dt1#1625, ^s_node)) } $good_state(Q#__vcc_state$2^690.9#tc2#1682) && true ==> F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1682, $phys_ptr_cast(Q#x$2^690.9#dt1#1625, ^s_node)) == F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1682, $phys_ptr_cast(Q#x$2^690.9#dt1#1625, ^s_node)));

axiom (forall Q#__vcc_state$2^691.9#tc2#1683: $state, Q#x$2^691.9#dt1#1626: $ptr, Q#y$2^691.9#dt1#1627: $ptr :: {:weight 10} { F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1683, $phys_ptr_cast(Q#x$2^691.9#dt1#1626, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1627, ^s_node)) } { F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1683, $phys_ptr_cast(Q#x$2^691.9#dt1#1626, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1627, ^s_node)) } $good_state(Q#__vcc_state$2^691.9#tc2#1683) && true ==> F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1683, $phys_ptr_cast(Q#x$2^691.9#dt1#1626, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1627, ^s_node)) == F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1683, $phys_ptr_cast(Q#x$2^691.9#dt1#1626, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1627, ^s_node)));

const unique l#public: $label;

axiom $type_code_is(2, ^$#state_t);

const unique #tok$3^45.5: $token;

const unique #tok$3^44.5: $token;

const unique #tok$3^43.5: $token;

const unique #tok$3^40.16: $token;

const unique #tok$3^36.5: $token;

const unique #tok$3^35.5: $token;

const unique #tok$3^33.17: $token;

const unique #tok$3^13.3: $token;

const unique #tok$3^9.29: $token;

const unique #tok$4^0.0: $token;

const unique #file^?3Cno?20file?3E: $token;

axiom $file_name_is(4, #file^?3Cno?20file?3E);

const unique #tok$3^3.3: $token;

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cafwp?5CSLL?2Dinsert.c: $token;

axiom $file_name_is(3, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cafwp?5CSLL?2Dinsert.c);

const unique #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cafwp?5Cdryad_SRTL.h: $token;

axiom $file_name_is(2, #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cafwp?5Cdryad_SRTL.h);

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h: $token;

axiom $file_name_is(1, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h);

const unique #distTp1: $ctype;

axiom #distTp1 == $ptr_to(^s_node);

