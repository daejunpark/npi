
const {:existential true} b0000 : bool;
const {:existential true} b0001 : bool;
const {:existential true} b0002 : bool;
const {:existential true} b0003 : bool;
const {:existential true} b0004 : bool;
const {:existential true} b0005 : bool;
const {:existential true} b0006 : bool;
const {:existential true} b0007 : bool;
const {:existential true} b0008 : bool;
const {:existential true} b0009 : bool;
const {:existential true} b0010 : bool;
const {:existential true} b0011 : bool;
const {:existential true} b0012 : bool;
const {:existential true} b0013 : bool;
const {:existential true} b0014 : bool;
const {:existential true} b0015 : bool;
const {:existential true} b0016 : bool;
const {:existential true} b0017 : bool;
const {:existential true} b0018 : bool;
const {:existential true} b0019 : bool;
const {:existential true} b0020 : bool;
const {:existential true} b0021 : bool;
const {:existential true} b0022 : bool;
const {:existential true} b0023 : bool;
const {:existential true} b0024 : bool;
const {:existential true} b0025 : bool;
const {:existential true} b0026 : bool;
const {:existential true} b0027 : bool;
const {:existential true} b0028 : bool;
const {:existential true} b0029 : bool;
const {:existential true} b0030 : bool;
const {:existential true} b0031 : bool;
const {:existential true} b0032 : bool;
const {:existential true} b0033 : bool;
const {:existential true} b0034 : bool;
const {:existential true} b0035 : bool;
const {:existential true} b0036 : bool;
const {:existential true} b0037 : bool;
const {:existential true} b0038 : bool;
const {:existential true} b0039 : bool;
const {:existential true} b0040 : bool;
const {:existential true} b0041 : bool;
const {:existential true} b0042 : bool;
const {:existential true} b0043 : bool;
const {:existential true} b0044 : bool;
const {:existential true} b0045 : bool;
const {:existential true} b0046 : bool;
const {:existential true} b0047 : bool;
const {:existential true} b0048 : bool;
const {:existential true} b0049 : bool;
const {:existential true} b0050 : bool;
const {:existential true} b0051 : bool;
const {:existential true} b0052 : bool;
const {:existential true} b0053 : bool;
const {:existential true} b0054 : bool;
const {:existential true} b0055 : bool;
const {:existential true} b0056 : bool;
const {:existential true} b0057 : bool;
const {:existential true} b0058 : bool;
const {:existential true} b0059 : bool;
const {:existential true} b0060 : bool;
const {:existential true} b0061 : bool;
const {:existential true} b0062 : bool;
const {:existential true} b0063 : bool;
const {:existential true} b0064 : bool;
const {:existential true} b0065 : bool;
const {:existential true} b0066 : bool;
const {:existential true} b0067 : bool;
const {:existential true} b0068 : bool;
const {:existential true} b0069 : bool;
const {:existential true} b0070 : bool;
const {:existential true} b0071 : bool;
const {:existential true} b0072 : bool;
const {:existential true} b0073 : bool;
const {:existential true} b0074 : bool;
const {:existential true} b0075 : bool;
const {:existential true} b0076 : bool;
const {:existential true} b0077 : bool;
const {:existential true} b0078 : bool;
const {:existential true} b0079 : bool;
const {:existential true} b0080 : bool;
const {:existential true} b0081 : bool;
const {:existential true} b0082 : bool;
const {:existential true} b0083 : bool;
const {:existential true} b0084 : bool;
const {:existential true} b0085 : bool;
const {:existential true} b0086 : bool;
const {:existential true} b0087 : bool;
const {:existential true} b0088 : bool;
const {:existential true} b0089 : bool;
const {:existential true} b0090 : bool;
const {:existential true} b0091 : bool;
const {:existential true} b0092 : bool;
const {:existential true} b0093 : bool;
const {:existential true} b0094 : bool;
const {:existential true} b0095 : bool;
const {:existential true} b0096 : bool;
const {:existential true} b0097 : bool;
const {:existential true} b0098 : bool;
const {:existential true} b0099 : bool;
const {:existential true} b0100 : bool;
const {:existential true} b0101 : bool;
const {:existential true} b0102 : bool;
const {:existential true} b0103 : bool;
const {:existential true} b0104 : bool;
const {:existential true} b0105 : bool;
const {:existential true} b0106 : bool;
const {:existential true} b0107 : bool;
const {:existential true} b0108 : bool;
const {:existential true} b0109 : bool;
const {:existential true} b0110 : bool;
const {:existential true} b0111 : bool;
const {:existential true} b0112 : bool;
const {:existential true} b0113 : bool;
const {:existential true} b0114 : bool;
const {:existential true} b0115 : bool;
const {:existential true} b0116 : bool;
const {:existential true} b0117 : bool;
const {:existential true} b0118 : bool;
const {:existential true} b0119 : bool;
const {:existential true} b0120 : bool;
const {:existential true} b0121 : bool;
const {:existential true} b0122 : bool;
const {:existential true} b0123 : bool;
const {:existential true} b0124 : bool;
const {:existential true} b0125 : bool;
const {:existential true} b0126 : bool;
const {:existential true} b0127 : bool;
const {:existential true} b0128 : bool;
const {:existential true} b0129 : bool;
const {:existential true} b0130 : bool;
const {:existential true} b0131 : bool;
const {:existential true} b0132 : bool;
const {:existential true} b0133 : bool;
const {:existential true} b0134 : bool;
const {:existential true} b0135 : bool;
const {:existential true} b0136 : bool;
const {:existential true} b0137 : bool;
const {:existential true} b0138 : bool;
const {:existential true} b0139 : bool;
const {:existential true} b0140 : bool;
const {:existential true} b0141 : bool;
const {:existential true} b0142 : bool;
const {:existential true} b0143 : bool;
const {:existential true} b0144 : bool;
const {:existential true} b0145 : bool;
const {:existential true} b0146 : bool;
const {:existential true} b0147 : bool;
const {:existential true} b0148 : bool;
const {:existential true} b0149 : bool;
const {:existential true} b0150 : bool;
const {:existential true} b0151 : bool;
const {:existential true} b0152 : bool;
const {:existential true} b0153 : bool;
const {:existential true} b0154 : bool;
const {:existential true} b0155 : bool;
const {:existential true} b0156 : bool;
const {:existential true} b0157 : bool;
const {:existential true} b0158 : bool;
const {:existential true} b0159 : bool;
const {:existential true} b0160 : bool;
const {:existential true} b0161 : bool;
const {:existential true} b0162 : bool;
const {:existential true} b0163 : bool;
const {:existential true} b0164 : bool;
const {:existential true} b0165 : bool;
const {:existential true} b0166 : bool;
const {:existential true} b0167 : bool;
const {:existential true} b0168 : bool;
const {:existential true} b0169 : bool;
const {:existential true} b0170 : bool;
const {:existential true} b0171 : bool;
const {:existential true} b0172 : bool;
const {:existential true} b0173 : bool;
const {:existential true} b0174 : bool;
const {:existential true} b0175 : bool;
const {:existential true} b0176 : bool;
const {:existential true} b0177 : bool;
const {:existential true} b0178 : bool;
const {:existential true} b0179 : bool;
const {:existential true} b0180 : bool;
const {:existential true} b0181 : bool;
const {:existential true} b0182 : bool;
const {:existential true} b0183 : bool;
const {:existential true} b0184 : bool;
const {:existential true} b0185 : bool;
const {:existential true} b0186 : bool;
const {:existential true} b0187 : bool;
const {:existential true} b0188 : bool;
const {:existential true} b0189 : bool;
const {:existential true} b0190 : bool;
const {:existential true} b0191 : bool;
const {:existential true} b0192 : bool;
const {:existential true} b0193 : bool;
const {:existential true} b0194 : bool;
const {:existential true} b0195 : bool;
const {:existential true} b0196 : bool;
const {:existential true} b0197 : bool;
const {:existential true} b0198 : bool;
const {:existential true} b0199 : bool;
const {:existential true} b0200 : bool;
const {:existential true} b0201 : bool;
const {:existential true} b0202 : bool;
const {:existential true} b0203 : bool;
const {:existential true} b0204 : bool;
const {:existential true} b0205 : bool;
const {:existential true} b0206 : bool;
const {:existential true} b0207 : bool;
const {:existential true} b0208 : bool;
const {:existential true} b0209 : bool;
const {:existential true} b0210 : bool;
const {:existential true} b0211 : bool;
const {:existential true} b0212 : bool;
const {:existential true} b0213 : bool;
const {:existential true} b0214 : bool;
const {:existential true} b0215 : bool;
const {:existential true} b0216 : bool;
const {:existential true} b0217 : bool;
const {:existential true} b0218 : bool;
const {:existential true} b0219 : bool;
const {:existential true} b0220 : bool;
const {:existential true} b0221 : bool;
const {:existential true} b0222 : bool;
const {:existential true} b0223 : bool;
const {:existential true} b0224 : bool;
const {:existential true} b0225 : bool;
const {:existential true} b0226 : bool;
const {:existential true} b0227 : bool;
const {:existential true} b0228 : bool;
const {:existential true} b0229 : bool;
const {:existential true} b0230 : bool;
const {:existential true} b0231 : bool;
const {:existential true} b0232 : bool;
const {:existential true} b0233 : bool;
const {:existential true} b0234 : bool;
const {:existential true} b0235 : bool;
const {:existential true} b0236 : bool;
const {:existential true} b0237 : bool;
const {:existential true} b0238 : bool;
const {:existential true} b0239 : bool;
const {:existential true} b0240 : bool;
const {:existential true} b0241 : bool;
const {:existential true} b0242 : bool;
const {:existential true} b0243 : bool;
const {:existential true} b0244 : bool;
const {:existential true} b0245 : bool;
const {:existential true} b0246 : bool;
const {:existential true} b0247 : bool;
const {:existential true} b0248 : bool;
const {:existential true} b0249 : bool;
const {:existential true} b0250 : bool;
const {:existential true} b0251 : bool;
const {:existential true} b0252 : bool;
const {:existential true} b0253 : bool;
const {:existential true} b0254 : bool;
const {:existential true} b0255 : bool;
const {:existential true} b0256 : bool;
const {:existential true} b0257 : bool;
const {:existential true} b0258 : bool;
const {:existential true} b0259 : bool;
const {:existential true} b0260 : bool;
const {:existential true} b0261 : bool;
const {:existential true} b0262 : bool;
const {:existential true} b0263 : bool;
const {:existential true} b0264 : bool;
const {:existential true} b0265 : bool;
const {:existential true} b0266 : bool;
const {:existential true} b0267 : bool;
const {:existential true} b0268 : bool;
const {:existential true} b0269 : bool;
const {:existential true} b0270 : bool;
const {:existential true} b0271 : bool;
const {:existential true} b0272 : bool;
const {:existential true} b0273 : bool;
const {:existential true} b0274 : bool;
const {:existential true} b0275 : bool;
const {:existential true} b0276 : bool;
const {:existential true} b0277 : bool;
const {:existential true} b0278 : bool;
const {:existential true} b0279 : bool;
const {:existential true} b0280 : bool;
const {:existential true} b0281 : bool;
const {:existential true} b0282 : bool;
const {:existential true} b0283 : bool;
const {:existential true} b0284 : bool;
const {:existential true} b0285 : bool;
const {:existential true} b0286 : bool;
const {:existential true} b0287 : bool;
const {:existential true} b0288 : bool;
const {:existential true} b0289 : bool;
const {:existential true} b0290 : bool;
const {:existential true} b0291 : bool;
const {:existential true} b0292 : bool;
const {:existential true} b0293 : bool;
const {:existential true} b0294 : bool;
const {:existential true} b0295 : bool;
const {:existential true} b0296 : bool;
const {:existential true} b0297 : bool;
const {:existential true} b0298 : bool;
const {:existential true} b0299 : bool;
const {:existential true} b0300 : bool;
const {:existential true} b0301 : bool;
const {:existential true} b0302 : bool;
const {:existential true} b0303 : bool;
const {:existential true} b0304 : bool;
const {:existential true} b0305 : bool;
const {:existential true} b0306 : bool;
const {:existential true} b0307 : bool;
const {:existential true} b0308 : bool;
const {:existential true} b0309 : bool;
const {:existential true} b0310 : bool;
const {:existential true} b0311 : bool;
const {:existential true} b0312 : bool;
const {:existential true} b0313 : bool;
const {:existential true} b0314 : bool;
const {:existential true} b0315 : bool;
const {:existential true} b0316 : bool;
const {:existential true} b0317 : bool;
const {:existential true} b0318 : bool;
const {:existential true} b0319 : bool;
const {:existential true} b0320 : bool;
const {:existential true} b0321 : bool;
const {:existential true} b0322 : bool;
const {:existential true} b0323 : bool;
const {:existential true} b0324 : bool;
const {:existential true} b0325 : bool;
const {:existential true} b0326 : bool;
const {:existential true} b0327 : bool;
const {:existential true} b0328 : bool;
const {:existential true} b0329 : bool;
const {:existential true} b0330 : bool;
const {:existential true} b0331 : bool;
const {:existential true} b0332 : bool;
const {:existential true} b0333 : bool;
const {:existential true} b0334 : bool;
const {:existential true} b0335 : bool;
const {:existential true} b0336 : bool;
const {:existential true} b0337 : bool;
const {:existential true} b0338 : bool;
const {:existential true} b0339 : bool;
const {:existential true} b0340 : bool;
const {:existential true} b0341 : bool;
const {:existential true} b0342 : bool;
const {:existential true} b0343 : bool;
const {:existential true} b0344 : bool;
const {:existential true} b0345 : bool;
const {:existential true} b0346 : bool;
const {:existential true} b0347 : bool;
const {:existential true} b0348 : bool;
const {:existential true} b0349 : bool;
const {:existential true} b0350 : bool;
const {:existential true} b0351 : bool;
const {:existential true} b0352 : bool;
const {:existential true} b0353 : bool;
const {:existential true} b0354 : bool;
const {:existential true} b0355 : bool;
const {:existential true} b0356 : bool;
const {:existential true} b0357 : bool;
const {:existential true} b0358 : bool;
const {:existential true} b0359 : bool;
const {:existential true} b0360 : bool;
const {:existential true} b0361 : bool;
const {:existential true} b0362 : bool;
const {:existential true} b0363 : bool;
const {:existential true} b0364 : bool;
const {:existential true} b0365 : bool;
const {:existential true} b0366 : bool;
const {:existential true} b0367 : bool;
const {:existential true} b0368 : bool;
const {:existential true} b0369 : bool;
const {:existential true} b0370 : bool;
const {:existential true} b0371 : bool;
const {:existential true} b0372 : bool;
const {:existential true} b0373 : bool;
const {:existential true} b0374 : bool;
const {:existential true} b0375 : bool;
const {:existential true} b0376 : bool;
const {:existential true} b0377 : bool;
const {:existential true} b0378 : bool;
const {:existential true} b0379 : bool;
const {:existential true} b0380 : bool;
const {:existential true} b0381 : bool;
const {:existential true} b0382 : bool;
const {:existential true} b0383 : bool;
const {:existential true} b0384 : bool;
const {:existential true} b0385 : bool;
const {:existential true} b0386 : bool;
const {:existential true} b0387 : bool;
const {:existential true} b0388 : bool;
const {:existential true} b0389 : bool;
const {:existential true} b0390 : bool;
const {:existential true} b0391 : bool;
const {:existential true} b0392 : bool;
const {:existential true} b0393 : bool;
const {:existential true} b0394 : bool;
const {:existential true} b0395 : bool;
const {:existential true} b0396 : bool;
const {:existential true} b0397 : bool;
const {:existential true} b0398 : bool;
const {:existential true} b0399 : bool;
const {:existential true} b0400 : bool;
const {:existential true} b0401 : bool;
const {:existential true} b0402 : bool;
const {:existential true} b0403 : bool;
const {:existential true} b0404 : bool;
const {:existential true} b0405 : bool;
const {:existential true} b0406 : bool;
const {:existential true} b0407 : bool;
const {:existential true} b0408 : bool;
const {:existential true} b0409 : bool;
const {:existential true} b0410 : bool;
const {:existential true} b0411 : bool;
const {:existential true} b0412 : bool;
const {:existential true} b0413 : bool;
const {:existential true} b0414 : bool;
const {:existential true} b0415 : bool;
const {:existential true} b0416 : bool;
const {:existential true} b0417 : bool;
const {:existential true} b0418 : bool;
const {:existential true} b0419 : bool;
const {:existential true} b0420 : bool;
const {:existential true} b0421 : bool;
const {:existential true} b0422 : bool;
const {:existential true} b0423 : bool;
const {:existential true} b0424 : bool;
const {:existential true} b0425 : bool;
const {:existential true} b0426 : bool;
const {:existential true} b0427 : bool;
const {:existential true} b0428 : bool;
const {:existential true} b0429 : bool;
const {:existential true} b0430 : bool;
const {:existential true} b0431 : bool;
const {:existential true} b0432 : bool;
const {:existential true} b0433 : bool;
const {:existential true} b0434 : bool;
const {:existential true} b0435 : bool;
const {:existential true} b0436 : bool;
const {:existential true} b0437 : bool;
const {:existential true} b0438 : bool;
const {:existential true} b0439 : bool;
const {:existential true} b0440 : bool;
const {:existential true} b0441 : bool;
const {:existential true} b0442 : bool;
const {:existential true} b0443 : bool;
const {:existential true} b0444 : bool;
const {:existential true} b0445 : bool;
const {:existential true} b0446 : bool;
const {:existential true} b0447 : bool;
const {:existential true} b0448 : bool;
const {:existential true} b0449 : bool;
const {:existential true} b0450 : bool;
const {:existential true} b0451 : bool;
const {:existential true} b0452 : bool;
const {:existential true} b0453 : bool;
const {:existential true} b0454 : bool;
const {:existential true} b0455 : bool;
const {:existential true} b0456 : bool;
const {:existential true} b0457 : bool;
const {:existential true} b0458 : bool;
const {:existential true} b0459 : bool;
const {:existential true} b0460 : bool;
const {:existential true} b0461 : bool;
const {:existential true} b0462 : bool;
const {:existential true} b0463 : bool;

axiom $arch_ptr_size == 8;

axiom $arch_spec_ptr_start == $max.u8;

const unique ^$##thread_id: $ctype;

axiom $def_math_type(^$##thread_id);

type $##thread_id;

const unique ^$##club: $ctype;

axiom $def_math_type(^$##club);

type $##club;

const unique ^s_node: $ctype;

axiom $is_span_sequential(^s_node);

axiom $def_struct_type(^s_node, 16, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^s_node) } $inv2(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^s_node) } $inv2_without_lemmas(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^s_node)) } $in(q, $composite_extent(s, p, ^s_node)) == (q == p));

const unique s_node.key: $field;

axiom $def_phys_field(^s_node, s_node.key, ^^i4, false, 0);

const unique s_node.next: $field;

axiom $def_phys_field(^s_node, s_node.next, $ptr_to(^s_node), false, 8);

function F#glob_reach() : $oset;

const unique cf#glob_reach: $pure_function;

axiom $function_arg_type(cf#glob_reach, 0, ^$#oset);

procedure glob_reach() returns ($result: $oset);
  free ensures $result == F#glob_reach();
  free ensures $call_transition(old($s), $s);



const unique ^$#_purecall_handler#1: $ctype;

axiom $def_fnptr_type(^$#_purecall_handler#1);

type $#_purecall_handler#1;

const unique ^$#_invalid_parameter_handler#2: $ctype;

axiom $def_fnptr_type(^$#_invalid_parameter_handler#2);

type $#_invalid_parameter_handler#2;

const unique ^$#g_slist_insert.c..36263#3: $ctype;

axiom $def_fnptr_type(^$#g_slist_insert.c..36263#3);

type $#g_slist_insert.c..36263#3;

const unique ^$#_PtFuncCompare#4: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#4);

type $#_PtFuncCompare#4;

const unique ^$#_PtFuncCompare#5: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#5);

type $#_PtFuncCompare#5;

const unique ^$#_PtFuncCompare#6: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#6);

type $#_PtFuncCompare#6;

const unique ^$#_PtFuncCompare#7: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#7);

type $#_PtFuncCompare#7;

const unique ^$#_onexit_t#8: $ctype;

axiom $def_fnptr_type(^$#_onexit_t#8);

type $#_onexit_t#8;

function F#sll(#s: $state, SP#hd: $ptr) : bool;

const unique cf#sll: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll(#s, SP#hd) } 1 < $decreases_level ==> $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll(#s, SP#hd));

axiom $function_arg_type(cf#sll, 0, ^^bool);

axiom $function_arg_type(cf#sll, 1, $ptr_to(^s_node));

procedure sll(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  free ensures $result == F#sll($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#sll_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#sll_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_reach, 1, $ptr_to(^s_node));

procedure sll_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#sll_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_keys(#s: $state, SP#hd: $ptr) : $intset;

const unique cf#sll_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_keys(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_keys(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_keys(#s, SP#hd) == $intset_empty()));

axiom $function_arg_type(cf#sll_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_keys, 1, $ptr_to(^s_node));

procedure sll_keys(SP#hd: $ptr) returns ($result: $intset);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $intset_empty();
  free ensures $result == F#sll_keys($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_list_len_next(#s: $state, SP#x: $ptr) : int;

const unique cf#sll_list_len_next: $pure_function;

axiom (forall #s: $state, SP#x: $ptr :: { F#sll_list_len_next(#s, SP#x) } 1 < $decreases_level ==> $in_range_nat(F#sll_list_len_next(#s, SP#x)) && ($non_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) > 0) && ($is_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) == 0));

axiom $function_arg_type(cf#sll_list_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_list_len_next, 1, $ptr_to(^s_node));

procedure sll_list_len_next(SP#x: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $non_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result > 0;
  ensures $is_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result == 0;
  free ensures $result == F#sll_list_len_next($s, SP#x);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#sll_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg(#s, SP#hd, SP#tl) == F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg(#s, SP#hd, SP#tl)) && (F#sll_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && F#sll(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1)));

axiom $function_arg_type(cf#sll_lseg, 0, ^^bool);

axiom $function_arg_type(cf#sll_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg, 2, $ptr_to(^s_node));

procedure sll_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#sll($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1);
  free ensures $result == F#sll_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#sll_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_reach, 2, $ptr_to(^s_node));

procedure sll_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#sll_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_keys(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $intset;

const unique cf#sll_lseg_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_keys(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == $intset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_lseg_keys(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_lseg_keys, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_keys, 2, $ptr_to(^s_node));

procedure sll_lseg_keys(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $intset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $intset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  free ensures $result == F#sll_lseg_keys($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_len_next(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_len_next: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_len_next(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_nat(F#sll_lseg_len_next(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == 0) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) > 0));

axiom $function_arg_type(cf#sll_lseg_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_lseg_len_next, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_len_next, 2, $ptr_to(^s_node));

procedure sll_lseg_len_next(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == 0;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $result > 0;
  free ensures $result == F#sll_lseg_len_next($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



procedure g_slist_prepend(P#list: $ptr, P#data: int) returns ($result: $ptr);
  requires F#sll($s, $phys_ptr_cast(P#list, ^s_node));
  modifies $s, $cev_pc;
  ensures F#sll($s, $phys_ptr_cast($result, ^s_node));
  ensures F#sll_keys($s, $phys_ptr_cast($result, ^s_node)) == $intset_union(F#sll_keys(old($s), $phys_ptr_cast(P#list, ^s_node)), $intset_singleton(P#data));
  ensures !$oset_in($phys_ptr_cast($result, ^s_node), F#sll_reach(old($s), $phys_ptr_cast(P#list, ^s_node)));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



procedure g_slist_append(P#list: $ptr, P#data: int) returns ($result: $ptr);
  requires F#sll($s, $phys_ptr_cast(P#list, ^s_node));
  modifies $s, $cev_pc;
  ensures F#sll($s, $phys_ptr_cast($result, ^s_node));
  ensures F#sll_keys($s, $phys_ptr_cast($result, ^s_node)) == $intset_union(F#sll_keys(old($s), $phys_ptr_cast(P#list, ^s_node)), $intset_singleton(P#data));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



procedure g_slist_insert(P#list: $ptr, P#data: int, P#pos: int) returns ($result: $ptr);
  requires F#sll($s, $phys_ptr_cast(P#list, ^s_node));
  modifies $s, $cev_pc;
  ensures F#sll($s, $phys_ptr_cast($result, ^s_node));
  ensures F#sll_keys($s, $phys_ptr_cast($result, ^s_node)) == $intset_union(F#sll_keys(old($s), $phys_ptr_cast(P#list, ^s_node)), $intset_singleton(P#data));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



implementation g_slist_insert(P#list: $ptr, P#data: int, P#pos: int) returns ($result: $ptr)
{
  var stmtexpr11#19: $state;
  var SL#_dryad_S7: $state;
  var stmtexpr10#18: $state;
  var SL#_dryad_S6: $state;
  var stmtexpr9#17: $state;
  var _dryad_S5#1: $state;
  var stmtexpr8#16: $state;
  var _dryad_S4#0: $state;
  var stmtexpr7#15: $ptr;
  var SL#prev_list1: $ptr;
  var stmtexpr0#7: $ptr;
  var SL#tmp_list1: $ptr;
  var ite#1: bool;
  var loopState#0: $state;
  var stmtexpr1#6: $state;
  var SL#_dryad_S5: $state;
  var stmtexpr0#5: $state;
  var SL#_dryad_S4: $state;
  var stmtexpr6#14: $state;
  var SL#_dryad_S3: $state;
  var stmtexpr5#13: $state;
  var SL#_dryad_S2: $state;
  var stmtexpr4#12: $state;
  var SL#_dryad_S1: $state;
  var stmtexpr3#11: $oset;
  var stmtexpr2#10: $state;
  var SL#_dryad_S0: $state;
  var res_g_slist_prepend#4: $ptr;
  var res_g_slist_append#3: $ptr;
  var L#prev_list: $ptr;
  var L#tmp_list: $ptr;
  var L#new_list: $ptr;
  var L#tmp_prev: $ptr;
  var stmtexpr1#9: $oset;
  var stmtexpr0#8: $oset;
  var SL#_dryad_G1: $oset;
  var SL#_dryad_G0: $oset;
  var local.pos: int where $in_range_i4(local.pos);
  var #wrTime$3^16.3: int;
  var #stackframe: int;

// INV:PTR: P#list, L#prev_list, L#tmp_list, L#new_list
// INV:INT: P#data, P#pos, local.pos
// INV:LST: sll

  anon10:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$3^16.3, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$3^16.3 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$3^16.3, (lambda #p: $ptr :: false));
    // assume true
    // assume @in_range_i4(data); 
    assume $in_range_i4(P#data);
    // assume @in_range_i4(pos); 
    assume $in_range_i4(P#pos);
    // assume @decreases_level_is(2147483647); 
    assume 2147483647 == $decreases_level;
    // int32_t local.pos; 
    // local.pos := pos; 
    local.pos := P#pos;
    // assume true
    //  --- Dryad annotated function --- 
    // _math \oset _dryad_G0; 
    // _math \oset _dryad_G1; 
    // _dryad_G0 := sll_reach(list); 
    call SL#_dryad_G0 := sll_reach($phys_ptr_cast(P#list, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset stmtexpr0#8; 
    // stmtexpr0#8 := _dryad_G0; 
    stmtexpr0#8 := SL#_dryad_G0;
    // _dryad_G1 := _dryad_G0; 
    SL#_dryad_G1 := SL#_dryad_G0;
    // _math \oset stmtexpr1#9; 
    // stmtexpr1#9 := _dryad_G1; 
    stmtexpr1#9 := SL#_dryad_G1;
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // struct s_node* tmp_prev; 
    // struct s_node* new_list; 
    // struct s_node* tmp_list; 
    // struct s_node* prev_list; 
    assume true;
    // if (<(local.pos, 0)) ...
    if (local.pos < 0)
    {
      anon1:
        // struct s_node* res_g_slist_append#3; 
        // res_g_slist_append#3 := g_slist_append(list, data); 
        call res_g_slist_append#3 := g_slist_append($phys_ptr_cast(P#list, ^s_node), P#data);
        assume $full_stop_ext(#tok$3^23.12, $s);
        // return res_g_slist_append#3; 
        $result := $phys_ptr_cast(res_g_slist_append#3, ^s_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon2:
        // assert @_vcc_possibly_unreachable; 
        assert {:PossiblyUnreachable true} true;
    }

  anon11:
    assume true;
    // if (==(local.pos, 0)) ...
    if (local.pos == 0)
    {
      anon3:
        // struct s_node* res_g_slist_prepend#4; 
        // res_g_slist_prepend#4 := g_slist_prepend(list, data); 
        call res_g_slist_prepend#4 := g_slist_prepend($phys_ptr_cast(P#list, ^s_node), P#data);
        assume $full_stop_ext(#tok$3^26.12, $s);
        // return res_g_slist_prepend#4; 
        $result := $phys_ptr_cast(res_g_slist_prepend#4, ^s_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon4:
        // assert @_vcc_possibly_unreachable; 
        assert {:PossiblyUnreachable true} true;
    }

  anon12:
    // assume ==>(@_vcc_ptr_neq_null(list), &&(@_vcc_mutable(@state, list), @writes_check(list))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> $mutable($s, $phys_ptr_cast(P#list, ^s_node)) && $top_writable($s, #wrTime$3^16.3, $phys_ptr_cast(P#list, ^s_node));
    // var struct s_node* prev_list
    // var struct s_node* tmp_list
    // var struct s_node* new_list
    // _math \state _dryad_S0; 
    // _dryad_S0 := @_vcc_current_state(@state); 
    SL#_dryad_S0 := $current_state($s);
    // _math \state stmtexpr2#10; 
    // stmtexpr2#10 := _dryad_S0; 
    stmtexpr2#10 := SL#_dryad_S0;
    // new_list := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
    call L#new_list := $alloc(^s_node);
    assume $full_stop_ext(#tok$3^33.14, $s);
    // assume !(@_vcc_oset_in(new_list, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
    // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(new_list)); 
    SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
    // _math \oset stmtexpr3#11; 
    // stmtexpr3#11 := _dryad_G1; 
    stmtexpr3#11 := SL#_dryad_G1;
    // assume ==(glob_reach(), _dryad_G1); 
    assume F#glob_reach() == SL#_dryad_G1;
    // _math \state _dryad_S1; 
    // _dryad_S1 := @_vcc_current_state(@state); 
    SL#_dryad_S1 := $current_state($s);
    // _math \state stmtexpr4#12; 
    // stmtexpr4#12 := _dryad_S1; 
    stmtexpr4#12 := SL#_dryad_S1;
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_keys(tmp_prev), @_vcc_intset_union(sll_keys(*((tmp_prev->next))), @_vcc_intset_singleton(*((tmp_prev->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_list_len_next(tmp_prev), unchecked+(sll_list_len_next(*((tmp_prev->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll(tmp_prev), &&(sll(*((tmp_prev->next))), unchecked!(@_vcc_oset_in(tmp_prev, sll_reach(*((tmp_prev->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_prev, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_reach(tmp_prev), @_vcc_oset_union(sll_reach(*((tmp_prev->next))), @_vcc_oset_singleton(tmp_prev)))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_prev, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(prev_list)))), ==(old(_dryad_S0, sll_keys(prev_list)), old(_dryad_S1, sll_keys(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(prev_list)))), ==(old(_dryad_S0, sll_list_len_next(prev_list)), old(_dryad_S1, sll_list_len_next(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(prev_list)))), ==(old(_dryad_S0, sll(prev_list)), old(_dryad_S1, sll(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(prev_list)))), ==(old(_dryad_S0, sll_reach(prev_list)), old(_dryad_S1, sll_reach(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(tmp_list)))), ==(old(_dryad_S0, sll_keys(tmp_list)), old(_dryad_S1, sll_keys(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(tmp_list)))), ==(old(_dryad_S0, sll_list_len_next(tmp_list)), old(_dryad_S1, sll_list_len_next(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(tmp_list)))), ==(old(_dryad_S0, sll(tmp_list)), old(_dryad_S1, sll(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(tmp_list)))), ==(old(_dryad_S0, sll_reach(tmp_list)), old(_dryad_S1, sll_reach(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(tmp_prev)))), ==(old(_dryad_S0, sll_keys(tmp_prev)), old(_dryad_S1, sll_keys(tmp_prev)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(tmp_prev)))), ==(old(_dryad_S0, sll_list_len_next(tmp_prev)), old(_dryad_S1, sll_list_len_next(tmp_prev)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(tmp_prev)))), ==(old(_dryad_S0, sll(tmp_prev)), old(_dryad_S1, sll(tmp_prev)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(tmp_prev)))), ==(old(_dryad_S0, sll_reach(tmp_prev)), old(_dryad_S1, sll_reach(tmp_prev)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(list)))), ==(old(_dryad_S0, sll_keys(list)), old(_dryad_S1, sll_keys(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(list)))), ==(old(_dryad_S0, sll_list_len_next(list)), old(_dryad_S1, sll_list_len_next(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(list)))), ==(old(_dryad_S0, sll(list)), old(_dryad_S1, sll(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(list)))), ==(old(_dryad_S0, sll_reach(list)), old(_dryad_S1, sll_reach(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(P#list, ^s_node));
    // assume @_vcc_ptr_neq_null(new_list); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node));
    // _math \state _dryad_S2; 
    // _dryad_S2 := @_vcc_current_state(@state); 
    SL#_dryad_S2 := $current_state($s);
    // _math \state stmtexpr5#13; 
    // stmtexpr5#13 := _dryad_S2; 
    stmtexpr5#13 := SL#_dryad_S2;
    // assert @prim_writes_check((new_list->key)); 
    assert $writable_prim($s, #wrTime$3^16.3, $dot($phys_ptr_cast(L#new_list, ^s_node), s_node.key));
    // *(new_list->key) := data; 
    call $write_int(s_node.key, $phys_ptr_cast(L#new_list, ^s_node), P#data);
    assume $full_stop_ext(#tok$3^35.3, $s);
    // _math \state _dryad_S3; 
    // _dryad_S3 := @_vcc_current_state(@state); 
    SL#_dryad_S3 := $current_state($s);
    // _math \state stmtexpr6#14; 
    // stmtexpr6#14 := _dryad_S3; 
    stmtexpr6#14 := SL#_dryad_S3;
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(*((new_list->next)))))), ==(old(_dryad_S2, sll_keys(*((new_list->next)))), old(_dryad_S3, sll_keys(*((new_list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#sll_keys(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(*((new_list->next)))))), ==(old(_dryad_S2, sll_list_len_next(*((new_list->next)))), old(_dryad_S3, sll_list_len_next(*((new_list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(*((new_list->next)))))), ==(old(_dryad_S2, sll(*((new_list->next)))), old(_dryad_S3, sll(*((new_list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#sll(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#sll(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(*((new_list->next)))))), ==(old(_dryad_S2, sll_reach(*((new_list->next)))), old(_dryad_S3, sll_reach(*((new_list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#sll_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(prev_list)), old(_dryad_S3, sll_list_len_next(prev_list))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==(old(_dryad_S2, sll(prev_list)), old(_dryad_S3, sll(prev_list))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(prev_list)), old(_dryad_S3, sll_reach(prev_list))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(tmp_list)), old(_dryad_S3, sll_list_len_next(tmp_list))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==(old(_dryad_S2, sll(tmp_list)), old(_dryad_S3, sll(tmp_list))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(tmp_list)), old(_dryad_S3, sll_reach(tmp_list))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(new_list)), old(_dryad_S3, sll_list_len_next(new_list))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#new_list, ^s_node));
    // assume ==(old(_dryad_S2, sll(new_list)), old(_dryad_S3, sll(new_list))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#new_list, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(new_list)), old(_dryad_S3, sll_reach(new_list))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#new_list, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(tmp_prev)), old(_dryad_S3, sll_list_len_next(tmp_prev))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==(old(_dryad_S2, sll(tmp_prev)), old(_dryad_S3, sll(tmp_prev))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(tmp_prev)), old(_dryad_S3, sll_reach(tmp_prev))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(list)), old(_dryad_S3, sll_list_len_next(list))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==(old(_dryad_S2, sll(list)), old(_dryad_S3, sll(list))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(list)), old(_dryad_S3, sll_reach(list))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(prev_list)))), ==(old(_dryad_S2, sll_keys(prev_list)), old(_dryad_S3, sll_keys(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(prev_list)))), ==(old(_dryad_S2, sll_list_len_next(prev_list)), old(_dryad_S3, sll_list_len_next(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(prev_list)))), ==(old(_dryad_S2, sll(prev_list)), old(_dryad_S3, sll(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(prev_list)))), ==(old(_dryad_S2, sll_reach(prev_list)), old(_dryad_S3, sll_reach(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(tmp_list)))), ==(old(_dryad_S2, sll_keys(tmp_list)), old(_dryad_S3, sll_keys(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(tmp_list)))), ==(old(_dryad_S2, sll_list_len_next(tmp_list)), old(_dryad_S3, sll_list_len_next(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(tmp_list)))), ==(old(_dryad_S2, sll(tmp_list)), old(_dryad_S3, sll(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(tmp_list)))), ==(old(_dryad_S2, sll_reach(tmp_list)), old(_dryad_S3, sll_reach(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(tmp_prev)))), ==(old(_dryad_S2, sll_keys(tmp_prev)), old(_dryad_S3, sll_keys(tmp_prev)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(tmp_prev)))), ==(old(_dryad_S2, sll_list_len_next(tmp_prev)), old(_dryad_S3, sll_list_len_next(tmp_prev)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(tmp_prev)))), ==(old(_dryad_S2, sll(tmp_prev)), old(_dryad_S3, sll(tmp_prev)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(tmp_prev)))), ==(old(_dryad_S2, sll_reach(tmp_prev)), old(_dryad_S3, sll_reach(tmp_prev)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(list)))), ==(old(_dryad_S2, sll_keys(list)), old(_dryad_S3, sll_keys(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(list)))), ==(old(_dryad_S2, sll_list_len_next(list)), old(_dryad_S3, sll_list_len_next(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(list)))), ==(old(_dryad_S2, sll(list)), old(_dryad_S3, sll(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(list)))), ==(old(_dryad_S2, sll_reach(list)), old(_dryad_S3, sll_reach(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), ==(*((prev_list->key)), old(_dryad_S2, *((prev_list->key))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), @_vcc_ptr_eq_pure(*((prev_list->next)), old(_dryad_S2, *((prev_list->next))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), ==(*((tmp_list->key)), old(_dryad_S2, *((tmp_list->key))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), @_vcc_ptr_eq_pure(*((tmp_list->next)), old(_dryad_S2, *((tmp_list->next))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_prev)), ==(*((tmp_prev->key)), old(_dryad_S2, *((tmp_prev->key))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_prev, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_prev)), @_vcc_ptr_eq_pure(*((tmp_prev->next)), old(_dryad_S2, *((tmp_prev->next))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_prev, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), ==(*((list->key)), old(_dryad_S2, *((list->key))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S2, *((list->next))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_keys(tmp_prev), @_vcc_intset_union(sll_keys(*((tmp_prev->next))), @_vcc_intset_singleton(*((tmp_prev->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_list_len_next(tmp_prev), unchecked+(sll_list_len_next(*((tmp_prev->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll(tmp_prev), &&(sll(*((tmp_prev->next))), unchecked!(@_vcc_oset_in(tmp_prev, sll_reach(*((tmp_prev->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_prev, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_reach(tmp_prev), @_vcc_oset_union(sll_reach(*((tmp_prev->next))), @_vcc_oset_singleton(tmp_prev)))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_prev, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
    assume true;
    // if (@_vcc_ptr_eq_null(list)) ...
    if ($is_null($phys_ptr_cast(P#list, ^s_node)))
    {
      anon5:
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_keys(tmp_prev), @_vcc_intset_union(sll_keys(*((tmp_prev->next))), @_vcc_intset_singleton(*((tmp_prev->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_list_len_next(tmp_prev), unchecked+(sll_list_len_next(*((tmp_prev->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll(tmp_prev), &&(sll(*((tmp_prev->next))), unchecked!(@_vcc_oset_in(tmp_prev, sll_reach(*((tmp_prev->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_prev, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_reach(tmp_prev), @_vcc_oset_union(sll_reach(*((tmp_prev->next))), @_vcc_oset_singleton(tmp_prev)))); 
        assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_prev, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // _math \state _dryad_S4; 
        // _dryad_S4 := @_vcc_current_state(@state); 
        SL#_dryad_S4 := $current_state($s);
        // _math \state stmtexpr0#5; 
        // stmtexpr0#5 := _dryad_S4; 
        stmtexpr0#5 := SL#_dryad_S4;
        // assert @prim_writes_check((new_list->next)); 
        assert $writable_prim($s, #wrTime$3^16.3, $dot($phys_ptr_cast(L#new_list, ^s_node), s_node.next));
        // *(new_list->next) := (struct s_node*)@null; 
        call $write_int(s_node.next, $phys_ptr_cast(L#new_list, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
        assume $full_stop_ext(#tok$3^38.5, $s);
        // _math \state _dryad_S5; 
        // _dryad_S5 := @_vcc_current_state(@state); 
        SL#_dryad_S5 := $current_state($s);
        // _math \state stmtexpr1#6; 
        // stmtexpr1#6 := _dryad_S5; 
        stmtexpr1#6 := SL#_dryad_S5;
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(prev_list)))), ==(old(_dryad_S4, sll_keys(prev_list)), old(_dryad_S5, sll_keys(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(prev_list)))), ==(old(_dryad_S4, sll_list_len_next(prev_list)), old(_dryad_S5, sll_list_len_next(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(prev_list)))), ==(old(_dryad_S4, sll(prev_list)), old(_dryad_S5, sll(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(prev_list)))), ==(old(_dryad_S4, sll_reach(prev_list)), old(_dryad_S5, sll_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(tmp_list)))), ==(old(_dryad_S4, sll_keys(tmp_list)), old(_dryad_S5, sll_keys(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(tmp_list)))), ==(old(_dryad_S4, sll_list_len_next(tmp_list)), old(_dryad_S5, sll_list_len_next(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(tmp_list)))), ==(old(_dryad_S4, sll(tmp_list)), old(_dryad_S5, sll(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(tmp_list)))), ==(old(_dryad_S4, sll_reach(tmp_list)), old(_dryad_S5, sll_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(tmp_prev)))), ==(old(_dryad_S4, sll_keys(tmp_prev)), old(_dryad_S5, sll_keys(tmp_prev)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#tmp_prev, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(tmp_prev)))), ==(old(_dryad_S4, sll_list_len_next(tmp_prev)), old(_dryad_S5, sll_list_len_next(tmp_prev)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#tmp_prev, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(tmp_prev)))), ==(old(_dryad_S4, sll(tmp_prev)), old(_dryad_S5, sll(tmp_prev)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#tmp_prev, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(tmp_prev)))), ==(old(_dryad_S4, sll_reach(tmp_prev)), old(_dryad_S5, sll_reach(tmp_prev)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#tmp_prev, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(list)))), ==(old(_dryad_S4, sll_keys(list)), old(_dryad_S5, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(list)))), ==(old(_dryad_S4, sll_list_len_next(list)), old(_dryad_S5, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(list)))), ==(old(_dryad_S4, sll(list)), old(_dryad_S5, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(list)))), ==(old(_dryad_S4, sll_reach(list)), old(_dryad_S5, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), ==(*((prev_list->key)), old(_dryad_S4, *((prev_list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), @_vcc_ptr_eq_pure(*((prev_list->next)), old(_dryad_S4, *((prev_list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), ==(*((tmp_list->key)), old(_dryad_S4, *((tmp_list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), @_vcc_ptr_eq_pure(*((tmp_list->next)), old(_dryad_S4, *((tmp_list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_prev)), ==(*((tmp_prev->key)), old(_dryad_S4, *((tmp_prev->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_prev, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_prev)), @_vcc_ptr_eq_pure(*((tmp_prev->next)), old(_dryad_S4, *((tmp_prev->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_prev, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), ==(*((list->key)), old(_dryad_S4, *((list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S4, *((list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_keys(tmp_prev), @_vcc_intset_union(sll_keys(*((tmp_prev->next))), @_vcc_intset_singleton(*((tmp_prev->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_list_len_next(tmp_prev), unchecked+(sll_list_len_next(*((tmp_prev->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll(tmp_prev), &&(sll(*((tmp_prev->next))), unchecked!(@_vcc_oset_in(tmp_prev, sll_reach(*((tmp_prev->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_prev, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_reach(tmp_prev), @_vcc_oset_union(sll_reach(*((tmp_prev->next))), @_vcc_oset_singleton(tmp_prev)))); 
        assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_prev, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // return new_list; 
        $result := $phys_ptr_cast(L#new_list, ^s_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon6:
        // assert @_vcc_possibly_unreachable; 
        assert {:PossiblyUnreachable true} true;
    }

  anon13:
    // tmp_list := list; 
    L#tmp_list := $phys_ptr_cast(P#list, ^s_node);
    // assert sll_lseg(prev_list, prev_list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume sll_lseg(prev_list, prev_list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assert sll_lseg(tmp_list, tmp_list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume sll_lseg(tmp_list, tmp_list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assert sll_lseg(new_list, new_list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
    // assume sll_lseg(new_list, new_list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
    // assert sll_lseg(tmp_prev, tmp_prev); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#tmp_prev, ^s_node), $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume sll_lseg(tmp_prev, tmp_prev); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#tmp_prev, ^s_node), $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assert sll_lseg(list, list); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
    // assume sll_lseg(list, list); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
    // prev_list := tmp_list; 
    L#prev_list := $phys_ptr_cast(L#tmp_list, ^s_node);
    // assert sll_lseg(prev_list, prev_list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume sll_lseg(prev_list, prev_list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assert sll_lseg(tmp_list, tmp_list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume sll_lseg(tmp_list, tmp_list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assert sll_lseg(new_list, new_list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
    // assume sll_lseg(new_list, new_list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
    // assert sll_lseg(tmp_prev, tmp_prev); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#tmp_prev, ^s_node), $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume sll_lseg(tmp_prev, tmp_prev); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#tmp_prev, ^s_node), $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assert sll_lseg(list, list); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
    // assume sll_lseg(list, list); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
    loopState#0 := $s;
    assume true;
// INV:LOOPHEAD
    while (true)
invariant b0000 ==> (F#sll($s,$phys_ptr_cast(P#list,^s_node)));
invariant b0001 ==> (F#sll($s,$phys_ptr_cast(L#prev_list,^s_node)));
invariant b0002 ==> (F#sll($s,$phys_ptr_cast(L#tmp_list,^s_node)));
invariant b0003 ==> (F#sll($s,$phys_ptr_cast(L#new_list,^s_node)));
invariant b0004 ==> (F#sll_lseg($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)));
invariant b0005 ==> (F#sll_lseg($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)));
invariant b0006 ==> (F#sll_lseg($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node)));
invariant b0007 ==> (F#sll_lseg($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node)));
invariant b0008 ==> (F#sll_lseg($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)));
invariant b0009 ==> (F#sll_lseg($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node)));
invariant b0010 ==> (F#sll_lseg($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node)));
invariant b0011 ==> (F#sll_lseg($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)));
invariant b0012 ==> (F#sll_lseg($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node)));
invariant b0013 ==> (F#sll_lseg($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node)));
invariant b0014 ==> (F#sll_lseg($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)));
invariant b0015 ==> (F#sll_lseg($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)));
invariant b0016 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(P#list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0017 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(P#list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0018 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(P#list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0019 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0020 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0021 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0022 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0023 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0024 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0025 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0026 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0027 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0028 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0029 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0030 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0031 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0032 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0033 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0034 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0035 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0036 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0037 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0038 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0039 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0040 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0041 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0042 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0043 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0044 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0045 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0046 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0047 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0048 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0049 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0050 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0051 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0052 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0053 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0054 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0055 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0056 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0057 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0058 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0059 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0060 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0061 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0062 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0063 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0064 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0065 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0066 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0067 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#prev_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0068 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#prev_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0069 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#prev_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0070 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#tmp_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0071 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#tmp_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0072 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#tmp_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0073 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#new_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0074 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#new_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0075 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#new_list,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0076 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0077 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0078 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0079 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0080 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0081 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0082 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#prev_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0083 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#prev_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0084 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#prev_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0085 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#prev_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0086 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#prev_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0087 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#prev_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0088 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#tmp_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0089 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#tmp_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0090 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#tmp_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0091 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#tmp_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0092 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#tmp_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0093 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#tmp_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0094 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#new_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0095 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#new_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0096 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#new_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0097 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#new_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0098 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#new_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0099 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#new_list,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0100 ==> ($non_null($phys_ptr_cast(P#list,^s_node)));
invariant b0101 ==> ($non_null($phys_ptr_cast(L#prev_list,^s_node)));
invariant b0102 ==> ($non_null($phys_ptr_cast(L#tmp_list,^s_node)));
invariant b0103 ==> ($non_null($phys_ptr_cast(L#new_list,^s_node)));
invariant b0104 ==> ($is_null($phys_ptr_cast(P#list,^s_node)));
invariant b0105 ==> ($is_null($phys_ptr_cast(L#prev_list,^s_node)));
invariant b0106 ==> ($is_null($phys_ptr_cast(L#tmp_list,^s_node)));
invariant b0107 ==> ($is_null($phys_ptr_cast(L#new_list,^s_node)));
invariant b0108 ==> (($phys_ptr_cast(P#list,^s_node) == $phys_ptr_cast(L#prev_list,^s_node)));
invariant b0109 ==> (($phys_ptr_cast(P#list,^s_node) == $phys_ptr_cast(L#tmp_list,^s_node)));
invariant b0110 ==> (($phys_ptr_cast(P#list,^s_node) == $phys_ptr_cast(L#new_list,^s_node)));
invariant b0111 ==> (($phys_ptr_cast(L#prev_list,^s_node) == $phys_ptr_cast(P#list,^s_node)));
invariant b0112 ==> (($phys_ptr_cast(L#prev_list,^s_node) == $phys_ptr_cast(L#tmp_list,^s_node)));
invariant b0113 ==> (($phys_ptr_cast(L#prev_list,^s_node) == $phys_ptr_cast(L#new_list,^s_node)));
invariant b0114 ==> (($phys_ptr_cast(L#tmp_list,^s_node) == $phys_ptr_cast(P#list,^s_node)));
invariant b0115 ==> (($phys_ptr_cast(L#tmp_list,^s_node) == $phys_ptr_cast(L#prev_list,^s_node)));
invariant b0116 ==> (($phys_ptr_cast(L#tmp_list,^s_node) == $phys_ptr_cast(L#new_list,^s_node)));
invariant b0117 ==> (($phys_ptr_cast(L#new_list,^s_node) == $phys_ptr_cast(P#list,^s_node)));
invariant b0118 ==> (($phys_ptr_cast(L#new_list,^s_node) == $phys_ptr_cast(L#prev_list,^s_node)));
invariant b0119 ==> (($phys_ptr_cast(L#new_list,^s_node) == $phys_ptr_cast(L#tmp_list,^s_node)));
invariant b0120 ==> (($non_null($phys_ptr_cast(P#list,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#list,^s_node),^s_node))));
invariant b0121 ==> (($non_null($phys_ptr_cast(L#prev_list,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#prev_list,^s_node),^s_node))));
invariant b0122 ==> (($non_null($phys_ptr_cast(L#tmp_list,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#tmp_list,^s_node),^s_node))));
invariant b0123 ==> (($non_null($phys_ptr_cast(L#new_list,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#new_list,^s_node),^s_node))));
invariant b0124 ==> (($non_null($phys_ptr_cast(P#list,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#list,^s_node),^s_node))));
invariant b0125 ==> (($non_null($phys_ptr_cast(L#prev_list,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#prev_list,^s_node),^s_node))));
invariant b0126 ==> (($non_null($phys_ptr_cast(L#tmp_list,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#tmp_list,^s_node),^s_node))));
invariant b0127 ==> (($non_null($phys_ptr_cast(L#new_list,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#new_list,^s_node),^s_node))));
invariant b0128 ==> (($non_null($phys_ptr_cast(P#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#list,^s_node),^s_node) == $phys_ptr_cast(L#prev_list,^s_node))));
invariant b0129 ==> (($non_null($phys_ptr_cast(P#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#list,^s_node),^s_node) == $phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0130 ==> (($non_null($phys_ptr_cast(P#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#list,^s_node),^s_node) == $phys_ptr_cast(L#new_list,^s_node))));
invariant b0131 ==> (($non_null($phys_ptr_cast(L#prev_list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#prev_list,^s_node),^s_node) == $phys_ptr_cast(P#list,^s_node))));
invariant b0132 ==> (($non_null($phys_ptr_cast(L#prev_list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#prev_list,^s_node),^s_node) == $phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0133 ==> (($non_null($phys_ptr_cast(L#prev_list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#prev_list,^s_node),^s_node) == $phys_ptr_cast(L#new_list,^s_node))));
invariant b0134 ==> (($non_null($phys_ptr_cast(L#tmp_list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#tmp_list,^s_node),^s_node) == $phys_ptr_cast(P#list,^s_node))));
invariant b0135 ==> (($non_null($phys_ptr_cast(L#tmp_list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#tmp_list,^s_node),^s_node) == $phys_ptr_cast(L#prev_list,^s_node))));
invariant b0136 ==> (($non_null($phys_ptr_cast(L#tmp_list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#tmp_list,^s_node),^s_node) == $phys_ptr_cast(L#new_list,^s_node))));
invariant b0137 ==> (($non_null($phys_ptr_cast(L#new_list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#new_list,^s_node),^s_node) == $phys_ptr_cast(P#list,^s_node))));
invariant b0138 ==> (($non_null($phys_ptr_cast(L#new_list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#new_list,^s_node),^s_node) == $phys_ptr_cast(L#prev_list,^s_node))));
invariant b0139 ==> (($non_null($phys_ptr_cast(L#new_list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#new_list,^s_node),^s_node) == $phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0140 ==> ((!($intset_in(P#data,F#sll_keys($s,$phys_ptr_cast(P#list,^s_node))))));
invariant b0141 ==> ((!($intset_in(P#pos,F#sll_keys($s,$phys_ptr_cast(P#list,^s_node))))));
invariant b0142 ==> ((!($intset_in(local.pos,F#sll_keys($s,$phys_ptr_cast(P#list,^s_node))))));
invariant b0143 ==> ((!($intset_in(P#data,F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node))))));
invariant b0144 ==> ((!($intset_in(P#pos,F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node))))));
invariant b0145 ==> ((!($intset_in(local.pos,F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node))))));
invariant b0146 ==> ((!($intset_in(P#data,F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node))))));
invariant b0147 ==> ((!($intset_in(P#pos,F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node))))));
invariant b0148 ==> ((!($intset_in(local.pos,F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node))))));
invariant b0149 ==> ((!($intset_in(P#data,F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node))))));
invariant b0150 ==> ((!($intset_in(P#pos,F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node))))));
invariant b0151 ==> ((!($intset_in(local.pos,F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node))))));
invariant b0152 ==> ((!($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))))));
invariant b0153 ==> ((!($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))))));
invariant b0154 ==> ((!($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))))));
invariant b0155 ==> ((!($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))))));
invariant b0156 ==> ((!($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))))));
invariant b0157 ==> ((!($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))))));
invariant b0158 ==> ((!($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node))))));
invariant b0159 ==> ((!($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node))))));
invariant b0160 ==> ((!($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node))))));
invariant b0161 ==> ((!($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node))))));
invariant b0162 ==> ((!($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node))))));
invariant b0163 ==> ((!($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node))))));
invariant b0164 ==> ((!($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))))));
invariant b0165 ==> ((!($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))))));
invariant b0166 ==> ((!($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))))));
invariant b0167 ==> ((!($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))))));
invariant b0168 ==> ((!($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))))));
invariant b0169 ==> ((!($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))))));
invariant b0170 ==> ((!($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node))))));
invariant b0171 ==> ((!($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node))))));
invariant b0172 ==> ((!($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node))))));
invariant b0173 ==> ((!($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))))));
invariant b0174 ==> ((!($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))))));
invariant b0175 ==> ((!($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))))));
invariant b0176 ==> ((!($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))))));
invariant b0177 ==> ((!($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))))));
invariant b0178 ==> ((!($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))))));
invariant b0179 ==> ((!($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node))))));
invariant b0180 ==> ((!($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node))))));
invariant b0181 ==> ((!($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node))))));
invariant b0182 ==> ((!($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))))));
invariant b0183 ==> ((!($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))))));
invariant b0184 ==> ((!($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))))));
invariant b0185 ==> ((!($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))))));
invariant b0186 ==> ((!($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))))));
invariant b0187 ==> ((!($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))))));
invariant b0188 ==> ($intset_in(P#data,F#sll_keys($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0189 ==> ($intset_in(P#pos,F#sll_keys($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0190 ==> ($intset_in(local.pos,F#sll_keys($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0191 ==> ($intset_in(P#data,F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0192 ==> ($intset_in(P#pos,F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0193 ==> ($intset_in(local.pos,F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0194 ==> ($intset_in(P#data,F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0195 ==> ($intset_in(P#pos,F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0196 ==> ($intset_in(local.pos,F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0197 ==> ($intset_in(P#data,F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0198 ==> ($intset_in(P#pos,F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0199 ==> ($intset_in(local.pos,F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0200 ==> ($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0201 ==> ($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0202 ==> ($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0203 ==> ($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0204 ==> ($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0205 ==> ($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0206 ==> ($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0207 ==> ($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0208 ==> ($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0209 ==> ($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0210 ==> ($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0211 ==> ($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0212 ==> ($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0213 ==> ($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0214 ==> ($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0215 ==> ($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0216 ==> ($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0217 ==> ($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0218 ==> ($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0219 ==> ($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0220 ==> ($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0221 ==> ($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0222 ==> ($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0223 ==> ($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0224 ==> ($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0225 ==> ($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0226 ==> ($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0227 ==> ($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0228 ==> ($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0229 ==> ($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0230 ==> ($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0231 ==> ($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0232 ==> ($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0233 ==> ($intset_in(P#data,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0234 ==> ($intset_in(P#pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0235 ==> ($intset_in(local.pos,F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0236 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0237 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0238 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0239 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0240 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0241 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0242 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0243 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0244 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node))));
invariant b0245 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#list,^s_node))));
invariant b0246 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0247 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0248 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0249 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0250 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0251 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0252 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0253 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0254 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0255 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0256 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0257 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0258 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0259 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0260 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0261 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0262 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0263 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0264 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0265 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0266 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0267 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0268 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0269 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0270 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0271 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0272 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0273 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0274 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0275 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0276 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0277 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0278 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0279 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0280 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0281 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0282 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0283 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0284 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0285 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0286 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#new_list,^s_node))));
invariant b0287 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0288 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0289 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#new_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0290 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0291 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(P#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0292 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node))));
invariant b0293 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#prev_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#tmp_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0294 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#list,^s_node),$phys_ptr_cast(L#prev_list,^s_node))));
invariant b0295 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#new_list,^s_node),$phys_ptr_cast(L#tmp_list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#prev_list,^s_node),$phys_ptr_cast(P#list,^s_node))));
invariant b0296 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0297 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0298 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0299 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0300 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0301 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0302 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0303 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0304 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0305 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0306 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0307 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0308 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0309 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0310 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0311 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0312 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0313 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0314 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0315 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0316 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0317 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0318 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0319 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0320 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0321 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0322 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0323 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0324 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0325 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0326 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0327 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0328 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0329 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0330 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0331 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0332 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0333 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0334 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0335 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0336 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0337 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0338 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0339 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0340 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0341 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0342 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0343 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0344 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0345 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0346 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0347 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0348 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0349 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0350 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0351 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0352 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0353 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0354 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0355 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0356 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0357 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0358 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0359 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0360 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0361 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0362 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0363 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0364 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0365 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0366 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0367 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0368 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0369 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0370 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0371 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0372 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0373 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0374 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0375 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0376 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0377 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0378 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0379 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#prev_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0380 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0381 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0382 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0383 ==> ((F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0384 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0385 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#tmp_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0386 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0387 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)))));
invariant b0388 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0389 ==> ((F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0390 ==> ((F#sll_keys($s,$phys_ptr_cast(P#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0391 ==> ((F#sll_keys($s,$phys_ptr_cast(L#prev_list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#new_list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0392 ==> ((P#data < 2147483647));
invariant b0393 ==> ((P#pos < 2147483647));
invariant b0394 ==> ((local.pos < 2147483647));
invariant b0395 ==> ((P#data < 2147483647));
invariant b0396 ==> ((P#pos < 2147483647));
invariant b0397 ==> ((local.pos < 2147483647));
invariant b0398 ==> ((P#data < 2147483647));
invariant b0399 ==> ((P#pos < 2147483647));
invariant b0400 ==> ((local.pos < 2147483647));
invariant b0401 ==> ((P#data < 2147483647));
invariant b0402 ==> ((P#pos < 2147483647));
invariant b0403 ==> ((local.pos < 2147483647));
invariant b0404 ==> ((P#data < 4294967295));
invariant b0405 ==> ((P#pos < 4294967295));
invariant b0406 ==> ((local.pos < 4294967295));
invariant b0407 ==> ((P#data < 4294967295));
invariant b0408 ==> ((P#pos < 4294967295));
invariant b0409 ==> ((local.pos < 4294967295));
invariant b0410 ==> ((P#data < 4294967295));
invariant b0411 ==> ((P#pos < 4294967295));
invariant b0412 ==> ((local.pos < 4294967295));
invariant b0413 ==> ((P#data < 4294967295));
invariant b0414 ==> ((P#pos < 4294967295));
invariant b0415 ==> ((local.pos < 4294967295));
invariant b0416 ==> ((P#data >= 0));
invariant b0417 ==> ((P#pos >= 0));
invariant b0418 ==> ((local.pos >= 0));
invariant b0419 ==> ((P#data >= 0));
invariant b0420 ==> ((P#pos >= 0));
invariant b0421 ==> ((local.pos >= 0));
invariant b0422 ==> ((P#data >= 0));
invariant b0423 ==> ((P#pos >= 0));
invariant b0424 ==> ((local.pos >= 0));
invariant b0425 ==> ((P#data >= 0));
invariant b0426 ==> ((P#pos >= 0));
invariant b0427 ==> ((local.pos >= 0));
invariant b0428 ==> (($non_null($phys_ptr_cast(P#list,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#list,^s_node)) < P#data)));
invariant b0429 ==> (($non_null($phys_ptr_cast(P#list,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#list,^s_node)) < P#pos)));
invariant b0430 ==> (($non_null($phys_ptr_cast(P#list,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#list,^s_node)) < local.pos)));
invariant b0431 ==> (($non_null($phys_ptr_cast(L#prev_list,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#prev_list,^s_node)) < P#data)));
invariant b0432 ==> (($non_null($phys_ptr_cast(L#prev_list,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#prev_list,^s_node)) < P#pos)));
invariant b0433 ==> (($non_null($phys_ptr_cast(L#prev_list,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#prev_list,^s_node)) < local.pos)));
invariant b0434 ==> (($non_null($phys_ptr_cast(L#tmp_list,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#tmp_list,^s_node)) < P#data)));
invariant b0435 ==> (($non_null($phys_ptr_cast(L#tmp_list,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#tmp_list,^s_node)) < P#pos)));
invariant b0436 ==> (($non_null($phys_ptr_cast(L#tmp_list,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#tmp_list,^s_node)) < local.pos)));
invariant b0437 ==> (($non_null($phys_ptr_cast(L#new_list,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#new_list,^s_node)) < P#data)));
invariant b0438 ==> (($non_null($phys_ptr_cast(L#new_list,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#new_list,^s_node)) < P#pos)));
invariant b0439 ==> (($non_null($phys_ptr_cast(L#new_list,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#new_list,^s_node)) < local.pos)));
invariant b0440 ==> ((($non_null($phys_ptr_cast(P#list,^s_node)) && $non_null($phys_ptr_cast(L#prev_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0441 ==> ((($non_null($phys_ptr_cast(P#list,^s_node)) && $non_null($phys_ptr_cast(L#tmp_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0442 ==> ((($non_null($phys_ptr_cast(P#list,^s_node)) && $non_null($phys_ptr_cast(L#new_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0443 ==> ((($non_null($phys_ptr_cast(L#prev_list,^s_node)) && $non_null($phys_ptr_cast(P#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#prev_list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#list,^s_node)))));
invariant b0444 ==> ((($non_null($phys_ptr_cast(L#prev_list,^s_node)) && $non_null($phys_ptr_cast(L#tmp_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#prev_list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0445 ==> ((($non_null($phys_ptr_cast(L#prev_list,^s_node)) && $non_null($phys_ptr_cast(L#new_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#prev_list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0446 ==> ((($non_null($phys_ptr_cast(L#tmp_list,^s_node)) && $non_null($phys_ptr_cast(P#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#tmp_list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#list,^s_node)))));
invariant b0447 ==> ((($non_null($phys_ptr_cast(L#tmp_list,^s_node)) && $non_null($phys_ptr_cast(L#prev_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#tmp_list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0448 ==> ((($non_null($phys_ptr_cast(L#tmp_list,^s_node)) && $non_null($phys_ptr_cast(L#new_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#tmp_list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0449 ==> ((($non_null($phys_ptr_cast(L#new_list,^s_node)) && $non_null($phys_ptr_cast(P#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#new_list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#list,^s_node)))));
invariant b0450 ==> ((($non_null($phys_ptr_cast(L#new_list,^s_node)) && $non_null($phys_ptr_cast(L#prev_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#new_list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0451 ==> ((($non_null($phys_ptr_cast(L#new_list,^s_node)) && $non_null($phys_ptr_cast(L#tmp_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#new_list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0452 ==> ((($non_null($phys_ptr_cast(P#list,^s_node)) && $non_null($phys_ptr_cast(L#prev_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0453 ==> ((($non_null($phys_ptr_cast(P#list,^s_node)) && $non_null($phys_ptr_cast(L#tmp_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0454 ==> ((($non_null($phys_ptr_cast(P#list,^s_node)) && $non_null($phys_ptr_cast(L#new_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0455 ==> ((($non_null($phys_ptr_cast(L#prev_list,^s_node)) && $non_null($phys_ptr_cast(P#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#prev_list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#list,^s_node)))));
invariant b0456 ==> ((($non_null($phys_ptr_cast(L#prev_list,^s_node)) && $non_null($phys_ptr_cast(L#tmp_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#prev_list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#tmp_list,^s_node)))));
invariant b0457 ==> ((($non_null($phys_ptr_cast(L#prev_list,^s_node)) && $non_null($phys_ptr_cast(L#new_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#prev_list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0458 ==> ((($non_null($phys_ptr_cast(L#tmp_list,^s_node)) && $non_null($phys_ptr_cast(P#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#tmp_list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#list,^s_node)))));
invariant b0459 ==> ((($non_null($phys_ptr_cast(L#tmp_list,^s_node)) && $non_null($phys_ptr_cast(L#prev_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#tmp_list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0460 ==> ((($non_null($phys_ptr_cast(L#tmp_list,^s_node)) && $non_null($phys_ptr_cast(L#new_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#tmp_list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#new_list,^s_node)))));
invariant b0461 ==> ((($non_null($phys_ptr_cast(L#new_list,^s_node)) && $non_null($phys_ptr_cast(P#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#new_list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#list,^s_node)))));
invariant b0462 ==> ((($non_null($phys_ptr_cast(L#new_list,^s_node)) && $non_null($phys_ptr_cast(L#prev_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#new_list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#prev_list,^s_node)))));
invariant b0463 ==> ((($non_null($phys_ptr_cast(L#new_list,^s_node)) && $non_null($phys_ptr_cast(L#tmp_list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#new_list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#tmp_list,^s_node)))));

      invariant $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#prev_list, ^s_node));
      invariant $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> $top_writable($s, #wrTime$3^16.3, $phys_ptr_cast(L#prev_list, ^s_node));
      invariant $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#tmp_list, ^s_node));
      invariant $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> $top_writable($s, #wrTime$3^16.3, $phys_ptr_cast(L#tmp_list, ^s_node));
    {
      anon9:
        assume $writes_nothing(old($s), $s);
        assume $timestamp_post(loopState#0, $s);
        assume $full_stop_ext(#tok$3^45.3, $s);
        // assume @_vcc_meta_eq(old(@prestate, @state), @state); 
        assume $meta_eq(loopState#0, $s);
        // _Bool ite#1; 
        // ite#1 := &&(>(local.pos, 0), @_vcc_ptr_neq_null(tmp_list)); 
        ite#1 := local.pos > 0 && $non_null($phys_ptr_cast(L#tmp_list, ^s_node));
        assume true;
        // if (ite#1) ...
        if (ite#1)
        {
          anon7:
            // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
            assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
            // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
            assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
            assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
            // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
            assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_keys(tmp_prev), @_vcc_intset_union(sll_keys(*((tmp_prev->next))), @_vcc_intset_singleton(*((tmp_prev->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_list_len_next(tmp_prev), unchecked+(sll_list_len_next(*((tmp_prev->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), 1);
            // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll(tmp_prev), &&(sll(*((tmp_prev->next))), unchecked!(@_vcc_oset_in(tmp_prev, sll_reach(*((tmp_prev->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_prev, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_reach(tmp_prev), @_vcc_oset_union(sll_reach(*((tmp_prev->next))), @_vcc_oset_singleton(tmp_prev)))); 
            assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_prev, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg(list, prev_list), &&(sll_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), prev_list)))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_reach(list, prev_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_keys(list, prev_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), prev_list), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_len_next(list, prev_list), unchecked+(sll_lseg_len_next(*((list->next)), prev_list), 1))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg(list, tmp_list), &&(sll_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), tmp_list)))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_reach(list, tmp_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_keys(list, tmp_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), tmp_list), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_len_next(list, tmp_list), unchecked+(sll_lseg_len_next(*((list->next)), tmp_list), 1))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), &&(==(@_vcc_mutable(@state, tmp_list), @_vcc_mutable(@state, *((tmp_list->next)))), ==(@writes_check(tmp_list), @writes_check(*((tmp_list->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $mutable($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && $top_writable($s, #wrTime$3^16.3, $phys_ptr_cast(L#tmp_list, ^s_node)) == $top_writable($s, #wrTime$3^16.3, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node));
            // assert @in_range_i4(-(local.pos, 1)); 
            assert $in_range_i4(local.pos - 1);
            // local.pos := -(local.pos, 1); 
            local.pos := local.pos - 1;
            // prev_list := tmp_list; 
            L#prev_list := $phys_ptr_cast(L#tmp_list, ^s_node);
            // assert sll_lseg(prev_list, prev_list); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
            // assume sll_lseg(prev_list, prev_list); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
            // assert sll_lseg(tmp_list, tmp_list); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
            // assume sll_lseg(tmp_list, tmp_list); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
            // assert sll_lseg(new_list, new_list); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
            // assume sll_lseg(new_list, new_list); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
            // assert sll_lseg(tmp_prev, tmp_prev); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#tmp_prev, ^s_node), $phys_ptr_cast(L#tmp_prev, ^s_node));
            // assume sll_lseg(tmp_prev, tmp_prev); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#tmp_prev, ^s_node), $phys_ptr_cast(L#tmp_prev, ^s_node));
            // assert sll_lseg(list, list); 
            assert F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
            // assume sll_lseg(list, list); 
            assume F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
            // struct s_node* tmp_list1; 
            // tmp_list1 := tmp_list; 
            SL#tmp_list1 := $phys_ptr_cast(L#tmp_list, ^s_node);
            // struct s_node* stmtexpr0#7; 
            // stmtexpr0#7 := tmp_list1; 
            stmtexpr0#7 := $phys_ptr_cast(SL#tmp_list1, ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_pure(tmp_list, *((tmp_list->next)))), ==(sll_lseg(tmp_list, *((tmp_list->next))), &&(sll_lseg(*((tmp_list->next)), *((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_lseg_reach(*((tmp_list->next)), *((tmp_list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $phys_ptr_cast(L#tmp_list, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_pure(tmp_list, *((tmp_list->next)))), ==(sll_lseg_reach(tmp_list, *((tmp_list->next))), @_vcc_oset_union(sll_lseg_reach(*((tmp_list->next)), *((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $phys_ptr_cast(L#tmp_list, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_pure(tmp_list, *((tmp_list->next)))), ==(sll_lseg_keys(tmp_list, *((tmp_list->next))), @_vcc_intset_union(sll_lseg_keys(*((tmp_list->next)), *((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $phys_ptr_cast(L#tmp_list, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_pure(tmp_list, *((tmp_list->next)))), ==(sll_lseg_len_next(tmp_list, *((tmp_list->next))), unchecked+(sll_lseg_len_next(*((tmp_list->next)), *((tmp_list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $phys_ptr_cast(L#tmp_list, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
            // assert @reads_check_normal((tmp_list->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#tmp_list, ^s_node));
            // tmp_list := *((tmp_list->next)); 
            L#tmp_list := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg(list, tmp_list), &&(sll_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), tmp_list)))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_reach(list, tmp_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_keys(list, tmp_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), tmp_list), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_len_next(list, tmp_list), unchecked+(sll_lseg_len_next(*((list->next)), tmp_list), 1))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), 1);
        }
        else
        {
          anon8:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // goto #break_2; 
            goto #break_2;
        }

      #continue_2:
        assume true;
// INV:LOOPTAIL
    }

  anon14:
    assume $full_stop_ext(#tok$3^45.3, $s);

  #break_2:
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_keys(tmp_prev), @_vcc_intset_union(sll_keys(*((tmp_prev->next))), @_vcc_intset_singleton(*((tmp_prev->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_list_len_next(tmp_prev), unchecked+(sll_list_len_next(*((tmp_prev->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll(tmp_prev), &&(sll(*((tmp_prev->next))), unchecked!(@_vcc_oset_in(tmp_prev, sll_reach(*((tmp_prev->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_prev, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_reach(tmp_prev), @_vcc_oset_union(sll_reach(*((tmp_prev->next))), @_vcc_oset_singleton(tmp_prev)))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_prev, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // struct s_node* prev_list1; 
    // prev_list1 := prev_list; 
    SL#prev_list1 := $phys_ptr_cast(L#prev_list, ^s_node);
    // struct s_node* stmtexpr7#15; 
    // stmtexpr7#15 := prev_list1; 
    stmtexpr7#15 := $phys_ptr_cast(SL#prev_list1, ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // assert @reads_check_normal((prev_list->next)); 
    assert $thread_local($s, $phys_ptr_cast(L#prev_list, ^s_node));
    // tmp_prev := *((prev_list->next)); 
    L#tmp_prev := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_keys(tmp_prev), @_vcc_intset_union(sll_keys(*((tmp_prev->next))), @_vcc_intset_singleton(*((tmp_prev->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_list_len_next(tmp_prev), unchecked+(sll_list_len_next(*((tmp_prev->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll(tmp_prev), &&(sll(*((tmp_prev->next))), unchecked!(@_vcc_oset_in(tmp_prev, sll_reach(*((tmp_prev->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_prev, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_reach(tmp_prev), @_vcc_oset_union(sll_reach(*((tmp_prev->next))), @_vcc_oset_singleton(tmp_prev)))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_prev, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // _math \state _dryad_S4#0; 
    // _dryad_S4#0 := @_vcc_current_state(@state); 
    _dryad_S4#0 := $current_state($s);
    // _math \state stmtexpr8#16; 
    // stmtexpr8#16 := _dryad_S4#0; 
    stmtexpr8#16 := _dryad_S4#0;
    // assert @prim_writes_check((new_list->next)); 
    assert $writable_prim($s, #wrTime$3^16.3, $dot($phys_ptr_cast(L#new_list, ^s_node), s_node.next));
    // *(new_list->next) := tmp_prev; 
    call $write_int(s_node.next, $phys_ptr_cast(L#new_list, ^s_node), $ptr_to_int($phys_ptr_cast(L#tmp_prev, ^s_node)));
    assume $full_stop_ext(#tok$3^65.3, $s);
    // _math \state _dryad_S5#1; 
    // _dryad_S5#1 := @_vcc_current_state(@state); 
    _dryad_S5#1 := $current_state($s);
    // _math \state stmtexpr9#17; 
    // stmtexpr9#17 := _dryad_S5#1; 
    stmtexpr9#17 := _dryad_S5#1;
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(prev_list1)))), ==(old(_dryad_S4#0, sll_keys(prev_list1)), old(_dryad_S5#1, sll_keys(prev_list1)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(SL#prev_list1, ^s_node))) ==> F#sll_keys(_dryad_S4#0, $phys_ptr_cast(SL#prev_list1, ^s_node)) == F#sll_keys(_dryad_S5#1, $phys_ptr_cast(SL#prev_list1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(prev_list1)))), ==(old(_dryad_S4#0, sll_list_len_next(prev_list1)), old(_dryad_S5#1, sll_list_len_next(prev_list1)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(SL#prev_list1, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#0, $phys_ptr_cast(SL#prev_list1, ^s_node)) == F#sll_list_len_next(_dryad_S5#1, $phys_ptr_cast(SL#prev_list1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(prev_list1)))), ==(old(_dryad_S4#0, sll(prev_list1)), old(_dryad_S5#1, sll(prev_list1)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(SL#prev_list1, ^s_node))) ==> F#sll(_dryad_S4#0, $phys_ptr_cast(SL#prev_list1, ^s_node)) == F#sll(_dryad_S5#1, $phys_ptr_cast(SL#prev_list1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(prev_list1)))), ==(old(_dryad_S4#0, sll_reach(prev_list1)), old(_dryad_S5#1, sll_reach(prev_list1)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(SL#prev_list1, ^s_node))) ==> F#sll_reach(_dryad_S4#0, $phys_ptr_cast(SL#prev_list1, ^s_node)) == F#sll_reach(_dryad_S5#1, $phys_ptr_cast(SL#prev_list1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(prev_list)))), ==(old(_dryad_S4#0, sll_keys(prev_list)), old(_dryad_S5#1, sll_keys(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_keys(_dryad_S4#0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_keys(_dryad_S5#1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(prev_list)))), ==(old(_dryad_S4#0, sll_list_len_next(prev_list)), old(_dryad_S5#1, sll_list_len_next(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_list_len_next(_dryad_S5#1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(prev_list)))), ==(old(_dryad_S4#0, sll(prev_list)), old(_dryad_S5#1, sll(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll(_dryad_S4#0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll(_dryad_S5#1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(prev_list)))), ==(old(_dryad_S4#0, sll_reach(prev_list)), old(_dryad_S5#1, sll_reach(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_reach(_dryad_S4#0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_reach(_dryad_S5#1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(tmp_list)))), ==(old(_dryad_S4#0, sll_keys(tmp_list)), old(_dryad_S5#1, sll_keys(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_keys(_dryad_S4#0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_keys(_dryad_S5#1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(tmp_list)))), ==(old(_dryad_S4#0, sll_list_len_next(tmp_list)), old(_dryad_S5#1, sll_list_len_next(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(_dryad_S5#1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(tmp_list)))), ==(old(_dryad_S4#0, sll(tmp_list)), old(_dryad_S5#1, sll(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll(_dryad_S4#0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(_dryad_S5#1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(tmp_list)))), ==(old(_dryad_S4#0, sll_reach(tmp_list)), old(_dryad_S5#1, sll_reach(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_reach(_dryad_S4#0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(_dryad_S5#1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(tmp_prev)))), ==(old(_dryad_S4#0, sll_keys(tmp_prev)), old(_dryad_S5#1, sll_keys(tmp_prev)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll_keys(_dryad_S4#0, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll_keys(_dryad_S5#1, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(tmp_prev)))), ==(old(_dryad_S4#0, sll_list_len_next(tmp_prev)), old(_dryad_S5#1, sll_list_len_next(tmp_prev)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#0, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll_list_len_next(_dryad_S5#1, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(tmp_prev)))), ==(old(_dryad_S4#0, sll(tmp_prev)), old(_dryad_S5#1, sll(tmp_prev)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll(_dryad_S4#0, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll(_dryad_S5#1, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(tmp_prev)))), ==(old(_dryad_S4#0, sll_reach(tmp_prev)), old(_dryad_S5#1, sll_reach(tmp_prev)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll_reach(_dryad_S4#0, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll_reach(_dryad_S5#1, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(list)))), ==(old(_dryad_S4#0, sll_keys(list)), old(_dryad_S5#1, sll_keys(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_keys(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node)) == F#sll_keys(_dryad_S5#1, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(list)))), ==(old(_dryad_S4#0, sll_list_len_next(list)), old(_dryad_S5#1, sll_list_len_next(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(_dryad_S5#1, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(list)))), ==(old(_dryad_S4#0, sll(list)), old(_dryad_S5#1, sll(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node)) == F#sll(_dryad_S5#1, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_reach(list)))), ==(old(_dryad_S4#0, sll_reach(list)), old(_dryad_S5#1, sll_reach(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(_dryad_S5#1, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#0, sll_lseg(list, prev_list)), old(_dryad_S5#1, sll_lseg(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg(_dryad_S5#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#0, sll_lseg_reach(list, prev_list)), old(_dryad_S5#1, sll_lseg_reach(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_reach(_dryad_S5#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#0, sll_lseg_keys(list, prev_list)), old(_dryad_S5#1, sll_lseg_keys(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_keys(_dryad_S5#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#0, sll_lseg_len_next(list, prev_list)), old(_dryad_S5#1, sll_lseg_len_next(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#0, sll_lseg(list, tmp_list)), old(_dryad_S5#1, sll_lseg(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg(_dryad_S5#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#0, sll_lseg_reach(list, tmp_list)), old(_dryad_S5#1, sll_lseg_reach(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_reach(_dryad_S5#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#0, sll_lseg_keys(list, tmp_list)), old(_dryad_S5#1, sll_lseg_keys(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_keys(_dryad_S5#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#0, sll_lseg_len_next(list, tmp_list)), old(_dryad_S5#1, sll_lseg_len_next(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#0, sll_lseg(list, prev_list)), old(_dryad_S5#1, sll_lseg(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg(_dryad_S5#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#0, sll_lseg_reach(list, prev_list)), old(_dryad_S5#1, sll_lseg_reach(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_reach(_dryad_S5#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#0, sll_lseg_keys(list, prev_list)), old(_dryad_S5#1, sll_lseg_keys(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_keys(_dryad_S5#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#0, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#0, sll_lseg_len_next(list, prev_list)), old(_dryad_S5#1, sll_lseg_len_next(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list1)), ==(*((prev_list1->key)), old(_dryad_S4#0, *((prev_list1->key))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(SL#prev_list1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#prev_list1, ^s_node)) == $rd_inv(_dryad_S4#0, s_node.key, $phys_ptr_cast(SL#prev_list1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list1)), @_vcc_ptr_eq_pure(*((prev_list1->next)), old(_dryad_S4#0, *((prev_list1->next))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(SL#prev_list1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#prev_list1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#0, s_node.next, $phys_ptr_cast(SL#prev_list1, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), ==(*((prev_list->key)), old(_dryad_S4#0, *((prev_list->key))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) == $rd_inv(_dryad_S4#0, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), @_vcc_ptr_eq_pure(*((prev_list->next)), old(_dryad_S4#0, *((prev_list->next))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#0, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), ==(*((tmp_list->key)), old(_dryad_S4#0, *((tmp_list->key))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) == $rd_inv(_dryad_S4#0, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), @_vcc_ptr_eq_pure(*((tmp_list->next)), old(_dryad_S4#0, *((tmp_list->next))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#0, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_prev)), ==(*((tmp_prev->key)), old(_dryad_S4#0, *((tmp_prev->key))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_prev, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $rd_inv(_dryad_S4#0, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_prev)), @_vcc_ptr_eq_pure(*((tmp_prev->next)), old(_dryad_S4#0, *((tmp_prev->next))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_prev, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#0, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), ==(*((list->key)), old(_dryad_S4#0, *((list->key))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) == $rd_inv(_dryad_S4#0, s_node.key, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S4#0, *((list->next))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#0, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(prev_list1), ==(sll_keys(prev_list1), @_vcc_intset_union(sll_keys(*((prev_list1->next))), @_vcc_intset_singleton(*((prev_list1->key)))))); 
    assume $non_null($phys_ptr_cast(SL#prev_list1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#prev_list1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#prev_list1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#prev_list1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list1), ==(sll_list_len_next(prev_list1), unchecked+(sll_list_len_next(*((prev_list1->next))), 1))); 
    assume $non_null($phys_ptr_cast(SL#prev_list1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#prev_list1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#prev_list1, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(prev_list1), ==(sll(prev_list1), &&(sll(*((prev_list1->next))), unchecked!(@_vcc_oset_in(prev_list1, sll_reach(*((prev_list1->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#prev_list1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#prev_list1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#prev_list1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#prev_list1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#prev_list1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list1), ==(sll_reach(prev_list1), @_vcc_oset_union(sll_reach(*((prev_list1->next))), @_vcc_oset_singleton(prev_list1)))); 
    assume $non_null($phys_ptr_cast(SL#prev_list1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#prev_list1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#prev_list1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#prev_list1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_keys(tmp_prev), @_vcc_intset_union(sll_keys(*((tmp_prev->next))), @_vcc_intset_singleton(*((tmp_prev->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_list_len_next(tmp_prev), unchecked+(sll_list_len_next(*((tmp_prev->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll(tmp_prev), &&(sll(*((tmp_prev->next))), unchecked!(@_vcc_oset_in(tmp_prev, sll_reach(*((tmp_prev->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_prev, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_reach(tmp_prev), @_vcc_oset_union(sll_reach(*((tmp_prev->next))), @_vcc_oset_singleton(tmp_prev)))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_prev, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_keys(tmp_prev), @_vcc_intset_union(sll_keys(*((tmp_prev->next))), @_vcc_intset_singleton(*((tmp_prev->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_list_len_next(tmp_prev), unchecked+(sll_list_len_next(*((tmp_prev->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll(tmp_prev), &&(sll(*((tmp_prev->next))), unchecked!(@_vcc_oset_in(tmp_prev, sll_reach(*((tmp_prev->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_prev, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_reach(tmp_prev), @_vcc_oset_union(sll_reach(*((tmp_prev->next))), @_vcc_oset_singleton(tmp_prev)))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_prev, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg(list, prev_list), &&(sll_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), prev_list)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_reach(list, prev_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_keys(list, prev_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), prev_list), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_len_next(list, prev_list), unchecked+(sll_lseg_len_next(*((list->next)), prev_list), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg(list, tmp_list), &&(sll_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), tmp_list)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_reach(list, tmp_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_keys(list, tmp_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), tmp_list), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_len_next(list, tmp_list), unchecked+(sll_lseg_len_next(*((list->next)), tmp_list), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg(list, prev_list), &&(sll_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), prev_list)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_reach(list, prev_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_keys(list, prev_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), prev_list), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_len_next(list, prev_list), unchecked+(sll_lseg_len_next(*((list->next)), prev_list), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), 1);
    // _math \state _dryad_S6; 
    // _dryad_S6 := @_vcc_current_state(@state); 
    SL#_dryad_S6 := $current_state($s);
    // _math \state stmtexpr10#18; 
    // stmtexpr10#18 := _dryad_S6; 
    stmtexpr10#18 := SL#_dryad_S6;
    // assert @prim_writes_check((prev_list->next)); 
    assert $writable_prim($s, #wrTime$3^16.3, $dot($phys_ptr_cast(L#prev_list, ^s_node), s_node.next));
    // *(prev_list->next) := new_list; 
    call $write_int(s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), $ptr_to_int($phys_ptr_cast(L#new_list, ^s_node)));
    assume $full_stop_ext(#tok$3^66.3, $s);
    // _math \state _dryad_S7; 
    // _dryad_S7 := @_vcc_current_state(@state); 
    SL#_dryad_S7 := $current_state($s);
    // _math \state stmtexpr11#19; 
    // stmtexpr11#19 := _dryad_S7; 
    stmtexpr11#19 := SL#_dryad_S7;
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(prev_list1)))), ==(old(_dryad_S6, sll_keys(prev_list1)), old(_dryad_S7, sll_keys(prev_list1)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#prev_list1, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(SL#prev_list1, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(SL#prev_list1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(prev_list1)))), ==(old(_dryad_S6, sll_list_len_next(prev_list1)), old(_dryad_S7, sll_list_len_next(prev_list1)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#prev_list1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(SL#prev_list1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(SL#prev_list1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(prev_list1)))), ==(old(_dryad_S6, sll(prev_list1)), old(_dryad_S7, sll(prev_list1)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#prev_list1, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(SL#prev_list1, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(SL#prev_list1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(prev_list1)))), ==(old(_dryad_S6, sll_reach(prev_list1)), old(_dryad_S7, sll_reach(prev_list1)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#prev_list1, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#prev_list1, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(SL#prev_list1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(tmp_list)))), ==(old(_dryad_S6, sll_keys(tmp_list)), old(_dryad_S7, sll_keys(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(tmp_list)))), ==(old(_dryad_S6, sll_list_len_next(tmp_list)), old(_dryad_S7, sll_list_len_next(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(tmp_list)))), ==(old(_dryad_S6, sll(tmp_list)), old(_dryad_S7, sll(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(tmp_list)))), ==(old(_dryad_S6, sll_reach(tmp_list)), old(_dryad_S7, sll_reach(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(new_list)))), ==(old(_dryad_S6, sll_keys(new_list)), old(_dryad_S7, sll_keys(new_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#new_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(new_list)))), ==(old(_dryad_S6, sll_list_len_next(new_list)), old(_dryad_S7, sll_list_len_next(new_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#new_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(new_list)))), ==(old(_dryad_S6, sll(new_list)), old(_dryad_S7, sll(new_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#new_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(new_list)))), ==(old(_dryad_S6, sll_reach(new_list)), old(_dryad_S7, sll_reach(new_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#new_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(tmp_prev)))), ==(old(_dryad_S6, sll_keys(tmp_prev)), old(_dryad_S7, sll_keys(tmp_prev)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(tmp_prev)))), ==(old(_dryad_S6, sll_list_len_next(tmp_prev)), old(_dryad_S7, sll_list_len_next(tmp_prev)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(tmp_prev)))), ==(old(_dryad_S6, sll(tmp_prev)), old(_dryad_S7, sll(tmp_prev)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(tmp_prev)))), ==(old(_dryad_S6, sll_reach(tmp_prev)), old(_dryad_S7, sll_reach(tmp_prev)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_prev, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_prev, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_keys(list)), old(_dryad_S7, sll_keys(list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_list_len_next(list)), old(_dryad_S7, sll_list_len_next(list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll(list)), old(_dryad_S7, sll(list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_reach(list)), old(_dryad_S7, sll_reach(list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6, sll_lseg(list, prev_list)), old(_dryad_S7, sll_lseg(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6, sll_lseg_reach(list, prev_list)), old(_dryad_S7, sll_lseg_reach(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6, sll_lseg_keys(list, prev_list)), old(_dryad_S7, sll_lseg_keys(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6, sll_lseg_len_next(list, prev_list)), old(_dryad_S7, sll_lseg_len_next(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6, sll_lseg(list, tmp_list)), old(_dryad_S7, sll_lseg(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6, sll_lseg_reach(list, tmp_list)), old(_dryad_S7, sll_lseg_reach(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6, sll_lseg_keys(list, tmp_list)), old(_dryad_S7, sll_lseg_keys(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6, sll_lseg_len_next(list, tmp_list)), old(_dryad_S7, sll_lseg_len_next(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6, sll_lseg(list, prev_list)), old(_dryad_S7, sll_lseg(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6, sll_lseg_reach(list, prev_list)), old(_dryad_S7, sll_lseg_reach(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6, sll_lseg_keys(list, prev_list)), old(_dryad_S7, sll_lseg_keys(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6, sll_lseg_len_next(list, prev_list)), old(_dryad_S7, sll_lseg_len_next(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(prev_list, prev_list1)), ==(*((prev_list1->key)), old(_dryad_S6, *((prev_list1->key))))); 
    assume !($phys_ptr_cast(L#prev_list, ^s_node) == $phys_ptr_cast(SL#prev_list1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#prev_list1, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(SL#prev_list1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(prev_list, prev_list1)), @_vcc_ptr_eq_pure(*((prev_list1->next)), old(_dryad_S6, *((prev_list1->next))))); 
    assume !($phys_ptr_cast(L#prev_list, ^s_node) == $phys_ptr_cast(SL#prev_list1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#prev_list1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(SL#prev_list1, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(prev_list, tmp_list)), ==(*((tmp_list->key)), old(_dryad_S6, *((tmp_list->key))))); 
    assume !($phys_ptr_cast(L#prev_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(prev_list, tmp_list)), @_vcc_ptr_eq_pure(*((tmp_list->next)), old(_dryad_S6, *((tmp_list->next))))); 
    assume !($phys_ptr_cast(L#prev_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(prev_list, new_list)), ==(*((new_list->key)), old(_dryad_S6, *((new_list->key))))); 
    assume !($phys_ptr_cast(L#prev_list, ^s_node) == $phys_ptr_cast(L#new_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#new_list, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(prev_list, new_list)), @_vcc_ptr_eq_pure(*((new_list->next)), old(_dryad_S6, *((new_list->next))))); 
    assume !($phys_ptr_cast(L#prev_list, ^s_node) == $phys_ptr_cast(L#new_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(prev_list, tmp_prev)), ==(*((tmp_prev->key)), old(_dryad_S6, *((tmp_prev->key))))); 
    assume !($phys_ptr_cast(L#prev_list, ^s_node) == $phys_ptr_cast(L#tmp_prev, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(prev_list, tmp_prev)), @_vcc_ptr_eq_pure(*((tmp_prev->next)), old(_dryad_S6, *((tmp_prev->next))))); 
    assume !($phys_ptr_cast(L#prev_list, ^s_node) == $phys_ptr_cast(L#tmp_prev, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(prev_list, list)), ==(*((list->key)), old(_dryad_S6, *((list->key))))); 
    assume !($phys_ptr_cast(L#prev_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(prev_list, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6, *((list->next))))); 
    assume !($phys_ptr_cast(L#prev_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(prev_list1), ==(sll_keys(prev_list1), @_vcc_intset_union(sll_keys(*((prev_list1->next))), @_vcc_intset_singleton(*((prev_list1->key)))))); 
    assume $non_null($phys_ptr_cast(SL#prev_list1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#prev_list1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#prev_list1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#prev_list1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list1), ==(sll_list_len_next(prev_list1), unchecked+(sll_list_len_next(*((prev_list1->next))), 1))); 
    assume $non_null($phys_ptr_cast(SL#prev_list1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#prev_list1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#prev_list1, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(prev_list1), ==(sll(prev_list1), &&(sll(*((prev_list1->next))), unchecked!(@_vcc_oset_in(prev_list1, sll_reach(*((prev_list1->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#prev_list1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#prev_list1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#prev_list1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#prev_list1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#prev_list1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list1), ==(sll_reach(prev_list1), @_vcc_oset_union(sll_reach(*((prev_list1->next))), @_vcc_oset_singleton(prev_list1)))); 
    assume $non_null($phys_ptr_cast(SL#prev_list1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#prev_list1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#prev_list1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#prev_list1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_keys(tmp_prev), @_vcc_intset_union(sll_keys(*((tmp_prev->next))), @_vcc_intset_singleton(*((tmp_prev->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_prev, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_list_len_next(tmp_prev), unchecked+(sll_list_len_next(*((tmp_prev->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll(tmp_prev), &&(sll(*((tmp_prev->next))), unchecked!(@_vcc_oset_in(tmp_prev, sll_reach(*((tmp_prev->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_prev, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_prev), ==(sll_reach(tmp_prev), @_vcc_oset_union(sll_reach(*((tmp_prev->next))), @_vcc_oset_singleton(tmp_prev)))); 
    assume $non_null($phys_ptr_cast(L#tmp_prev, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_prev, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_prev, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_prev, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg(list, tmp_list), &&(sll_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), tmp_list)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_reach(list, tmp_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_keys(list, tmp_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), tmp_list), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_len_next(list, tmp_list), unchecked+(sll_lseg_len_next(*((list->next)), tmp_list), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), 1);
    // return list; 
    $result := $phys_ptr_cast(P#list, ^s_node);
    assume true;
    assert $position_marker();
    goto #exit;

  anon15:
    // skip

  #exit:
}



const unique l#public: $label;

const unique #tok$3^66.3: $token;

const unique #tok$3^65.3: $token;

const unique #tok$3^45.3: $token;

const unique #tok$3^38.5: $token;

const unique #tok$3^35.3: $token;

const unique #tok$3^33.14: $token;

const unique #tok$3^26.12: $token;

const unique #tok$3^23.12: $token;

const unique #tok$4^0.0: $token;

const unique #file^?3Cno?20file?3E: $token;

axiom $file_name_is(4, #file^?3Cno?20file?3E);

const unique #tok$3^16.3: $token;

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgslist?5Cg_slist_insert.c: $token;

axiom $file_name_is(3, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgslist?5Cg_slist_insert.c);

const unique #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgslist?5Cdryad_gslist_sll.h: $token;

axiom $file_name_is(2, #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgslist?5Cdryad_gslist_sll.h);

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h: $token;

axiom $file_name_is(1, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h);

const unique #distTp1: $ctype;

axiom #distTp1 == $ptr_to(^s_node);

