axiom $arch_ptr_size == 8;

axiom $arch_spec_ptr_start == $max.u8;

const unique ^$##thread_id: $ctype;

axiom $def_math_type(^$##thread_id);

type $##thread_id;

const unique ^$##club: $ctype;

axiom $def_math_type(^$##club);

type $##club;

const unique ^s_node: $ctype;

axiom $is_span_sequential(^s_node);

axiom $def_struct_type(^s_node, 16, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^s_node) } $inv2(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^s_node) } $inv2_without_lemmas(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^s_node)) } $in(q, $composite_extent(s, p, ^s_node)) == (q == p));

const unique s_node.key: $field;

axiom $def_phys_field(^s_node, s_node.key, ^^i4, false, 0);

const unique s_node.next: $field;

axiom $def_phys_field(^s_node, s_node.next, $ptr_to(^s_node), false, 8);

function F#glob_reach() : $oset;

const unique cf#glob_reach: $pure_function;

axiom $function_arg_type(cf#glob_reach, 0, ^$#oset);

procedure glob_reach() returns ($result: $oset);
  free ensures $result == F#glob_reach();
  free ensures $call_transition(old($s), $s);



const unique ^$#_purecall_handler#1: $ctype;

axiom $def_fnptr_type(^$#_purecall_handler#1);

type $#_purecall_handler#1;

const unique ^$#_invalid_parameter_handler#2: $ctype;

axiom $def_fnptr_type(^$#_invalid_parameter_handler#2);

type $#_invalid_parameter_handler#2;

const unique ^$#g_slist_insert_sorted.c..36263#3: $ctype;

axiom $def_fnptr_type(^$#g_slist_insert_sorted.c..36263#3);

type $#g_slist_insert_sorted.c..36263#3;

const unique ^$#_PtFuncCompare#4: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#4);

type $#_PtFuncCompare#4;

const unique ^$#_PtFuncCompare#5: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#5);

type $#_PtFuncCompare#5;

const unique ^$#_PtFuncCompare#6: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#6);

type $#_PtFuncCompare#6;

const unique ^$#_PtFuncCompare#7: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#7);

type $#_PtFuncCompare#7;

const unique ^$#_onexit_t#8: $ctype;

axiom $def_fnptr_type(^$#_onexit_t#8);

type $#_onexit_t#8;

function F##int_max(SP#x: int, SP#y: int) : int;

const unique cf##int_max: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_max(SP#x, SP#y) } $in_range_i4(F##int_max(SP#x, SP#y)));

axiom $function_arg_type(cf##int_max, 0, ^^i4);

axiom $function_arg_type(cf##int_max, 1, ^^i4);

axiom $function_arg_type(cf##int_max, 2, ^^i4);

procedure #int_max(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_max(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F##int_min(SP#x: int, SP#y: int) : int;

const unique cf##int_min: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_min(SP#x, SP#y) } $in_range_i4(F##int_min(SP#x, SP#y)));

axiom $function_arg_type(cf##int_min, 0, ^^i4);

axiom $function_arg_type(cf##int_min, 1, ^^i4);

axiom $function_arg_type(cf##int_min, 2, ^^i4);

procedure #int_min(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_min(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F#sll(#s: $state, SP#hd: $ptr) : bool;

const unique cf#sll: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll(#s, SP#hd) } 1 < $decreases_level ==> $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll(#s, SP#hd));

axiom $function_arg_type(cf#sll, 0, ^^bool);

axiom $function_arg_type(cf#sll, 1, $ptr_to(^s_node));

procedure sll(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  free ensures $result == F#sll($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#srtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#srtl(#s, SP#hd)));

axiom $function_arg_type(cf#srtl, 0, ^^bool);

axiom $function_arg_type(cf#srtl, 1, $ptr_to(^s_node));

procedure srtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#srtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#rsrtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#rsrtl(#s, SP#hd)));

axiom $function_arg_type(cf#rsrtl, 0, ^^bool);

axiom $function_arg_type(cf#rsrtl, 1, $ptr_to(^s_node));

procedure rsrtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#rsrtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#sll_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#sll_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_reach, 1, $ptr_to(^s_node));

procedure sll_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#sll_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#srtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#srtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_reach, 1, $ptr_to(^s_node));

procedure srtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#srtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#rsrtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#rsrtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#rsrtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#rsrtl_reach, 1, $ptr_to(^s_node));

procedure rsrtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#rsrtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_keys(#s: $state, SP#hd: $ptr) : $intset;

const unique cf#sll_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_keys(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_keys(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_keys(#s, SP#hd) == $intset_empty()));

axiom $function_arg_type(cf#sll_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_keys, 1, $ptr_to(^s_node));

procedure sll_keys(SP#hd: $ptr) returns ($result: $intset);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $intset_empty();
  free ensures $result == F#sll_keys($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_min_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_min_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_min_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_min_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_min_key, 1, $ptr_to(^s_node));

procedure sll_min_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_min_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_max_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_max_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_max_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_max_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_max_key, 1, $ptr_to(^s_node));

procedure sll_max_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_max_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_list_len_next(#s: $state, SP#x: $ptr) : int;

const unique cf#sll_list_len_next: $pure_function;

axiom (forall #s: $state, SP#x: $ptr :: { F#sll_list_len_next(#s, SP#x) } 1 < $decreases_level ==> $in_range_nat(F#sll_list_len_next(#s, SP#x)) && ($non_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) > 0) && ($is_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) == 0));

axiom $function_arg_type(cf#sll_list_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_list_len_next, 1, $ptr_to(^s_node));

procedure sll_list_len_next(SP#x: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $non_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result > 0;
  ensures $is_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result == 0;
  free ensures $result == F#sll_list_len_next($s, SP#x);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#sll_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg(#s, SP#hd, SP#tl) == F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg(#s, SP#hd, SP#tl)) && (F#sll_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && F#sll(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1)));

axiom $function_arg_type(cf#sll_lseg, 0, ^^bool);

axiom $function_arg_type(cf#sll_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg, 2, $ptr_to(^s_node));

procedure sll_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#sll($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1);
  free ensures $result == F#sll_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#srtl_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, SP#hd, SP#tl) == F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && (F#srtl_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && F#srtl(#s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key(#s, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))));

axiom $function_arg_type(cf#srtl_lseg, 0, ^^bool);

axiom $function_arg_type(cf#srtl_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg, 2, $ptr_to(^s_node));

procedure srtl_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#srtl($s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key($s, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  free ensures $result == F#srtl_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#sll_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_reach, 2, $ptr_to(^s_node));

procedure sll_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#sll_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#srtl_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#srtl_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg_reach, 2, $ptr_to(^s_node));

procedure srtl_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#srtl_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_keys(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $intset;

const unique cf#sll_lseg_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_keys(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == $intset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_lseg_keys(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_lseg_keys, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_keys, 2, $ptr_to(^s_node));

procedure sll_lseg_keys(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $intset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $intset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  free ensures $result == F#sll_lseg_keys($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_min_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_min_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_min_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_min_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_min_key, 2, $ptr_to(^s_node));

procedure sll_lseg_min_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_min_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_max_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_max_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_max_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_max_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_max_key, 2, $ptr_to(^s_node));

procedure sll_lseg_max_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_max_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_len_next(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_len_next: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_len_next(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_nat(F#sll_lseg_len_next(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == 0) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) > 0));

axiom $function_arg_type(cf#sll_lseg_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_lseg_len_next, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_len_next, 2, $ptr_to(^s_node));

procedure sll_lseg_len_next(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == 0;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $result > 0;
  free ensures $result == F#sll_lseg_len_next($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



procedure g_slist_insert_sorted(P#list: $ptr, P#data: int) returns ($result: $ptr);
  requires F#srtl($s, $phys_ptr_cast(P#list, ^s_node));
  modifies $s, $cev_pc;
  ensures F#srtl($s, $phys_ptr_cast($result, ^s_node));
  ensures F#sll_keys($s, $phys_ptr_cast($result, ^s_node)) == $intset_union(F#sll_keys(old($s), $phys_ptr_cast(P#list, ^s_node)), $intset_singleton(P#data));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



implementation g_slist_insert_sorted(P#list: $ptr, P#data: int) returns ($result: $ptr)
{
  var stmtexpr1#23: $state;
  var _dryad_S5#11: $state;
  var stmtexpr0#22: $state;
  var _dryad_S4#10: $state;
  var stmtexpr5#21: $state;
  var SL#_dryad_S9: $state;
  var stmtexpr4#20: $state;
  var SL#_dryad_S8: $state;
  var stmtexpr3#19: $state;
  var _dryad_S7#9: $state;
  var stmtexpr2#18: $state;
  var _dryad_S6#8: $state;
  var stmtexpr1#17: $state;
  var _dryad_S5#7: $state;
  var stmtexpr0#16: $state;
  var _dryad_S4#6: $state;
  var stmtexpr3#15: $state;
  var SL#_dryad_S7: $state;
  var stmtexpr2#14: $state;
  var SL#_dryad_S6: $state;
  var stmtexpr1#13: $state;
  var _dryad_S5#5: $state;
  var stmtexpr0#12: $state;
  var _dryad_S4#4: $state;
  var ite#2: bool;
  var stmtexpr6#30: $state;
  var _dryad_S3#3: $state;
  var stmtexpr5#29: $state;
  var _dryad_S2#2: $state;
  var stmtexpr4#28: $state;
  var _dryad_S1#1: $state;
  var stmtexpr3#27: $oset;
  var stmtexpr2#26: $state;
  var _dryad_S0#0: $state;
  var stmtexpr0#11: $ptr;
  var SL#tmp_list0: $ptr;
  var ite#1: bool;
  var loopState#0: $state;
  var stmtexpr6#10: $state;
  var SL#_dryad_S5: $state;
  var stmtexpr5#9: $state;
  var SL#_dryad_S4: $state;
  var stmtexpr4#8: $state;
  var SL#_dryad_S3: $state;
  var stmtexpr3#7: $state;
  var SL#_dryad_S2: $state;
  var stmtexpr2#6: $state;
  var SL#_dryad_S1: $state;
  var stmtexpr1#5: $oset;
  var stmtexpr0#4: $state;
  var SL#_dryad_S0: $state;
  var L#tmp_list: $ptr;
  var L#prev_list: $ptr;
  var L#new_list: $ptr;
  var stmtexpr1#25: $oset;
  var stmtexpr0#24: $oset;
  var SL#_dryad_G1: $oset;
  var SL#_dryad_G0: $oset;
  var #wrTime$3^3.3: int;
  var #stackframe: int;

  anon15:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$3^3.3, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$3^3.3 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$3^3.3, (lambda #p: $ptr :: false));
    // assume true
    // assume @in_range_i4(data); 
    assume $in_range_i4(P#data);
    // assume @decreases_level_is(2147483647); 
    assume 2147483647 == $decreases_level;
    // assume true
    //  --- Dryad annotated function --- 
    // _math \oset _dryad_G0; 
    // _math \oset _dryad_G1; 
    // _dryad_G0 := srtl_reach(list); 
    call SL#_dryad_G0 := srtl_reach($phys_ptr_cast(P#list, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset stmtexpr0#24; 
    // stmtexpr0#24 := _dryad_G0; 
    stmtexpr0#24 := SL#_dryad_G0;
    // _dryad_G1 := _dryad_G0; 
    SL#_dryad_G1 := SL#_dryad_G0;
    // _math \oset stmtexpr1#25; 
    // stmtexpr1#25 := _dryad_G1; 
    stmtexpr1#25 := SL#_dryad_G1;
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // struct s_node* new_list; 
    // struct s_node* prev_list; 
    // struct s_node* tmp_list; 
    // assume ==>(@_vcc_ptr_neq_null(list), &&(@_vcc_mutable(@state, list), @writes_check(list))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> $mutable($s, $phys_ptr_cast(P#list, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(P#list, ^s_node));
    // tmp_list := list; 
    L#tmp_list := $phys_ptr_cast(P#list, ^s_node);
    // assert sll_lseg(tmp_list, tmp_list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume sll_lseg(tmp_list, tmp_list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assert srtl_lseg(tmp_list, tmp_list); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume srtl_lseg(tmp_list, tmp_list); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assert sll_lseg(prev_list, prev_list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume sll_lseg(prev_list, prev_list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assert srtl_lseg(prev_list, prev_list); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume srtl_lseg(prev_list, prev_list); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assert sll_lseg(new_list, new_list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
    // assume sll_lseg(new_list, new_list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
    // assert srtl_lseg(new_list, new_list); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
    // assume srtl_lseg(new_list, new_list); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
    // assert sll_lseg(list, list); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
    // assume sll_lseg(list, list); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
    // assert srtl_lseg(list, list); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
    // assume srtl_lseg(list, list); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
    // prev_list := (struct s_node*)@null; 
    L#prev_list := $phys_ptr_cast($null, ^s_node);
    // assert sll_lseg(tmp_list, tmp_list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume sll_lseg(tmp_list, tmp_list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assert srtl_lseg(tmp_list, tmp_list); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume srtl_lseg(tmp_list, tmp_list); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assert sll_lseg(prev_list, prev_list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume sll_lseg(prev_list, prev_list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assert srtl_lseg(prev_list, prev_list); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume srtl_lseg(prev_list, prev_list); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assert sll_lseg(new_list, new_list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
    // assume sll_lseg(new_list, new_list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
    // assert srtl_lseg(new_list, new_list); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
    // assume srtl_lseg(new_list, new_list); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
    // assert sll_lseg(list, list); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
    // assume sll_lseg(list, list); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
    // assert srtl_lseg(list, list); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
    // assume srtl_lseg(list, list); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // new_list := (struct s_node*)@null; 
    L#new_list := $phys_ptr_cast($null, ^s_node);
    // assert sll_lseg(tmp_list, tmp_list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume sll_lseg(tmp_list, tmp_list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assert srtl_lseg(tmp_list, tmp_list); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume srtl_lseg(tmp_list, tmp_list); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assert sll_lseg(prev_list, prev_list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume sll_lseg(prev_list, prev_list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assert srtl_lseg(prev_list, prev_list); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume srtl_lseg(prev_list, prev_list); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assert sll_lseg(new_list, new_list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
    // assume sll_lseg(new_list, new_list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
    // assert srtl_lseg(new_list, new_list); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
    // assume srtl_lseg(new_list, new_list); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
    // assert sll_lseg(list, list); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
    // assume sll_lseg(list, list); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
    // assert srtl_lseg(list, list); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
    // assume srtl_lseg(list, list); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
    assume true;
    // if (@_vcc_ptr_eq_null(list)) ...
    if ($is_null($phys_ptr_cast(P#list, ^s_node)))
    {
      anon1:
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // _math \state _dryad_S0; 
        // _dryad_S0 := @_vcc_current_state(@state); 
        SL#_dryad_S0 := $current_state($s);
        // _math \state stmtexpr0#4; 
        // stmtexpr0#4 := _dryad_S0; 
        stmtexpr0#4 := SL#_dryad_S0;
        // new_list := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
        call L#new_list := $alloc(^s_node);
        assume $full_stop_ext(#tok$3^15.14, $s);
        // assume !(@_vcc_oset_in(new_list, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
        // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(new_list)); 
        SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // _math \oset stmtexpr1#5; 
        // stmtexpr1#5 := _dryad_G1; 
        stmtexpr1#5 := SL#_dryad_G1;
        // assume ==(glob_reach(), _dryad_G1); 
        assume F#glob_reach() == SL#_dryad_G1;
        // _math \state _dryad_S1; 
        // _dryad_S1 := @_vcc_current_state(@state); 
        SL#_dryad_S1 := $current_state($s);
        // _math \state stmtexpr2#6; 
        // stmtexpr2#6 := _dryad_S1; 
        stmtexpr2#6 := SL#_dryad_S1;
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(tmp_list)))), ==(old(_dryad_S0, sll_keys(tmp_list)), old(_dryad_S1, sll_keys(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(tmp_list)))), ==(old(_dryad_S0, sll_list_len_next(tmp_list)), old(_dryad_S1, sll_list_len_next(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, rsrtl_reach(tmp_list)))), ==(old(_dryad_S0, rsrtl(tmp_list)), old(_dryad_S1, rsrtl(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, rsrtl_reach(tmp_list)))), ==(old(_dryad_S0, rsrtl_reach(tmp_list)), old(_dryad_S1, rsrtl_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(tmp_list)))), ==(old(_dryad_S0, sll(tmp_list)), old(_dryad_S1, sll(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(tmp_list)))), ==(old(_dryad_S0, sll_reach(tmp_list)), old(_dryad_S1, sll_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(tmp_list)))), ==(old(_dryad_S0, sll_max_key(tmp_list)), old(_dryad_S1, sll_max_key(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(tmp_list)))), ==(old(_dryad_S0, sll_min_key(tmp_list)), old(_dryad_S1, sll_min_key(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, srtl_reach(tmp_list)))), ==(old(_dryad_S0, srtl(tmp_list)), old(_dryad_S1, srtl(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, srtl_reach(tmp_list)))), ==(old(_dryad_S0, srtl_reach(tmp_list)), old(_dryad_S1, srtl_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(prev_list)))), ==(old(_dryad_S0, sll_keys(prev_list)), old(_dryad_S1, sll_keys(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(prev_list)))), ==(old(_dryad_S0, sll_list_len_next(prev_list)), old(_dryad_S1, sll_list_len_next(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, rsrtl_reach(prev_list)))), ==(old(_dryad_S0, rsrtl(prev_list)), old(_dryad_S1, rsrtl(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, rsrtl_reach(prev_list)))), ==(old(_dryad_S0, rsrtl_reach(prev_list)), old(_dryad_S1, rsrtl_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(prev_list)))), ==(old(_dryad_S0, sll(prev_list)), old(_dryad_S1, sll(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(prev_list)))), ==(old(_dryad_S0, sll_reach(prev_list)), old(_dryad_S1, sll_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(prev_list)))), ==(old(_dryad_S0, sll_max_key(prev_list)), old(_dryad_S1, sll_max_key(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(prev_list)))), ==(old(_dryad_S0, sll_min_key(prev_list)), old(_dryad_S1, sll_min_key(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, srtl_reach(prev_list)))), ==(old(_dryad_S0, srtl(prev_list)), old(_dryad_S1, srtl(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, srtl_reach(prev_list)))), ==(old(_dryad_S0, srtl_reach(prev_list)), old(_dryad_S1, srtl_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(list)))), ==(old(_dryad_S0, sll_keys(list)), old(_dryad_S1, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(list)))), ==(old(_dryad_S0, sll_list_len_next(list)), old(_dryad_S1, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, rsrtl_reach(list)))), ==(old(_dryad_S0, rsrtl(list)), old(_dryad_S1, rsrtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, rsrtl_reach(list)))), ==(old(_dryad_S0, rsrtl_reach(list)), old(_dryad_S1, rsrtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(list)))), ==(old(_dryad_S0, sll(list)), old(_dryad_S1, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(list)))), ==(old(_dryad_S0, sll_reach(list)), old(_dryad_S1, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(list)))), ==(old(_dryad_S0, sll_max_key(list)), old(_dryad_S1, sll_max_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, sll_reach(list)))), ==(old(_dryad_S0, sll_min_key(list)), old(_dryad_S1, sll_min_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, srtl_reach(list)))), ==(old(_dryad_S0, srtl(list)), old(_dryad_S1, srtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0, srtl_reach(list)))), ==(old(_dryad_S0, srtl_reach(list)), old(_dryad_S1, srtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#list, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(P#list, ^s_node));
        // assume @_vcc_ptr_neq_null(new_list); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node));
        // _math \state _dryad_S2; 
        // _dryad_S2 := @_vcc_current_state(@state); 
        SL#_dryad_S2 := $current_state($s);
        // _math \state stmtexpr3#7; 
        // stmtexpr3#7 := _dryad_S2; 
        stmtexpr3#7 := SL#_dryad_S2;
        // assert @prim_writes_check((new_list->key)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#new_list, ^s_node), s_node.key));
        // *(new_list->key) := data; 
        call $write_int(s_node.key, $phys_ptr_cast(L#new_list, ^s_node), P#data);
        assume $full_stop_ext(#tok$3^17.3, $s);
        // _math \state _dryad_S3; 
        // _dryad_S3 := @_vcc_current_state(@state); 
        SL#_dryad_S3 := $current_state($s);
        // _math \state stmtexpr4#8; 
        // stmtexpr4#8 := _dryad_S3; 
        stmtexpr4#8 := SL#_dryad_S3;
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(*((new_list->next)))))), ==(old(_dryad_S2, sll_keys(*((new_list->next)))), old(_dryad_S3, sll_keys(*((new_list->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#sll_keys(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(*((new_list->next)))))), ==(old(_dryad_S2, sll_list_len_next(*((new_list->next)))), old(_dryad_S3, sll_list_len_next(*((new_list->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, rsrtl_reach(*((new_list->next)))))), ==(old(_dryad_S2, rsrtl(*((new_list->next)))), old(_dryad_S3, rsrtl(*((new_list->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#rsrtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, rsrtl_reach(*((new_list->next)))))), ==(old(_dryad_S2, rsrtl_reach(*((new_list->next)))), old(_dryad_S3, rsrtl_reach(*((new_list->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(*((new_list->next)))))), ==(old(_dryad_S2, sll(*((new_list->next)))), old(_dryad_S3, sll(*((new_list->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#sll(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#sll(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(*((new_list->next)))))), ==(old(_dryad_S2, sll_reach(*((new_list->next)))), old(_dryad_S3, sll_reach(*((new_list->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#sll_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(*((new_list->next)))))), ==(old(_dryad_S2, sll_max_key(*((new_list->next)))), old(_dryad_S3, sll_max_key(*((new_list->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#sll_max_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(*((new_list->next)))))), ==(old(_dryad_S2, sll_min_key(*((new_list->next)))), old(_dryad_S3, sll_min_key(*((new_list->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#sll_min_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, srtl_reach(*((new_list->next)))))), ==(old(_dryad_S2, srtl(*((new_list->next)))), old(_dryad_S3, srtl(*((new_list->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#srtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#srtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, srtl_reach(*((new_list->next)))))), ==(old(_dryad_S2, srtl_reach(*((new_list->next)))), old(_dryad_S3, srtl_reach(*((new_list->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#srtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
        // assume ==(old(_dryad_S2, sll_list_len_next(tmp_list)), old(_dryad_S3, sll_list_len_next(tmp_list))); 
        assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==(old(_dryad_S2, rsrtl_reach(tmp_list)), old(_dryad_S3, rsrtl_reach(tmp_list))); 
        assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==(old(_dryad_S2, sll(tmp_list)), old(_dryad_S3, sll(tmp_list))); 
        assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==(old(_dryad_S2, sll_reach(tmp_list)), old(_dryad_S3, sll_reach(tmp_list))); 
        assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==(old(_dryad_S2, srtl_reach(tmp_list)), old(_dryad_S3, srtl_reach(tmp_list))); 
        assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==(old(_dryad_S2, sll_list_len_next(prev_list)), old(_dryad_S3, sll_list_len_next(prev_list))); 
        assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==(old(_dryad_S2, rsrtl_reach(prev_list)), old(_dryad_S3, rsrtl_reach(prev_list))); 
        assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==(old(_dryad_S2, sll(prev_list)), old(_dryad_S3, sll(prev_list))); 
        assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==(old(_dryad_S2, sll_reach(prev_list)), old(_dryad_S3, sll_reach(prev_list))); 
        assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==(old(_dryad_S2, srtl_reach(prev_list)), old(_dryad_S3, srtl_reach(prev_list))); 
        assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==(old(_dryad_S2, sll_list_len_next(new_list)), old(_dryad_S3, sll_list_len_next(new_list))); 
        assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==(old(_dryad_S2, rsrtl_reach(new_list)), old(_dryad_S3, rsrtl_reach(new_list))); 
        assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#new_list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==(old(_dryad_S2, sll(new_list)), old(_dryad_S3, sll(new_list))); 
        assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==(old(_dryad_S2, sll_reach(new_list)), old(_dryad_S3, sll_reach(new_list))); 
        assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==(old(_dryad_S2, srtl_reach(new_list)), old(_dryad_S3, srtl_reach(new_list))); 
        assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#new_list, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==(old(_dryad_S2, sll_list_len_next(list)), old(_dryad_S3, sll_list_len_next(list))); 
        assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
        // assume ==(old(_dryad_S2, rsrtl_reach(list)), old(_dryad_S3, rsrtl_reach(list))); 
        assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
        // assume ==(old(_dryad_S2, sll(list)), old(_dryad_S3, sll(list))); 
        assume F#sll(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
        // assume ==(old(_dryad_S2, sll_reach(list)), old(_dryad_S3, sll_reach(list))); 
        assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
        // assume ==(old(_dryad_S2, srtl_reach(list)), old(_dryad_S3, srtl_reach(list))); 
        assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(tmp_list)))), ==(old(_dryad_S2, sll_keys(tmp_list)), old(_dryad_S3, sll_keys(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(tmp_list)))), ==(old(_dryad_S2, sll_list_len_next(tmp_list)), old(_dryad_S3, sll_list_len_next(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, rsrtl_reach(tmp_list)))), ==(old(_dryad_S2, rsrtl(tmp_list)), old(_dryad_S3, rsrtl(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, rsrtl_reach(tmp_list)))), ==(old(_dryad_S2, rsrtl_reach(tmp_list)), old(_dryad_S3, rsrtl_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(tmp_list)))), ==(old(_dryad_S2, sll(tmp_list)), old(_dryad_S3, sll(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(tmp_list)))), ==(old(_dryad_S2, sll_reach(tmp_list)), old(_dryad_S3, sll_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(tmp_list)))), ==(old(_dryad_S2, sll_max_key(tmp_list)), old(_dryad_S3, sll_max_key(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(tmp_list)))), ==(old(_dryad_S2, sll_min_key(tmp_list)), old(_dryad_S3, sll_min_key(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, srtl_reach(tmp_list)))), ==(old(_dryad_S2, srtl(tmp_list)), old(_dryad_S3, srtl(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, srtl_reach(tmp_list)))), ==(old(_dryad_S2, srtl_reach(tmp_list)), old(_dryad_S3, srtl_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(prev_list)))), ==(old(_dryad_S2, sll_keys(prev_list)), old(_dryad_S3, sll_keys(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(prev_list)))), ==(old(_dryad_S2, sll_list_len_next(prev_list)), old(_dryad_S3, sll_list_len_next(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, rsrtl_reach(prev_list)))), ==(old(_dryad_S2, rsrtl(prev_list)), old(_dryad_S3, rsrtl(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, rsrtl_reach(prev_list)))), ==(old(_dryad_S2, rsrtl_reach(prev_list)), old(_dryad_S3, rsrtl_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(prev_list)))), ==(old(_dryad_S2, sll(prev_list)), old(_dryad_S3, sll(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(prev_list)))), ==(old(_dryad_S2, sll_reach(prev_list)), old(_dryad_S3, sll_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(prev_list)))), ==(old(_dryad_S2, sll_max_key(prev_list)), old(_dryad_S3, sll_max_key(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(prev_list)))), ==(old(_dryad_S2, sll_min_key(prev_list)), old(_dryad_S3, sll_min_key(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, srtl_reach(prev_list)))), ==(old(_dryad_S2, srtl(prev_list)), old(_dryad_S3, srtl(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, srtl_reach(prev_list)))), ==(old(_dryad_S2, srtl_reach(prev_list)), old(_dryad_S3, srtl_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(list)))), ==(old(_dryad_S2, sll_keys(list)), old(_dryad_S3, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(list)))), ==(old(_dryad_S2, sll_list_len_next(list)), old(_dryad_S3, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, rsrtl_reach(list)))), ==(old(_dryad_S2, rsrtl(list)), old(_dryad_S3, rsrtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, rsrtl_reach(list)))), ==(old(_dryad_S2, rsrtl_reach(list)), old(_dryad_S3, rsrtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(list)))), ==(old(_dryad_S2, sll(list)), old(_dryad_S3, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(list)))), ==(old(_dryad_S2, sll_reach(list)), old(_dryad_S3, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(list)))), ==(old(_dryad_S2, sll_max_key(list)), old(_dryad_S3, sll_max_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, sll_reach(list)))), ==(old(_dryad_S2, sll_min_key(list)), old(_dryad_S3, sll_min_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, srtl_reach(list)))), ==(old(_dryad_S2, srtl(list)), old(_dryad_S3, srtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2, srtl_reach(list)))), ==(old(_dryad_S2, srtl_reach(list)), old(_dryad_S3, srtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#list, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), ==(*((tmp_list->key)), old(_dryad_S2, *((tmp_list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), @_vcc_ptr_eq_pure(*((tmp_list->next)), old(_dryad_S2, *((tmp_list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), ==(*((prev_list->key)), old(_dryad_S2, *((prev_list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), @_vcc_ptr_eq_pure(*((prev_list->next)), old(_dryad_S2, *((prev_list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), ==(*((list->key)), old(_dryad_S2, *((list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S2, *((list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // _math \state _dryad_S4; 
        // _dryad_S4 := @_vcc_current_state(@state); 
        SL#_dryad_S4 := $current_state($s);
        // _math \state stmtexpr5#9; 
        // stmtexpr5#9 := _dryad_S4; 
        stmtexpr5#9 := SL#_dryad_S4;
        // assert @prim_writes_check((new_list->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#new_list, ^s_node), s_node.next));
        // *(new_list->next) := (struct s_node*)@null; 
        call $write_int(s_node.next, $phys_ptr_cast(L#new_list, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
        assume $full_stop_ext(#tok$3^18.3, $s);
        // _math \state _dryad_S5; 
        // _dryad_S5 := @_vcc_current_state(@state); 
        SL#_dryad_S5 := $current_state($s);
        // _math \state stmtexpr6#10; 
        // stmtexpr6#10 := _dryad_S5; 
        stmtexpr6#10 := SL#_dryad_S5;
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(tmp_list)))), ==(old(_dryad_S4, sll_keys(tmp_list)), old(_dryad_S5, sll_keys(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(tmp_list)))), ==(old(_dryad_S4, sll_list_len_next(tmp_list)), old(_dryad_S5, sll_list_len_next(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, rsrtl_reach(tmp_list)))), ==(old(_dryad_S4, rsrtl(tmp_list)), old(_dryad_S5, rsrtl(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, rsrtl_reach(tmp_list)))), ==(old(_dryad_S4, rsrtl_reach(tmp_list)), old(_dryad_S5, rsrtl_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(tmp_list)))), ==(old(_dryad_S4, sll(tmp_list)), old(_dryad_S5, sll(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(tmp_list)))), ==(old(_dryad_S4, sll_reach(tmp_list)), old(_dryad_S5, sll_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(tmp_list)))), ==(old(_dryad_S4, sll_max_key(tmp_list)), old(_dryad_S5, sll_max_key(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(tmp_list)))), ==(old(_dryad_S4, sll_min_key(tmp_list)), old(_dryad_S5, sll_min_key(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, srtl_reach(tmp_list)))), ==(old(_dryad_S4, srtl(tmp_list)), old(_dryad_S5, srtl(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, srtl_reach(tmp_list)))), ==(old(_dryad_S4, srtl_reach(tmp_list)), old(_dryad_S5, srtl_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(prev_list)))), ==(old(_dryad_S4, sll_keys(prev_list)), old(_dryad_S5, sll_keys(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(prev_list)))), ==(old(_dryad_S4, sll_list_len_next(prev_list)), old(_dryad_S5, sll_list_len_next(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, rsrtl_reach(prev_list)))), ==(old(_dryad_S4, rsrtl(prev_list)), old(_dryad_S5, rsrtl(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, rsrtl_reach(prev_list)))), ==(old(_dryad_S4, rsrtl_reach(prev_list)), old(_dryad_S5, rsrtl_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(prev_list)))), ==(old(_dryad_S4, sll(prev_list)), old(_dryad_S5, sll(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(prev_list)))), ==(old(_dryad_S4, sll_reach(prev_list)), old(_dryad_S5, sll_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(prev_list)))), ==(old(_dryad_S4, sll_max_key(prev_list)), old(_dryad_S5, sll_max_key(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(prev_list)))), ==(old(_dryad_S4, sll_min_key(prev_list)), old(_dryad_S5, sll_min_key(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, srtl_reach(prev_list)))), ==(old(_dryad_S4, srtl(prev_list)), old(_dryad_S5, srtl(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, srtl_reach(prev_list)))), ==(old(_dryad_S4, srtl_reach(prev_list)), old(_dryad_S5, srtl_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(list)))), ==(old(_dryad_S4, sll_keys(list)), old(_dryad_S5, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(list)))), ==(old(_dryad_S4, sll_list_len_next(list)), old(_dryad_S5, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, rsrtl_reach(list)))), ==(old(_dryad_S4, rsrtl(list)), old(_dryad_S5, rsrtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, rsrtl_reach(list)))), ==(old(_dryad_S4, rsrtl_reach(list)), old(_dryad_S5, rsrtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(list)))), ==(old(_dryad_S4, sll(list)), old(_dryad_S5, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(list)))), ==(old(_dryad_S4, sll_reach(list)), old(_dryad_S5, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(list)))), ==(old(_dryad_S4, sll_max_key(list)), old(_dryad_S5, sll_max_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, sll_reach(list)))), ==(old(_dryad_S4, sll_min_key(list)), old(_dryad_S5, sll_min_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, srtl_reach(list)))), ==(old(_dryad_S4, srtl(list)), old(_dryad_S5, srtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4, srtl_reach(list)))), ==(old(_dryad_S4, srtl_reach(list)), old(_dryad_S5, srtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#list, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), ==(*((tmp_list->key)), old(_dryad_S4, *((tmp_list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), @_vcc_ptr_eq_pure(*((tmp_list->next)), old(_dryad_S4, *((tmp_list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), ==(*((prev_list->key)), old(_dryad_S4, *((prev_list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), @_vcc_ptr_eq_pure(*((prev_list->next)), old(_dryad_S4, *((prev_list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), ==(*((list->key)), old(_dryad_S4, *((list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S4, *((list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // return new_list; 
        $result := $phys_ptr_cast(L#new_list, ^s_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon2:
        // assert @_vcc_possibly_unreachable; 
        assert {:PossiblyUnreachable true} true;
    }

  anon16:
    loopState#0 := $s;
    assume true;
    while (true)
      invariant F#srtl($s, $phys_ptr_cast(P#list, ^s_node));
      invariant F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node));
      invariant F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node));
      invariant F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
      invariant $oset_disjoint(F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)));
      invariant F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
      invariant $oset_disjoint(F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)));
      invariant $is_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> $phys_ptr_cast(L#tmp_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node);
      invariant $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node);
      invariant $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> $intset_lt_one2(F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), P#data);
      invariant $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> $intset_lt_one2(F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), P#data);
      invariant $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> P#data >= $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node));
      invariant $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#prev_list, ^s_node));
      invariant $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#prev_list, ^s_node));
      invariant $non_null($phys_ptr_cast(L#tmp_list, ^s_node));
      invariant $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#tmp_list, ^s_node));
      invariant $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#tmp_list, ^s_node));
    {
      anon7:
        assume $writes_nothing(old($s), $s);
        assume $timestamp_post(loopState#0, $s);
        assume $full_stop_ext(#tok$3^22.2, $s);
        // assume @_vcc_meta_eq(old(@prestate, @state), @state); 
        assume $meta_eq(loopState#0, $s);
        // _Bool ite#1; 
        // assert @reads_check_normal((tmp_list->next)); 
        assert $thread_local($s, $phys_ptr_cast(L#tmp_list, ^s_node));
        assume true;
        // if (@_vcc_ptr_neq_null(*((tmp_list->next)))) ...
        if ($non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)))
        {
          anon3:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // assert @reads_check_normal((tmp_list->key)); 
            assert $thread_local($s, $phys_ptr_cast(L#tmp_list, ^s_node));
            // ite#1 := <(*((tmp_list->key)), data); 
            ite#1 := $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) < P#data;
        }
        else
        {
          anon4:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // ite#1 := false; 
            ite#1 := false;
        }

      anon8:
        assume true;
        // if (ite#1) ...
        if (ite#1)
        {
          anon5:
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
            assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
            assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
            assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
            assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
            assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
            assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
            assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
            assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
            assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
            assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
            assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
            assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
            assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
            assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
            assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
            assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg(list, prev_list), &&(sll_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), prev_list)))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_reach(list, prev_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_keys(list, prev_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), prev_list), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_len_next(list, prev_list), unchecked+(sll_lseg_len_next(*((list->next)), prev_list), 1))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_max_key(list, prev_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), prev_list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_min_key(list, prev_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(srtl_lseg(list, prev_list), &&(&&(srtl_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), prev_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(srtl_lseg_reach(list, prev_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg(list, tmp_list), &&(sll_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), tmp_list)))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_reach(list, tmp_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_keys(list, tmp_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), tmp_list), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_len_next(list, tmp_list), unchecked+(sll_lseg_len_next(*((list->next)), tmp_list), 1))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_max_key(list, tmp_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), tmp_list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_min_key(list, tmp_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(srtl_lseg(list, tmp_list), &&(&&(srtl_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), tmp_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(srtl_lseg_reach(list, tmp_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), &&(==(@_vcc_mutable(@state, tmp_list), @_vcc_mutable(@state, *((tmp_list->next)))), ==(@writes_check(tmp_list), @writes_check(*((tmp_list->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $mutable($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#tmp_list, ^s_node)) == $top_writable($s, #wrTime$3^3.3, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node));
            // prev_list := tmp_list; 
            L#prev_list := $phys_ptr_cast(L#tmp_list, ^s_node);
            // assert sll_lseg(tmp_list, tmp_list); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
            // assume sll_lseg(tmp_list, tmp_list); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
            // assert srtl_lseg(tmp_list, tmp_list); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
            // assume srtl_lseg(tmp_list, tmp_list); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
            // assert sll_lseg(prev_list, prev_list); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
            // assume sll_lseg(prev_list, prev_list); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
            // assert srtl_lseg(prev_list, prev_list); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
            // assume srtl_lseg(prev_list, prev_list); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#prev_list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
            // assert sll_lseg(new_list, new_list); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
            // assume sll_lseg(new_list, new_list); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
            // assert srtl_lseg(new_list, new_list); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
            // assume srtl_lseg(new_list, new_list); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#new_list, ^s_node), $phys_ptr_cast(L#new_list, ^s_node));
            // assert sll_lseg(list, list); 
            assert F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
            // assume sll_lseg(list, list); 
            assume F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
            // assert srtl_lseg(list, list); 
            assert F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
            // assume srtl_lseg(list, list); 
            assume F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(P#list, ^s_node));
            // struct s_node* tmp_list0; 
            // tmp_list0 := tmp_list; 
            SL#tmp_list0 := $phys_ptr_cast(L#tmp_list, ^s_node);
            // struct s_node* stmtexpr0#11; 
            // stmtexpr0#11 := tmp_list0; 
            stmtexpr0#11 := $phys_ptr_cast(SL#tmp_list0, ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_pure(tmp_list, *((tmp_list->next)))), ==(sll_lseg(tmp_list, *((tmp_list->next))), &&(sll_lseg(*((tmp_list->next)), *((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_lseg_reach(*((tmp_list->next)), *((tmp_list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $phys_ptr_cast(L#tmp_list, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_pure(tmp_list, *((tmp_list->next)))), ==(sll_lseg_reach(tmp_list, *((tmp_list->next))), @_vcc_oset_union(sll_lseg_reach(*((tmp_list->next)), *((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $phys_ptr_cast(L#tmp_list, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_pure(tmp_list, *((tmp_list->next)))), ==(sll_lseg_keys(tmp_list, *((tmp_list->next))), @_vcc_intset_union(sll_lseg_keys(*((tmp_list->next)), *((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $phys_ptr_cast(L#tmp_list, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_pure(tmp_list, *((tmp_list->next)))), ==(sll_lseg_len_next(tmp_list, *((tmp_list->next))), unchecked+(sll_lseg_len_next(*((tmp_list->next)), *((tmp_list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $phys_ptr_cast(L#tmp_list, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_pure(tmp_list, *((tmp_list->next)))), @_vcc_ptr_neq_pure(*((tmp_list->next)), *((tmp_list->next)))), ==(sll_lseg_max_key(tmp_list, *((tmp_list->next))), @\int_max(*((tmp_list->key)), sll_lseg_max_key(*((tmp_list->next)), *((tmp_list->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $phys_ptr_cast(L#tmp_list, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_pure(tmp_list, *((tmp_list->next)))), @_vcc_ptr_neq_pure(*((tmp_list->next)), *((tmp_list->next)))), ==(sll_lseg_min_key(tmp_list, *((tmp_list->next))), @\int_min(*((tmp_list->key)), sll_lseg_min_key(*((tmp_list->next)), *((tmp_list->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $phys_ptr_cast(L#tmp_list, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_pure(tmp_list, *((tmp_list->next)))), @_vcc_ptr_neq_pure(*((tmp_list->next)), *((tmp_list->next)))), ==(srtl_lseg(tmp_list, *((tmp_list->next))), &&(&&(srtl_lseg(*((tmp_list->next)), *((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_lseg_reach(*((tmp_list->next)), *((tmp_list->next)))))), <=(*((tmp_list->key)), sll_lseg_min_key(*((tmp_list->next)), *((tmp_list->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $phys_ptr_cast(L#tmp_list, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#tmp_list, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_pure(tmp_list, *((tmp_list->next)))), ==(srtl_lseg_reach(tmp_list, *((tmp_list->next))), @_vcc_oset_union(srtl_lseg_reach(*((tmp_list->next)), *((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $phys_ptr_cast(L#tmp_list, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assert @reads_check_normal((tmp_list->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#tmp_list, ^s_node));
            // tmp_list := *((tmp_list->next)); 
            L#tmp_list := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
            assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg(list, tmp_list), &&(sll_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), tmp_list)))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_reach(list, tmp_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_keys(list, tmp_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), tmp_list), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_len_next(list, tmp_list), unchecked+(sll_lseg_len_next(*((list->next)), tmp_list), 1))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_max_key(list, tmp_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), tmp_list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_min_key(list, tmp_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(srtl_lseg(list, tmp_list), &&(&&(srtl_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), tmp_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list))))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(srtl_lseg_reach(list, tmp_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        }
        else
        {
          anon6:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // goto #break_3; 
            goto #break_3;
        }

      #continue_3:
        assume true;
    }

  anon17:
    assume $full_stop_ext(#tok$3^22.2, $s);

  #break_3:
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // _math \state _dryad_S0#0; 
    // _dryad_S0#0 := @_vcc_current_state(@state); 
    _dryad_S0#0 := $current_state($s);
    // _math \state stmtexpr2#26; 
    // stmtexpr2#26 := _dryad_S0#0; 
    stmtexpr2#26 := _dryad_S0#0;
    // new_list := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
    call L#new_list := $alloc(^s_node);
    assume $full_stop_ext(#tok$3^41.13, $s);
    // assume !(@_vcc_oset_in(new_list, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
    // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(new_list)); 
    SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
    // _math \oset stmtexpr3#27; 
    // stmtexpr3#27 := _dryad_G1; 
    stmtexpr3#27 := SL#_dryad_G1;
    // assume ==(glob_reach(), _dryad_G1); 
    assume F#glob_reach() == SL#_dryad_G1;
    // _math \state _dryad_S1#1; 
    // _dryad_S1#1 := @_vcc_current_state(@state); 
    _dryad_S1#1 := $current_state($s);
    // _math \state stmtexpr4#28; 
    // stmtexpr4#28 := _dryad_S1#1; 
    stmtexpr4#28 := _dryad_S1#1;
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg(list, prev_list), &&(sll_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), prev_list)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_reach(list, prev_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_keys(list, prev_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), prev_list), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_len_next(list, prev_list), unchecked+(sll_lseg_len_next(*((list->next)), prev_list), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), 1);
    // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_max_key(list, prev_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), prev_list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_min_key(list, prev_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(srtl_lseg(list, prev_list), &&(&&(srtl_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), prev_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(srtl_lseg_reach(list, prev_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg(list, tmp_list), &&(sll_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), tmp_list)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_reach(list, tmp_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_keys(list, tmp_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), tmp_list), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_len_next(list, tmp_list), unchecked+(sll_lseg_len_next(*((list->next)), tmp_list), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), 1);
    // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_max_key(list, tmp_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), tmp_list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_min_key(list, tmp_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(srtl_lseg(list, tmp_list), &&(&&(srtl_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), tmp_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(srtl_lseg_reach(list, tmp_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(tmp_list)))), ==(old(_dryad_S0#0, sll_keys(tmp_list)), old(_dryad_S1#1, sll_keys(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_keys(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_keys(_dryad_S1#1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(tmp_list)))), ==(old(_dryad_S0#0, sll_list_len_next(tmp_list)), old(_dryad_S1#1, sll_list_len_next(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_list_len_next(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(_dryad_S1#1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, rsrtl_reach(tmp_list)))), ==(old(_dryad_S0#0, rsrtl(tmp_list)), old(_dryad_S1#1, rsrtl(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl(_dryad_S1#1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, rsrtl_reach(tmp_list)))), ==(old(_dryad_S0#0, rsrtl_reach(tmp_list)), old(_dryad_S1#1, rsrtl_reach(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl_reach(_dryad_S1#1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(tmp_list)))), ==(old(_dryad_S0#0, sll(tmp_list)), old(_dryad_S1#1, sll(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(_dryad_S1#1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(tmp_list)))), ==(old(_dryad_S0#0, sll_reach(tmp_list)), old(_dryad_S1#1, sll_reach(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(_dryad_S1#1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(tmp_list)))), ==(old(_dryad_S0#0, sll_max_key(tmp_list)), old(_dryad_S1#1, sll_max_key(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_max_key(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_max_key(_dryad_S1#1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(tmp_list)))), ==(old(_dryad_S0#0, sll_min_key(tmp_list)), old(_dryad_S1#1, sll_min_key(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_min_key(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_min_key(_dryad_S1#1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, srtl_reach(tmp_list)))), ==(old(_dryad_S0#0, srtl(tmp_list)), old(_dryad_S1#1, srtl(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl(_dryad_S1#1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, srtl_reach(tmp_list)))), ==(old(_dryad_S0#0, srtl_reach(tmp_list)), old(_dryad_S1#1, srtl_reach(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_reach(_dryad_S1#1, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(prev_list)))), ==(old(_dryad_S0#0, sll_keys(prev_list)), old(_dryad_S1#1, sll_keys(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_keys(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_keys(_dryad_S1#1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(prev_list)))), ==(old(_dryad_S0#0, sll_list_len_next(prev_list)), old(_dryad_S1#1, sll_list_len_next(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_list_len_next(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_list_len_next(_dryad_S1#1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, rsrtl_reach(prev_list)))), ==(old(_dryad_S0#0, rsrtl(prev_list)), old(_dryad_S1#1, rsrtl(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl(_dryad_S1#1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, rsrtl_reach(prev_list)))), ==(old(_dryad_S0#0, rsrtl_reach(prev_list)), old(_dryad_S1#1, rsrtl_reach(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl_reach(_dryad_S1#1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(prev_list)))), ==(old(_dryad_S0#0, sll(prev_list)), old(_dryad_S1#1, sll(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll(_dryad_S1#1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(prev_list)))), ==(old(_dryad_S0#0, sll_reach(prev_list)), old(_dryad_S1#1, sll_reach(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_reach(_dryad_S1#1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(prev_list)))), ==(old(_dryad_S0#0, sll_max_key(prev_list)), old(_dryad_S1#1, sll_max_key(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_max_key(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_max_key(_dryad_S1#1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(prev_list)))), ==(old(_dryad_S0#0, sll_min_key(prev_list)), old(_dryad_S1#1, sll_min_key(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_min_key(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_min_key(_dryad_S1#1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, srtl_reach(prev_list)))), ==(old(_dryad_S0#0, srtl(prev_list)), old(_dryad_S1#1, srtl(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl(_dryad_S1#1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, srtl_reach(prev_list)))), ==(old(_dryad_S0#0, srtl_reach(prev_list)), old(_dryad_S1#1, srtl_reach(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_reach(_dryad_S1#1, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(list)))), ==(old(_dryad_S0#0, sll_keys(list)), old(_dryad_S1#1, sll_keys(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_keys(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node)) == F#sll_keys(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(list)))), ==(old(_dryad_S0#0, sll_list_len_next(list)), old(_dryad_S1#1, sll_list_len_next(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, rsrtl_reach(list)))), ==(old(_dryad_S0#0, rsrtl(list)), old(_dryad_S1#1, rsrtl(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, rsrtl_reach(list)))), ==(old(_dryad_S0#0, rsrtl_reach(list)), old(_dryad_S1#1, rsrtl_reach(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl_reach(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(list)))), ==(old(_dryad_S0#0, sll(list)), old(_dryad_S1#1, sll(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node)) == F#sll(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(list)))), ==(old(_dryad_S0#0, sll_reach(list)), old(_dryad_S1#1, sll_reach(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(list)))), ==(old(_dryad_S0#0, sll_max_key(list)), old(_dryad_S1#1, sll_max_key(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_max_key(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node)) == F#sll_max_key(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_reach(list)))), ==(old(_dryad_S0#0, sll_min_key(list)), old(_dryad_S1#1, sll_min_key(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_min_key(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node)) == F#sll_min_key(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, srtl_reach(list)))), ==(old(_dryad_S0#0, srtl(list)), old(_dryad_S1#1, srtl(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node)) == F#srtl(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, srtl_reach(list)))), ==(old(_dryad_S0#0, srtl_reach(list)), old(_dryad_S1#1, srtl_reach(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node)) == F#srtl_reach(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S0#0, sll_lseg(list, prev_list)), old(_dryad_S1#1, sll_lseg(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S0#0, sll_lseg_reach(list, prev_list)), old(_dryad_S1#1, sll_lseg_reach(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_reach(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S0#0, sll_lseg_keys(list, prev_list)), old(_dryad_S1#1, sll_lseg_keys(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_keys(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_keys(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S0#0, sll_lseg_len_next(list, prev_list)), old(_dryad_S1#1, sll_lseg_len_next(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_len_next(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S0#0, sll_lseg_max_key(list, prev_list)), old(_dryad_S1#1, sll_lseg_max_key(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_max_key(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S0#0, sll_lseg_min_key(list, prev_list)), old(_dryad_S1#1, sll_lseg_min_key(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_min_key(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, srtl_lseg_reach(list, prev_list)))), ==(old(_dryad_S0#0, srtl_lseg(list, prev_list)), old(_dryad_S1#1, srtl_lseg(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_lseg(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_lseg(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, srtl_lseg_reach(list, prev_list)))), ==(old(_dryad_S0#0, srtl_lseg_reach(list, prev_list)), old(_dryad_S1#1, srtl_lseg_reach(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_lseg_reach(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S0#0, sll_lseg(list, tmp_list)), old(_dryad_S1#1, sll_lseg(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S0#0, sll_lseg_reach(list, tmp_list)), old(_dryad_S1#1, sll_lseg_reach(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_reach(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S0#0, sll_lseg_keys(list, tmp_list)), old(_dryad_S1#1, sll_lseg_keys(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_keys(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_keys(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S0#0, sll_lseg_len_next(list, tmp_list)), old(_dryad_S1#1, sll_lseg_len_next(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_len_next(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S0#0, sll_lseg_max_key(list, tmp_list)), old(_dryad_S1#1, sll_lseg_max_key(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_max_key(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S0#0, sll_lseg_min_key(list, tmp_list)), old(_dryad_S1#1, sll_lseg_min_key(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_min_key(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, srtl_lseg_reach(list, tmp_list)))), ==(old(_dryad_S0#0, srtl_lseg(list, tmp_list)), old(_dryad_S1#1, srtl_lseg(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_lseg(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_lseg(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S0#0, srtl_lseg_reach(list, tmp_list)))), ==(old(_dryad_S0#0, srtl_lseg_reach(list, tmp_list)), old(_dryad_S1#1, srtl_lseg_reach(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S0#0, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_lseg_reach(_dryad_S1#1, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume @_vcc_ptr_neq_null(new_list); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node));
    // _math \state _dryad_S2#2; 
    // _dryad_S2#2 := @_vcc_current_state(@state); 
    _dryad_S2#2 := $current_state($s);
    // _math \state stmtexpr5#29; 
    // stmtexpr5#29 := _dryad_S2#2; 
    stmtexpr5#29 := _dryad_S2#2;
    // assert @prim_writes_check((new_list->key)); 
    assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#new_list, ^s_node), s_node.key));
    // *(new_list->key) := data; 
    call $write_int(s_node.key, $phys_ptr_cast(L#new_list, ^s_node), P#data);
    assume $full_stop_ext(#tok$3^43.2, $s);
    // _math \state _dryad_S3#3; 
    // _dryad_S3#3 := @_vcc_current_state(@state); 
    _dryad_S3#3 := $current_state($s);
    // _math \state stmtexpr6#30; 
    // stmtexpr6#30 := _dryad_S3#3; 
    stmtexpr6#30 := _dryad_S3#3;
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(*((new_list->next)))))), ==(old(_dryad_S2#2, sll_keys(*((new_list->next)))), old(_dryad_S3#3, sll_keys(*((new_list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#sll_keys(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#sll_keys(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(*((new_list->next)))))), ==(old(_dryad_S2#2, sll_list_len_next(*((new_list->next)))), old(_dryad_S3#3, sll_list_len_next(*((new_list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, rsrtl_reach(*((new_list->next)))))), ==(old(_dryad_S2#2, rsrtl(*((new_list->next)))), old(_dryad_S3#3, rsrtl(*((new_list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#rsrtl(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#rsrtl(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, rsrtl_reach(*((new_list->next)))))), ==(old(_dryad_S2#2, rsrtl_reach(*((new_list->next)))), old(_dryad_S3#3, rsrtl_reach(*((new_list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#rsrtl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(*((new_list->next)))))), ==(old(_dryad_S2#2, sll(*((new_list->next)))), old(_dryad_S3#3, sll(*((new_list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#sll(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#sll(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(*((new_list->next)))))), ==(old(_dryad_S2#2, sll_reach(*((new_list->next)))), old(_dryad_S3#3, sll_reach(*((new_list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#sll_reach(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(*((new_list->next)))))), ==(old(_dryad_S2#2, sll_max_key(*((new_list->next)))), old(_dryad_S3#3, sll_max_key(*((new_list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#sll_max_key(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#sll_max_key(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(*((new_list->next)))))), ==(old(_dryad_S2#2, sll_min_key(*((new_list->next)))), old(_dryad_S3#3, sll_min_key(*((new_list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#sll_min_key(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#sll_min_key(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, srtl_reach(*((new_list->next)))))), ==(old(_dryad_S2#2, srtl(*((new_list->next)))), old(_dryad_S3#3, srtl(*((new_list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#srtl(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#srtl(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, srtl_reach(*((new_list->next)))))), ==(old(_dryad_S2#2, srtl_reach(*((new_list->next)))), old(_dryad_S3#3, srtl_reach(*((new_list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) ==> F#srtl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) == F#srtl_reach(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node));
    // assume ==(old(_dryad_S2#2, sll_list_len_next(tmp_list)), old(_dryad_S3#3, sll_list_len_next(tmp_list))); 
    assume F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==(old(_dryad_S2#2, rsrtl_reach(tmp_list)), old(_dryad_S3#3, rsrtl_reach(tmp_list))); 
    assume F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==(old(_dryad_S2#2, sll(tmp_list)), old(_dryad_S3#3, sll(tmp_list))); 
    assume F#sll(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==(old(_dryad_S2#2, sll_reach(tmp_list)), old(_dryad_S3#3, sll_reach(tmp_list))); 
    assume F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==(old(_dryad_S2#2, srtl_reach(tmp_list)), old(_dryad_S3#3, srtl_reach(tmp_list))); 
    assume F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==(old(_dryad_S2#2, sll_list_len_next(prev_list)), old(_dryad_S3#3, sll_list_len_next(prev_list))); 
    assume F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==(old(_dryad_S2#2, rsrtl_reach(prev_list)), old(_dryad_S3#3, rsrtl_reach(prev_list))); 
    assume F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==(old(_dryad_S2#2, sll(prev_list)), old(_dryad_S3#3, sll(prev_list))); 
    assume F#sll(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==(old(_dryad_S2#2, sll_reach(prev_list)), old(_dryad_S3#3, sll_reach(prev_list))); 
    assume F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==(old(_dryad_S2#2, srtl_reach(prev_list)), old(_dryad_S3#3, srtl_reach(prev_list))); 
    assume F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==(old(_dryad_S2#2, sll_list_len_next(new_list)), old(_dryad_S3#3, sll_list_len_next(new_list))); 
    assume F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#new_list, ^s_node));
    // assume ==(old(_dryad_S2#2, rsrtl_reach(new_list)), old(_dryad_S3#3, rsrtl_reach(new_list))); 
    assume F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#new_list, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(L#new_list, ^s_node));
    // assume ==(old(_dryad_S2#2, sll(new_list)), old(_dryad_S3#3, sll(new_list))); 
    assume F#sll(_dryad_S2#2, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#new_list, ^s_node));
    // assume ==(old(_dryad_S2#2, sll_reach(new_list)), old(_dryad_S3#3, sll_reach(new_list))); 
    assume F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#new_list, ^s_node));
    // assume ==(old(_dryad_S2#2, srtl_reach(new_list)), old(_dryad_S3#3, srtl_reach(new_list))); 
    assume F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#new_list, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(L#new_list, ^s_node));
    // assume ==(old(_dryad_S2#2, sll_list_len_next(list)), old(_dryad_S3#3, sll_list_len_next(list))); 
    assume F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==(old(_dryad_S2#2, rsrtl_reach(list)), old(_dryad_S3#3, rsrtl_reach(list))); 
    assume F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==(old(_dryad_S2#2, sll(list)), old(_dryad_S3#3, sll(list))); 
    assume F#sll(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==(old(_dryad_S2#2, sll_reach(list)), old(_dryad_S3#3, sll_reach(list))); 
    assume F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==(old(_dryad_S2#2, srtl_reach(list)), old(_dryad_S3#3, srtl_reach(list))); 
    assume F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(tmp_list)))), ==(old(_dryad_S2#2, sll_keys(tmp_list)), old(_dryad_S3#3, sll_keys(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_keys(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_keys(_dryad_S3#3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(tmp_list)))), ==(old(_dryad_S2#2, sll_list_len_next(tmp_list)), old(_dryad_S3#3, sll_list_len_next(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, rsrtl_reach(tmp_list)))), ==(old(_dryad_S2#2, rsrtl(tmp_list)), old(_dryad_S3#3, rsrtl(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl(_dryad_S3#3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, rsrtl_reach(tmp_list)))), ==(old(_dryad_S2#2, rsrtl_reach(tmp_list)), old(_dryad_S3#3, rsrtl_reach(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(tmp_list)))), ==(old(_dryad_S2#2, sll(tmp_list)), old(_dryad_S3#3, sll(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(tmp_list)))), ==(old(_dryad_S2#2, sll_reach(tmp_list)), old(_dryad_S3#3, sll_reach(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(tmp_list)))), ==(old(_dryad_S2#2, sll_max_key(tmp_list)), old(_dryad_S3#3, sll_max_key(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_max_key(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_max_key(_dryad_S3#3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(tmp_list)))), ==(old(_dryad_S2#2, sll_min_key(tmp_list)), old(_dryad_S3#3, sll_min_key(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_min_key(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_min_key(_dryad_S3#3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, srtl_reach(tmp_list)))), ==(old(_dryad_S2#2, srtl(tmp_list)), old(_dryad_S3#3, srtl(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl(_dryad_S3#3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, srtl_reach(tmp_list)))), ==(old(_dryad_S2#2, srtl_reach(tmp_list)), old(_dryad_S3#3, srtl_reach(tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(prev_list)))), ==(old(_dryad_S2#2, sll_keys(prev_list)), old(_dryad_S3#3, sll_keys(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_keys(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_keys(_dryad_S3#3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(prev_list)))), ==(old(_dryad_S2#2, sll_list_len_next(prev_list)), old(_dryad_S3#3, sll_list_len_next(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, rsrtl_reach(prev_list)))), ==(old(_dryad_S2#2, rsrtl(prev_list)), old(_dryad_S3#3, rsrtl(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl(_dryad_S3#3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, rsrtl_reach(prev_list)))), ==(old(_dryad_S2#2, rsrtl_reach(prev_list)), old(_dryad_S3#3, rsrtl_reach(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(prev_list)))), ==(old(_dryad_S2#2, sll(prev_list)), old(_dryad_S3#3, sll(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(prev_list)))), ==(old(_dryad_S2#2, sll_reach(prev_list)), old(_dryad_S3#3, sll_reach(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(prev_list)))), ==(old(_dryad_S2#2, sll_max_key(prev_list)), old(_dryad_S3#3, sll_max_key(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_max_key(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_max_key(_dryad_S3#3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(prev_list)))), ==(old(_dryad_S2#2, sll_min_key(prev_list)), old(_dryad_S3#3, sll_min_key(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_min_key(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_min_key(_dryad_S3#3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, srtl_reach(prev_list)))), ==(old(_dryad_S2#2, srtl(prev_list)), old(_dryad_S3#3, srtl(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl(_dryad_S3#3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, srtl_reach(prev_list)))), ==(old(_dryad_S2#2, srtl_reach(prev_list)), old(_dryad_S3#3, srtl_reach(prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(list)))), ==(old(_dryad_S2#2, sll_keys(list)), old(_dryad_S3#3, sll_keys(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_keys(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_keys(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(list)))), ==(old(_dryad_S2#2, sll_list_len_next(list)), old(_dryad_S3#3, sll_list_len_next(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, rsrtl_reach(list)))), ==(old(_dryad_S2#2, rsrtl(list)), old(_dryad_S3#3, rsrtl(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, rsrtl_reach(list)))), ==(old(_dryad_S2#2, rsrtl_reach(list)), old(_dryad_S3#3, rsrtl_reach(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(list)))), ==(old(_dryad_S2#2, sll(list)), old(_dryad_S3#3, sll(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(list)))), ==(old(_dryad_S2#2, sll_reach(list)), old(_dryad_S3#3, sll_reach(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(list)))), ==(old(_dryad_S2#2, sll_max_key(list)), old(_dryad_S3#3, sll_max_key(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_max_key(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_max_key(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_reach(list)))), ==(old(_dryad_S2#2, sll_min_key(list)), old(_dryad_S3#3, sll_min_key(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_min_key(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node)) == F#sll_min_key(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, srtl_reach(list)))), ==(old(_dryad_S2#2, srtl(list)), old(_dryad_S3#3, srtl(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node)) == F#srtl(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, srtl_reach(list)))), ==(old(_dryad_S2#2, srtl_reach(list)), old(_dryad_S3#3, srtl_reach(list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S2#2, sll_lseg(list, prev_list)), old(_dryad_S3#3, sll_lseg(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S2#2, sll_lseg_reach(list, prev_list)), old(_dryad_S3#3, sll_lseg_reach(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_reach(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S2#2, sll_lseg_keys(list, prev_list)), old(_dryad_S3#3, sll_lseg_keys(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_keys(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_keys(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S2#2, sll_lseg_len_next(list, prev_list)), old(_dryad_S3#3, sll_lseg_len_next(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_len_next(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S2#2, sll_lseg_max_key(list, prev_list)), old(_dryad_S3#3, sll_lseg_max_key(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_max_key(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S2#2, sll_lseg_min_key(list, prev_list)), old(_dryad_S3#3, sll_lseg_min_key(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_min_key(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, srtl_lseg_reach(list, prev_list)))), ==(old(_dryad_S2#2, srtl_lseg(list, prev_list)), old(_dryad_S3#3, srtl_lseg(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_lseg(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_lseg(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, srtl_lseg_reach(list, prev_list)))), ==(old(_dryad_S2#2, srtl_lseg_reach(list, prev_list)), old(_dryad_S3#3, srtl_lseg_reach(list, prev_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_lseg_reach(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S2#2, sll_lseg(list, tmp_list)), old(_dryad_S3#3, sll_lseg(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S2#2, sll_lseg_reach(list, tmp_list)), old(_dryad_S3#3, sll_lseg_reach(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_reach(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S2#2, sll_lseg_keys(list, tmp_list)), old(_dryad_S3#3, sll_lseg_keys(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_keys(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_keys(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S2#2, sll_lseg_len_next(list, tmp_list)), old(_dryad_S3#3, sll_lseg_len_next(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_len_next(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S2#2, sll_lseg_max_key(list, tmp_list)), old(_dryad_S3#3, sll_lseg_max_key(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_max_key(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S2#2, sll_lseg_min_key(list, tmp_list)), old(_dryad_S3#3, sll_lseg_min_key(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_min_key(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, srtl_lseg_reach(list, tmp_list)))), ==(old(_dryad_S2#2, srtl_lseg(list, tmp_list)), old(_dryad_S3#3, srtl_lseg(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_lseg(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_lseg(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S2#2, srtl_lseg_reach(list, tmp_list)))), ==(old(_dryad_S2#2, srtl_lseg_reach(list, tmp_list)), old(_dryad_S3#3, srtl_lseg_reach(list, tmp_list)))); 
    assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S2#2, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_lseg_reach(_dryad_S3#3, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), ==(*((tmp_list->key)), old(_dryad_S2#2, *((tmp_list->key))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) == $rd_inv(_dryad_S2#2, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), @_vcc_ptr_eq_pure(*((tmp_list->next)), old(_dryad_S2#2, *((tmp_list->next))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), ==(*((prev_list->key)), old(_dryad_S2#2, *((prev_list->key))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) == $rd_inv(_dryad_S2#2, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), @_vcc_ptr_eq_pure(*((prev_list->next)), old(_dryad_S2#2, *((prev_list->next))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), ==(*((list->key)), old(_dryad_S2#2, *((list->key))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) == $rd_inv(_dryad_S2#2, s_node.key, $phys_ptr_cast(P#list, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S2#2, *((list->next))))); 
    assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
    assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
    assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
    assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg(list, prev_list), &&(sll_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), prev_list)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_reach(list, prev_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_keys(list, prev_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), prev_list), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_len_next(list, prev_list), unchecked+(sll_lseg_len_next(*((list->next)), prev_list), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), 1);
    // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_max_key(list, prev_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), prev_list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_min_key(list, prev_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(srtl_lseg(list, prev_list), &&(&&(srtl_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), prev_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(srtl_lseg_reach(list, prev_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg(list, tmp_list), &&(sll_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), tmp_list)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_reach(list, tmp_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_keys(list, tmp_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), tmp_list), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_len_next(list, tmp_list), unchecked+(sll_lseg_len_next(*((list->next)), tmp_list), 1))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), 1);
    // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_max_key(list, tmp_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), tmp_list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_min_key(list, tmp_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(srtl_lseg(list, tmp_list), &&(&&(srtl_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), tmp_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list))))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(srtl_lseg_reach(list, tmp_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
    // _Bool ite#2; 
    // assert @reads_check_normal((tmp_list->next)); 
    assert $thread_local($s, $phys_ptr_cast(L#tmp_list, ^s_node));
    assume true;
    // if (@_vcc_ptr_eq_null(*((tmp_list->next)))) ...
    if ($is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)))
    {
      anon9:
        // assert @_vcc_possibly_unreachable; 
        assert {:PossiblyUnreachable true} true;
        // assert @reads_check_normal((tmp_list->key)); 
        assert $thread_local($s, $phys_ptr_cast(L#tmp_list, ^s_node));
        // ite#2 := >=(data, *((tmp_list->key))); 
        ite#2 := P#data >= $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node));
    }
    else
    {
      anon10:
        // assert @_vcc_possibly_unreachable; 
        assert {:PossiblyUnreachable true} true;
        // ite#2 := false; 
        ite#2 := false;
    }

  anon18:
    assume true;
    // if (ite#2) ...
    if (ite#2)
    {
      anon11:
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg(list, prev_list), &&(sll_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), prev_list)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_reach(list, prev_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_keys(list, prev_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), prev_list), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_len_next(list, prev_list), unchecked+(sll_lseg_len_next(*((list->next)), prev_list), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_max_key(list, prev_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), prev_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_min_key(list, prev_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(srtl_lseg(list, prev_list), &&(&&(srtl_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), prev_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(srtl_lseg_reach(list, prev_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg(list, tmp_list), &&(sll_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), tmp_list)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_reach(list, tmp_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_keys(list, tmp_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), tmp_list), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_len_next(list, tmp_list), unchecked+(sll_lseg_len_next(*((list->next)), tmp_list), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_max_key(list, tmp_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), tmp_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_min_key(list, tmp_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(srtl_lseg(list, tmp_list), &&(&&(srtl_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), tmp_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(srtl_lseg_reach(list, tmp_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // _math \state _dryad_S4#4; 
        // _dryad_S4#4 := @_vcc_current_state(@state); 
        _dryad_S4#4 := $current_state($s);
        // _math \state stmtexpr0#12; 
        // stmtexpr0#12 := _dryad_S4#4; 
        stmtexpr0#12 := _dryad_S4#4;
        // assert @prim_writes_check((tmp_list->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#tmp_list, ^s_node), s_node.next));
        // *(tmp_list->next) := new_list; 
        call $write_int(s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), $ptr_to_int($phys_ptr_cast(L#new_list, ^s_node)));
        assume $full_stop_ext(#tok$3^45.3, $s);
        // _math \state _dryad_S5#5; 
        // _dryad_S5#5 := @_vcc_current_state(@state); 
        _dryad_S5#5 := $current_state($s);
        // _math \state stmtexpr1#13; 
        // stmtexpr1#13 := _dryad_S5#5; 
        stmtexpr1#13 := _dryad_S5#5;
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(prev_list)))), ==(old(_dryad_S4#4, sll_keys(prev_list)), old(_dryad_S5#5, sll_keys(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_keys(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_keys(_dryad_S5#5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(prev_list)))), ==(old(_dryad_S4#4, sll_list_len_next(prev_list)), old(_dryad_S5#5, sll_list_len_next(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_list_len_next(_dryad_S5#5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, rsrtl_reach(prev_list)))), ==(old(_dryad_S4#4, rsrtl(prev_list)), old(_dryad_S5#5, rsrtl(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl(_dryad_S5#5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, rsrtl_reach(prev_list)))), ==(old(_dryad_S4#4, rsrtl_reach(prev_list)), old(_dryad_S5#5, rsrtl_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl_reach(_dryad_S5#5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(prev_list)))), ==(old(_dryad_S4#4, sll(prev_list)), old(_dryad_S5#5, sll(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll(_dryad_S5#5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(prev_list)))), ==(old(_dryad_S4#4, sll_reach(prev_list)), old(_dryad_S5#5, sll_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_reach(_dryad_S5#5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(prev_list)))), ==(old(_dryad_S4#4, sll_max_key(prev_list)), old(_dryad_S5#5, sll_max_key(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_max_key(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_max_key(_dryad_S5#5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(prev_list)))), ==(old(_dryad_S4#4, sll_min_key(prev_list)), old(_dryad_S5#5, sll_min_key(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_min_key(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_min_key(_dryad_S5#5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, srtl_reach(prev_list)))), ==(old(_dryad_S4#4, srtl(prev_list)), old(_dryad_S5#5, srtl(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl(_dryad_S5#5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, srtl_reach(prev_list)))), ==(old(_dryad_S4#4, srtl_reach(prev_list)), old(_dryad_S5#5, srtl_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_reach(_dryad_S5#5, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(new_list)))), ==(old(_dryad_S4#4, sll_keys(new_list)), old(_dryad_S5#5, sll_keys(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#sll_keys(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_keys(_dryad_S5#5, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(new_list)))), ==(old(_dryad_S4#4, sll_list_len_next(new_list)), old(_dryad_S5#5, sll_list_len_next(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_list_len_next(_dryad_S5#5, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, rsrtl_reach(new_list)))), ==(old(_dryad_S4#4, rsrtl(new_list)), old(_dryad_S5#5, rsrtl(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#rsrtl(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node)) == F#rsrtl(_dryad_S5#5, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, rsrtl_reach(new_list)))), ==(old(_dryad_S4#4, rsrtl_reach(new_list)), old(_dryad_S5#5, rsrtl_reach(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node)) == F#rsrtl_reach(_dryad_S5#5, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(new_list)))), ==(old(_dryad_S4#4, sll(new_list)), old(_dryad_S5#5, sll(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#sll(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll(_dryad_S5#5, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(new_list)))), ==(old(_dryad_S4#4, sll_reach(new_list)), old(_dryad_S5#5, sll_reach(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_reach(_dryad_S5#5, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(new_list)))), ==(old(_dryad_S4#4, sll_max_key(new_list)), old(_dryad_S5#5, sll_max_key(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#sll_max_key(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_max_key(_dryad_S5#5, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(new_list)))), ==(old(_dryad_S4#4, sll_min_key(new_list)), old(_dryad_S5#5, sll_min_key(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#sll_min_key(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_min_key(_dryad_S5#5, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, srtl_reach(new_list)))), ==(old(_dryad_S4#4, srtl(new_list)), old(_dryad_S5#5, srtl(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#srtl(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node)) == F#srtl(_dryad_S5#5, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, srtl_reach(new_list)))), ==(old(_dryad_S4#4, srtl_reach(new_list)), old(_dryad_S5#5, srtl_reach(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(L#new_list, ^s_node)) == F#srtl_reach(_dryad_S5#5, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(list)))), ==(old(_dryad_S4#4, sll_keys(list)), old(_dryad_S5#5, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_keys(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node)) == F#sll_keys(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(list)))), ==(old(_dryad_S4#4, sll_list_len_next(list)), old(_dryad_S5#5, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, rsrtl_reach(list)))), ==(old(_dryad_S4#4, rsrtl(list)), old(_dryad_S5#5, rsrtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, rsrtl_reach(list)))), ==(old(_dryad_S4#4, rsrtl_reach(list)), old(_dryad_S5#5, rsrtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl_reach(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(list)))), ==(old(_dryad_S4#4, sll(list)), old(_dryad_S5#5, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node)) == F#sll(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(list)))), ==(old(_dryad_S4#4, sll_reach(list)), old(_dryad_S5#5, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(list)))), ==(old(_dryad_S4#4, sll_max_key(list)), old(_dryad_S5#5, sll_max_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_max_key(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node)) == F#sll_max_key(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_reach(list)))), ==(old(_dryad_S4#4, sll_min_key(list)), old(_dryad_S5#5, sll_min_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_min_key(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node)) == F#sll_min_key(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, srtl_reach(list)))), ==(old(_dryad_S4#4, srtl(list)), old(_dryad_S5#5, srtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node)) == F#srtl(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, srtl_reach(list)))), ==(old(_dryad_S4#4, srtl_reach(list)), old(_dryad_S5#5, srtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node)) == F#srtl_reach(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#4, sll_lseg(list, prev_list)), old(_dryad_S5#5, sll_lseg(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#4, sll_lseg_reach(list, prev_list)), old(_dryad_S5#5, sll_lseg_reach(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_reach(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#4, sll_lseg_keys(list, prev_list)), old(_dryad_S5#5, sll_lseg_keys(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_keys(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#4, sll_lseg_len_next(list, prev_list)), old(_dryad_S5#5, sll_lseg_len_next(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#4, sll_lseg_max_key(list, prev_list)), old(_dryad_S5#5, sll_lseg_max_key(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_max_key(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#4, sll_lseg_min_key(list, prev_list)), old(_dryad_S5#5, sll_lseg_min_key(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_min_key(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, srtl_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#4, srtl_lseg(list, prev_list)), old(_dryad_S5#5, srtl_lseg(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_lseg(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_lseg(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, srtl_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#4, srtl_lseg_reach(list, prev_list)), old(_dryad_S5#5, srtl_lseg_reach(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_lseg_reach(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#4, sll_lseg(list, tmp_list)), old(_dryad_S5#5, sll_lseg(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#4, sll_lseg_reach(list, tmp_list)), old(_dryad_S5#5, sll_lseg_reach(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_reach(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#4, sll_lseg_keys(list, tmp_list)), old(_dryad_S5#5, sll_lseg_keys(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_keys(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#4, sll_lseg_len_next(list, tmp_list)), old(_dryad_S5#5, sll_lseg_len_next(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#4, sll_lseg_max_key(list, tmp_list)), old(_dryad_S5#5, sll_lseg_max_key(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_max_key(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#4, sll_lseg_min_key(list, tmp_list)), old(_dryad_S5#5, sll_lseg_min_key(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_min_key(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, srtl_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#4, srtl_lseg(list, tmp_list)), old(_dryad_S5#5, srtl_lseg(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_lseg(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_lseg(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(tmp_list, old(_dryad_S4#4, srtl_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#4, srtl_lseg_reach(list, tmp_list)), old(_dryad_S5#5, srtl_lseg_reach(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S4#4, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_lseg_reach(_dryad_S5#5, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(tmp_list, prev_list)), ==(*((prev_list->key)), old(_dryad_S4#4, *((prev_list->key))))); 
        assume !($phys_ptr_cast(L#tmp_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) == $rd_inv(_dryad_S4#4, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(tmp_list, prev_list)), @_vcc_ptr_eq_pure(*((prev_list->next)), old(_dryad_S4#4, *((prev_list->next))))); 
        assume !($phys_ptr_cast(L#tmp_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#4, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(tmp_list, new_list)), ==(*((new_list->key)), old(_dryad_S4#4, *((new_list->key))))); 
        assume !($phys_ptr_cast(L#tmp_list, ^s_node) == $phys_ptr_cast(L#new_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) == $rd_inv(_dryad_S4#4, s_node.key, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(tmp_list, new_list)), @_vcc_ptr_eq_pure(*((new_list->next)), old(_dryad_S4#4, *((new_list->next))))); 
        assume !($phys_ptr_cast(L#tmp_list, ^s_node) == $phys_ptr_cast(L#new_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#4, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(tmp_list, list)), ==(*((list->key)), old(_dryad_S4#4, *((list->key))))); 
        assume !($phys_ptr_cast(L#tmp_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) == $rd_inv(_dryad_S4#4, s_node.key, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(tmp_list, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S4#4, *((list->next))))); 
        assume !($phys_ptr_cast(L#tmp_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#4, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg(list, prev_list), &&(sll_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), prev_list)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_reach(list, prev_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_keys(list, prev_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), prev_list), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_len_next(list, prev_list), unchecked+(sll_lseg_len_next(*((list->next)), prev_list), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_max_key(list, prev_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), prev_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_min_key(list, prev_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(srtl_lseg(list, prev_list), &&(&&(srtl_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), prev_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(srtl_lseg_reach(list, prev_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // _math \state _dryad_S6; 
        // _dryad_S6 := @_vcc_current_state(@state); 
        SL#_dryad_S6 := $current_state($s);
        // _math \state stmtexpr2#14; 
        // stmtexpr2#14 := _dryad_S6; 
        stmtexpr2#14 := SL#_dryad_S6;
        // assert @prim_writes_check((new_list->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#new_list, ^s_node), s_node.next));
        // *(new_list->next) := (struct s_node*)@null; 
        call $write_int(s_node.next, $phys_ptr_cast(L#new_list, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
        assume $full_stop_ext(#tok$3^46.3, $s);
        // _math \state _dryad_S7; 
        // _dryad_S7 := @_vcc_current_state(@state); 
        SL#_dryad_S7 := $current_state($s);
        // _math \state stmtexpr3#15; 
        // stmtexpr3#15 := _dryad_S7; 
        stmtexpr3#15 := SL#_dryad_S7;
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(tmp_list)))), ==(old(_dryad_S6, sll_keys(tmp_list)), old(_dryad_S7, sll_keys(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(tmp_list)))), ==(old(_dryad_S6, sll_list_len_next(tmp_list)), old(_dryad_S7, sll_list_len_next(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, rsrtl_reach(tmp_list)))), ==(old(_dryad_S6, rsrtl(tmp_list)), old(_dryad_S7, rsrtl(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, rsrtl_reach(tmp_list)))), ==(old(_dryad_S6, rsrtl_reach(tmp_list)), old(_dryad_S7, rsrtl_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(tmp_list)))), ==(old(_dryad_S6, sll(tmp_list)), old(_dryad_S7, sll(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(tmp_list)))), ==(old(_dryad_S6, sll_reach(tmp_list)), old(_dryad_S7, sll_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(tmp_list)))), ==(old(_dryad_S6, sll_max_key(tmp_list)), old(_dryad_S7, sll_max_key(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(tmp_list)))), ==(old(_dryad_S6, sll_min_key(tmp_list)), old(_dryad_S7, sll_min_key(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, srtl_reach(tmp_list)))), ==(old(_dryad_S6, srtl(tmp_list)), old(_dryad_S7, srtl(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, srtl_reach(tmp_list)))), ==(old(_dryad_S6, srtl_reach(tmp_list)), old(_dryad_S7, srtl_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(prev_list)))), ==(old(_dryad_S6, sll_keys(prev_list)), old(_dryad_S7, sll_keys(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(prev_list)))), ==(old(_dryad_S6, sll_list_len_next(prev_list)), old(_dryad_S7, sll_list_len_next(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, rsrtl_reach(prev_list)))), ==(old(_dryad_S6, rsrtl(prev_list)), old(_dryad_S7, rsrtl(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, rsrtl_reach(prev_list)))), ==(old(_dryad_S6, rsrtl_reach(prev_list)), old(_dryad_S7, rsrtl_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(prev_list)))), ==(old(_dryad_S6, sll(prev_list)), old(_dryad_S7, sll(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(prev_list)))), ==(old(_dryad_S6, sll_reach(prev_list)), old(_dryad_S7, sll_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(prev_list)))), ==(old(_dryad_S6, sll_max_key(prev_list)), old(_dryad_S7, sll_max_key(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(prev_list)))), ==(old(_dryad_S6, sll_min_key(prev_list)), old(_dryad_S7, sll_min_key(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, srtl_reach(prev_list)))), ==(old(_dryad_S6, srtl(prev_list)), old(_dryad_S7, srtl(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, srtl_reach(prev_list)))), ==(old(_dryad_S6, srtl_reach(prev_list)), old(_dryad_S7, srtl_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_keys(list)), old(_dryad_S7, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_list_len_next(list)), old(_dryad_S7, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, rsrtl_reach(list)))), ==(old(_dryad_S6, rsrtl(list)), old(_dryad_S7, rsrtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, rsrtl_reach(list)))), ==(old(_dryad_S6, rsrtl_reach(list)), old(_dryad_S7, rsrtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll(list)), old(_dryad_S7, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_reach(list)), old(_dryad_S7, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_max_key(list)), old(_dryad_S7, sll_max_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_min_key(list)), old(_dryad_S7, sll_min_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, srtl_reach(list)))), ==(old(_dryad_S6, srtl(list)), old(_dryad_S7, srtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, srtl_reach(list)))), ==(old(_dryad_S6, srtl_reach(list)), old(_dryad_S7, srtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6, sll_lseg(list, prev_list)), old(_dryad_S7, sll_lseg(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6, sll_lseg_reach(list, prev_list)), old(_dryad_S7, sll_lseg_reach(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6, sll_lseg_keys(list, prev_list)), old(_dryad_S7, sll_lseg_keys(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6, sll_lseg_len_next(list, prev_list)), old(_dryad_S7, sll_lseg_len_next(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6, sll_lseg_max_key(list, prev_list)), old(_dryad_S7, sll_lseg_max_key(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6, sll_lseg_min_key(list, prev_list)), old(_dryad_S7, sll_lseg_min_key(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, srtl_lseg_reach(list, prev_list)))), ==(old(_dryad_S6, srtl_lseg(list, prev_list)), old(_dryad_S7, srtl_lseg(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, srtl_lseg_reach(list, prev_list)))), ==(old(_dryad_S6, srtl_lseg_reach(list, prev_list)), old(_dryad_S7, srtl_lseg_reach(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6, sll_lseg(list, tmp_list)), old(_dryad_S7, sll_lseg(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6, sll_lseg_reach(list, tmp_list)), old(_dryad_S7, sll_lseg_reach(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6, sll_lseg_keys(list, tmp_list)), old(_dryad_S7, sll_lseg_keys(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6, sll_lseg_len_next(list, tmp_list)), old(_dryad_S7, sll_lseg_len_next(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6, sll_lseg_max_key(list, tmp_list)), old(_dryad_S7, sll_lseg_max_key(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6, sll_lseg_min_key(list, tmp_list)), old(_dryad_S7, sll_lseg_min_key(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, srtl_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6, srtl_lseg(list, tmp_list)), old(_dryad_S7, srtl_lseg(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S6, srtl_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6, srtl_lseg_reach(list, tmp_list)), old(_dryad_S7, srtl_lseg_reach(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), ==(*((tmp_list->key)), old(_dryad_S6, *((tmp_list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), @_vcc_ptr_eq_pure(*((tmp_list->next)), old(_dryad_S6, *((tmp_list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), ==(*((prev_list->key)), old(_dryad_S6, *((prev_list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), @_vcc_ptr_eq_pure(*((prev_list->next)), old(_dryad_S6, *((prev_list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), ==(*((list->key)), old(_dryad_S6, *((list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6, *((list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg(list, prev_list), &&(sll_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), prev_list)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_reach(list, prev_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_keys(list, prev_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), prev_list), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_len_next(list, prev_list), unchecked+(sll_lseg_len_next(*((list->next)), prev_list), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_max_key(list, prev_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), prev_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_min_key(list, prev_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(srtl_lseg(list, prev_list), &&(&&(srtl_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), prev_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(srtl_lseg_reach(list, prev_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg(list, tmp_list), &&(sll_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), tmp_list)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_reach(list, tmp_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_keys(list, tmp_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), tmp_list), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_len_next(list, tmp_list), unchecked+(sll_lseg_len_next(*((list->next)), tmp_list), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_max_key(list, tmp_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), tmp_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_min_key(list, tmp_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(srtl_lseg(list, tmp_list), &&(&&(srtl_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), tmp_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(srtl_lseg_reach(list, tmp_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // return list; 
        $result := $phys_ptr_cast(P#list, ^s_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon12:
        // assert @_vcc_possibly_unreachable; 
        assert {:PossiblyUnreachable true} true;
    }

  anon19:
    assume true;
    // if (@_vcc_ptr_neq_null(prev_list)) ...
    if ($non_null($phys_ptr_cast(L#prev_list, ^s_node)))
    {
      anon13:
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg(list, prev_list), &&(sll_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), prev_list)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_reach(list, prev_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_keys(list, prev_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), prev_list), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_len_next(list, prev_list), unchecked+(sll_lseg_len_next(*((list->next)), prev_list), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_max_key(list, prev_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), prev_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_min_key(list, prev_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(srtl_lseg(list, prev_list), &&(&&(srtl_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), prev_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(srtl_lseg_reach(list, prev_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg(list, tmp_list), &&(sll_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), tmp_list)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_reach(list, tmp_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_keys(list, tmp_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), tmp_list), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_len_next(list, tmp_list), unchecked+(sll_lseg_len_next(*((list->next)), tmp_list), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_max_key(list, tmp_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), tmp_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_min_key(list, tmp_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(srtl_lseg(list, tmp_list), &&(&&(srtl_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), tmp_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(srtl_lseg_reach(list, tmp_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // _math \state _dryad_S4#6; 
        // _dryad_S4#6 := @_vcc_current_state(@state); 
        _dryad_S4#6 := $current_state($s);
        // _math \state stmtexpr0#16; 
        // stmtexpr0#16 := _dryad_S4#6; 
        stmtexpr0#16 := _dryad_S4#6;
        // assert @prim_writes_check((new_list->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#new_list, ^s_node), s_node.next));
        // *(new_list->next) := (struct s_node*)@null; 
        call $write_int(s_node.next, $phys_ptr_cast(L#new_list, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
        assume $full_stop_ext(#tok$3^51.3, $s);
        // _math \state _dryad_S5#7; 
        // _dryad_S5#7 := @_vcc_current_state(@state); 
        _dryad_S5#7 := $current_state($s);
        // _math \state stmtexpr1#17; 
        // stmtexpr1#17 := _dryad_S5#7; 
        stmtexpr1#17 := _dryad_S5#7;
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(tmp_list)))), ==(old(_dryad_S4#6, sll_keys(tmp_list)), old(_dryad_S5#7, sll_keys(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_keys(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_keys(_dryad_S5#7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(tmp_list)))), ==(old(_dryad_S4#6, sll_list_len_next(tmp_list)), old(_dryad_S5#7, sll_list_len_next(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(_dryad_S5#7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, rsrtl_reach(tmp_list)))), ==(old(_dryad_S4#6, rsrtl(tmp_list)), old(_dryad_S5#7, rsrtl(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl(_dryad_S5#7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, rsrtl_reach(tmp_list)))), ==(old(_dryad_S4#6, rsrtl_reach(tmp_list)), old(_dryad_S5#7, rsrtl_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl_reach(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl_reach(_dryad_S5#7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(tmp_list)))), ==(old(_dryad_S4#6, sll(tmp_list)), old(_dryad_S5#7, sll(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(_dryad_S5#7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(tmp_list)))), ==(old(_dryad_S4#6, sll_reach(tmp_list)), old(_dryad_S5#7, sll_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_reach(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(_dryad_S5#7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(tmp_list)))), ==(old(_dryad_S4#6, sll_max_key(tmp_list)), old(_dryad_S5#7, sll_max_key(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_max_key(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_max_key(_dryad_S5#7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(tmp_list)))), ==(old(_dryad_S4#6, sll_min_key(tmp_list)), old(_dryad_S5#7, sll_min_key(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_min_key(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_min_key(_dryad_S5#7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, srtl_reach(tmp_list)))), ==(old(_dryad_S4#6, srtl(tmp_list)), old(_dryad_S5#7, srtl(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl(_dryad_S5#7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, srtl_reach(tmp_list)))), ==(old(_dryad_S4#6, srtl_reach(tmp_list)), old(_dryad_S5#7, srtl_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_reach(_dryad_S4#6, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_reach(_dryad_S5#7, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(prev_list)))), ==(old(_dryad_S4#6, sll_keys(prev_list)), old(_dryad_S5#7, sll_keys(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_keys(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_keys(_dryad_S5#7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(prev_list)))), ==(old(_dryad_S4#6, sll_list_len_next(prev_list)), old(_dryad_S5#7, sll_list_len_next(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_list_len_next(_dryad_S5#7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, rsrtl_reach(prev_list)))), ==(old(_dryad_S4#6, rsrtl(prev_list)), old(_dryad_S5#7, rsrtl(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl(_dryad_S5#7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, rsrtl_reach(prev_list)))), ==(old(_dryad_S4#6, rsrtl_reach(prev_list)), old(_dryad_S5#7, rsrtl_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl_reach(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl_reach(_dryad_S5#7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(prev_list)))), ==(old(_dryad_S4#6, sll(prev_list)), old(_dryad_S5#7, sll(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll(_dryad_S5#7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(prev_list)))), ==(old(_dryad_S4#6, sll_reach(prev_list)), old(_dryad_S5#7, sll_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_reach(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_reach(_dryad_S5#7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(prev_list)))), ==(old(_dryad_S4#6, sll_max_key(prev_list)), old(_dryad_S5#7, sll_max_key(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_max_key(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_max_key(_dryad_S5#7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(prev_list)))), ==(old(_dryad_S4#6, sll_min_key(prev_list)), old(_dryad_S5#7, sll_min_key(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_min_key(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_min_key(_dryad_S5#7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, srtl_reach(prev_list)))), ==(old(_dryad_S4#6, srtl(prev_list)), old(_dryad_S5#7, srtl(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl(_dryad_S5#7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, srtl_reach(prev_list)))), ==(old(_dryad_S4#6, srtl_reach(prev_list)), old(_dryad_S5#7, srtl_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_reach(_dryad_S4#6, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_reach(_dryad_S5#7, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(list)))), ==(old(_dryad_S4#6, sll_keys(list)), old(_dryad_S5#7, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_keys(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node)) == F#sll_keys(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(list)))), ==(old(_dryad_S4#6, sll_list_len_next(list)), old(_dryad_S5#7, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, rsrtl_reach(list)))), ==(old(_dryad_S4#6, rsrtl(list)), old(_dryad_S5#7, rsrtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, rsrtl_reach(list)))), ==(old(_dryad_S4#6, rsrtl_reach(list)), old(_dryad_S5#7, rsrtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl_reach(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(list)))), ==(old(_dryad_S4#6, sll(list)), old(_dryad_S5#7, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node)) == F#sll(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(list)))), ==(old(_dryad_S4#6, sll_reach(list)), old(_dryad_S5#7, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(list)))), ==(old(_dryad_S4#6, sll_max_key(list)), old(_dryad_S5#7, sll_max_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_max_key(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node)) == F#sll_max_key(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_reach(list)))), ==(old(_dryad_S4#6, sll_min_key(list)), old(_dryad_S5#7, sll_min_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_min_key(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node)) == F#sll_min_key(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, srtl_reach(list)))), ==(old(_dryad_S4#6, srtl(list)), old(_dryad_S5#7, srtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node)) == F#srtl(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, srtl_reach(list)))), ==(old(_dryad_S4#6, srtl_reach(list)), old(_dryad_S5#7, srtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node)) == F#srtl_reach(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#6, sll_lseg(list, prev_list)), old(_dryad_S5#7, sll_lseg(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#6, sll_lseg_reach(list, prev_list)), old(_dryad_S5#7, sll_lseg_reach(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_reach(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#6, sll_lseg_keys(list, prev_list)), old(_dryad_S5#7, sll_lseg_keys(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_keys(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#6, sll_lseg_len_next(list, prev_list)), old(_dryad_S5#7, sll_lseg_len_next(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#6, sll_lseg_max_key(list, prev_list)), old(_dryad_S5#7, sll_lseg_max_key(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_max_key(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#6, sll_lseg_min_key(list, prev_list)), old(_dryad_S5#7, sll_lseg_min_key(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_min_key(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, srtl_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#6, srtl_lseg(list, prev_list)), old(_dryad_S5#7, srtl_lseg(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_lseg(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_lseg(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, srtl_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#6, srtl_lseg_reach(list, prev_list)), old(_dryad_S5#7, srtl_lseg_reach(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_lseg_reach(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#6, sll_lseg(list, tmp_list)), old(_dryad_S5#7, sll_lseg(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#6, sll_lseg_reach(list, tmp_list)), old(_dryad_S5#7, sll_lseg_reach(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_reach(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#6, sll_lseg_keys(list, tmp_list)), old(_dryad_S5#7, sll_lseg_keys(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_keys(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#6, sll_lseg_len_next(list, tmp_list)), old(_dryad_S5#7, sll_lseg_len_next(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#6, sll_lseg_max_key(list, tmp_list)), old(_dryad_S5#7, sll_lseg_max_key(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_max_key(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#6, sll_lseg_min_key(list, tmp_list)), old(_dryad_S5#7, sll_lseg_min_key(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_min_key(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, srtl_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#6, srtl_lseg(list, tmp_list)), old(_dryad_S5#7, srtl_lseg(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_lseg(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_lseg(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#6, srtl_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#6, srtl_lseg_reach(list, tmp_list)), old(_dryad_S5#7, srtl_lseg_reach(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S4#6, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_lseg_reach(_dryad_S5#7, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), ==(*((tmp_list->key)), old(_dryad_S4#6, *((tmp_list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) == $rd_inv(_dryad_S4#6, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), @_vcc_ptr_eq_pure(*((tmp_list->next)), old(_dryad_S4#6, *((tmp_list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#6, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), ==(*((prev_list->key)), old(_dryad_S4#6, *((prev_list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) == $rd_inv(_dryad_S4#6, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), @_vcc_ptr_eq_pure(*((prev_list->next)), old(_dryad_S4#6, *((prev_list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#6, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), ==(*((list->key)), old(_dryad_S4#6, *((list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) == $rd_inv(_dryad_S4#6, s_node.key, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S4#6, *((list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#6, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg(list, prev_list), &&(sll_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), prev_list)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_reach(list, prev_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_keys(list, prev_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), prev_list), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_len_next(list, prev_list), unchecked+(sll_lseg_len_next(*((list->next)), prev_list), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_max_key(list, prev_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), prev_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_min_key(list, prev_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(srtl_lseg(list, prev_list), &&(&&(srtl_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), prev_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(srtl_lseg_reach(list, prev_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg(list, tmp_list), &&(sll_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), tmp_list)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_reach(list, tmp_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_keys(list, tmp_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), tmp_list), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_len_next(list, tmp_list), unchecked+(sll_lseg_len_next(*((list->next)), tmp_list), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_max_key(list, tmp_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), tmp_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_min_key(list, tmp_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(srtl_lseg(list, tmp_list), &&(&&(srtl_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), tmp_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(srtl_lseg_reach(list, tmp_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // _math \state _dryad_S6#8; 
        // _dryad_S6#8 := @_vcc_current_state(@state); 
        _dryad_S6#8 := $current_state($s);
        // _math \state stmtexpr2#18; 
        // stmtexpr2#18 := _dryad_S6#8; 
        stmtexpr2#18 := _dryad_S6#8;
        // assert @prim_writes_check((prev_list->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#prev_list, ^s_node), s_node.next));
        // *(prev_list->next) := new_list; 
        call $write_int(s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), $ptr_to_int($phys_ptr_cast(L#new_list, ^s_node)));
        assume $full_stop_ext(#tok$3^52.3, $s);
        // _math \state _dryad_S7#9; 
        // _dryad_S7#9 := @_vcc_current_state(@state); 
        _dryad_S7#9 := $current_state($s);
        // _math \state stmtexpr3#19; 
        // stmtexpr3#19 := _dryad_S7#9; 
        stmtexpr3#19 := _dryad_S7#9;
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(tmp_list)))), ==(old(_dryad_S6#8, sll_keys(tmp_list)), old(_dryad_S7#9, sll_keys(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_keys(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_keys(_dryad_S7#9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(tmp_list)))), ==(old(_dryad_S6#8, sll_list_len_next(tmp_list)), old(_dryad_S7#9, sll_list_len_next(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(_dryad_S7#9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, rsrtl_reach(tmp_list)))), ==(old(_dryad_S6#8, rsrtl(tmp_list)), old(_dryad_S7#9, rsrtl(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl(_dryad_S7#9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, rsrtl_reach(tmp_list)))), ==(old(_dryad_S6#8, rsrtl_reach(tmp_list)), old(_dryad_S7#9, rsrtl_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl_reach(_dryad_S7#9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(tmp_list)))), ==(old(_dryad_S6#8, sll(tmp_list)), old(_dryad_S7#9, sll(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(_dryad_S7#9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(tmp_list)))), ==(old(_dryad_S6#8, sll_reach(tmp_list)), old(_dryad_S7#9, sll_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_reach(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(_dryad_S7#9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(tmp_list)))), ==(old(_dryad_S6#8, sll_max_key(tmp_list)), old(_dryad_S7#9, sll_max_key(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_max_key(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_max_key(_dryad_S7#9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(tmp_list)))), ==(old(_dryad_S6#8, sll_min_key(tmp_list)), old(_dryad_S7#9, sll_min_key(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_min_key(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_min_key(_dryad_S7#9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, srtl_reach(tmp_list)))), ==(old(_dryad_S6#8, srtl(tmp_list)), old(_dryad_S7#9, srtl(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl(_dryad_S7#9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, srtl_reach(tmp_list)))), ==(old(_dryad_S6#8, srtl_reach(tmp_list)), old(_dryad_S7#9, srtl_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_reach(_dryad_S6#8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_reach(_dryad_S7#9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(new_list)))), ==(old(_dryad_S6#8, sll_keys(new_list)), old(_dryad_S7#9, sll_keys(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#sll_keys(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_keys(_dryad_S7#9, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(new_list)))), ==(old(_dryad_S6#8, sll_list_len_next(new_list)), old(_dryad_S7#9, sll_list_len_next(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_list_len_next(_dryad_S7#9, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, rsrtl_reach(new_list)))), ==(old(_dryad_S6#8, rsrtl(new_list)), old(_dryad_S7#9, rsrtl(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#rsrtl(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node)) == F#rsrtl(_dryad_S7#9, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, rsrtl_reach(new_list)))), ==(old(_dryad_S6#8, rsrtl_reach(new_list)), old(_dryad_S7#9, rsrtl_reach(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node)) == F#rsrtl_reach(_dryad_S7#9, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(new_list)))), ==(old(_dryad_S6#8, sll(new_list)), old(_dryad_S7#9, sll(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#sll(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll(_dryad_S7#9, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(new_list)))), ==(old(_dryad_S6#8, sll_reach(new_list)), old(_dryad_S7#9, sll_reach(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#sll_reach(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_reach(_dryad_S7#9, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(new_list)))), ==(old(_dryad_S6#8, sll_max_key(new_list)), old(_dryad_S7#9, sll_max_key(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#sll_max_key(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_max_key(_dryad_S7#9, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(new_list)))), ==(old(_dryad_S6#8, sll_min_key(new_list)), old(_dryad_S7#9, sll_min_key(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#sll_min_key(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node)) == F#sll_min_key(_dryad_S7#9, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, srtl_reach(new_list)))), ==(old(_dryad_S6#8, srtl(new_list)), old(_dryad_S7#9, srtl(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#srtl(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node)) == F#srtl(_dryad_S7#9, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, srtl_reach(new_list)))), ==(old(_dryad_S6#8, srtl_reach(new_list)), old(_dryad_S7#9, srtl_reach(new_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node))) ==> F#srtl_reach(_dryad_S6#8, $phys_ptr_cast(L#new_list, ^s_node)) == F#srtl_reach(_dryad_S7#9, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(list)))), ==(old(_dryad_S6#8, sll_keys(list)), old(_dryad_S7#9, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_keys(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node)) == F#sll_keys(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(list)))), ==(old(_dryad_S6#8, sll_list_len_next(list)), old(_dryad_S7#9, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, rsrtl_reach(list)))), ==(old(_dryad_S6#8, rsrtl(list)), old(_dryad_S7#9, rsrtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, rsrtl_reach(list)))), ==(old(_dryad_S6#8, rsrtl_reach(list)), old(_dryad_S7#9, rsrtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl_reach(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(list)))), ==(old(_dryad_S6#8, sll(list)), old(_dryad_S7#9, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node)) == F#sll(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(list)))), ==(old(_dryad_S6#8, sll_reach(list)), old(_dryad_S7#9, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(list)))), ==(old(_dryad_S6#8, sll_max_key(list)), old(_dryad_S7#9, sll_max_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_max_key(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node)) == F#sll_max_key(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_reach(list)))), ==(old(_dryad_S6#8, sll_min_key(list)), old(_dryad_S7#9, sll_min_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_min_key(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node)) == F#sll_min_key(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, srtl_reach(list)))), ==(old(_dryad_S6#8, srtl(list)), old(_dryad_S7#9, srtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node)) == F#srtl(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, srtl_reach(list)))), ==(old(_dryad_S6#8, srtl_reach(list)), old(_dryad_S7#9, srtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node)) == F#srtl_reach(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6#8, sll_lseg(list, prev_list)), old(_dryad_S7#9, sll_lseg(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6#8, sll_lseg_reach(list, prev_list)), old(_dryad_S7#9, sll_lseg_reach(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_reach(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6#8, sll_lseg_keys(list, prev_list)), old(_dryad_S7#9, sll_lseg_keys(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_keys(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6#8, sll_lseg_len_next(list, prev_list)), old(_dryad_S7#9, sll_lseg_len_next(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6#8, sll_lseg_max_key(list, prev_list)), old(_dryad_S7#9, sll_lseg_max_key(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S6#8, sll_lseg_min_key(list, prev_list)), old(_dryad_S7#9, sll_lseg_min_key(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, srtl_lseg_reach(list, prev_list)))), ==(old(_dryad_S6#8, srtl_lseg(list, prev_list)), old(_dryad_S7#9, srtl_lseg(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_lseg(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_lseg(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, srtl_lseg_reach(list, prev_list)))), ==(old(_dryad_S6#8, srtl_lseg_reach(list, prev_list)), old(_dryad_S7#9, srtl_lseg_reach(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6#8, sll_lseg(list, tmp_list)), old(_dryad_S7#9, sll_lseg(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6#8, sll_lseg_reach(list, tmp_list)), old(_dryad_S7#9, sll_lseg_reach(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_reach(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6#8, sll_lseg_keys(list, tmp_list)), old(_dryad_S7#9, sll_lseg_keys(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_keys(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6#8, sll_lseg_len_next(list, tmp_list)), old(_dryad_S7#9, sll_lseg_len_next(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6#8, sll_lseg_max_key(list, tmp_list)), old(_dryad_S7#9, sll_lseg_max_key(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6#8, sll_lseg_min_key(list, tmp_list)), old(_dryad_S7#9, sll_lseg_min_key(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, srtl_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6#8, srtl_lseg(list, tmp_list)), old(_dryad_S7#9, srtl_lseg(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_lseg(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_lseg(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(prev_list, old(_dryad_S6#8, srtl_lseg_reach(list, tmp_list)))), ==(old(_dryad_S6#8, srtl_lseg_reach(list, tmp_list)), old(_dryad_S7#9, srtl_lseg_reach(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(prev_list, tmp_list)), ==(*((tmp_list->key)), old(_dryad_S6#8, *((tmp_list->key))))); 
        assume !($phys_ptr_cast(L#prev_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) == $rd_inv(_dryad_S6#8, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(prev_list, tmp_list)), @_vcc_ptr_eq_pure(*((tmp_list->next)), old(_dryad_S6#8, *((tmp_list->next))))); 
        assume !($phys_ptr_cast(L#prev_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#8, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(prev_list, new_list)), ==(*((new_list->key)), old(_dryad_S6#8, *((new_list->key))))); 
        assume !($phys_ptr_cast(L#prev_list, ^s_node) == $phys_ptr_cast(L#new_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) == $rd_inv(_dryad_S6#8, s_node.key, $phys_ptr_cast(L#new_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(prev_list, new_list)), @_vcc_ptr_eq_pure(*((new_list->next)), old(_dryad_S6#8, *((new_list->next))))); 
        assume !($phys_ptr_cast(L#prev_list, ^s_node) == $phys_ptr_cast(L#new_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#8, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(prev_list, list)), ==(*((list->key)), old(_dryad_S6#8, *((list->key))))); 
        assume !($phys_ptr_cast(L#prev_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) == $rd_inv(_dryad_S6#8, s_node.key, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(prev_list, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6#8, *((list->next))))); 
        assume !($phys_ptr_cast(L#prev_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#8, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg(list, tmp_list), &&(sll_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), tmp_list)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_reach(list, tmp_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_keys(list, tmp_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), tmp_list), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_len_next(list, tmp_list), unchecked+(sll_lseg_len_next(*((list->next)), tmp_list), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_max_key(list, tmp_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), tmp_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_min_key(list, tmp_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(srtl_lseg(list, tmp_list), &&(&&(srtl_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), tmp_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(srtl_lseg_reach(list, tmp_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // _math \state _dryad_S8; 
        // _dryad_S8 := @_vcc_current_state(@state); 
        SL#_dryad_S8 := $current_state($s);
        // _math \state stmtexpr4#20; 
        // stmtexpr4#20 := _dryad_S8; 
        stmtexpr4#20 := SL#_dryad_S8;
        // assert @prim_writes_check((new_list->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#new_list, ^s_node), s_node.next));
        // *(new_list->next) := tmp_list; 
        call $write_int(s_node.next, $phys_ptr_cast(L#new_list, ^s_node), $ptr_to_int($phys_ptr_cast(L#tmp_list, ^s_node)));
        assume $full_stop_ext(#tok$3^53.3, $s);
        // _math \state _dryad_S9; 
        // _dryad_S9 := @_vcc_current_state(@state); 
        SL#_dryad_S9 := $current_state($s);
        // _math \state stmtexpr5#21; 
        // stmtexpr5#21 := _dryad_S9; 
        stmtexpr5#21 := SL#_dryad_S9;
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(tmp_list)))), ==(old(_dryad_S8, sll_keys(tmp_list)), old(_dryad_S9, sll_keys(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(tmp_list)))), ==(old(_dryad_S8, sll_list_len_next(tmp_list)), old(_dryad_S9, sll_list_len_next(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, rsrtl_reach(tmp_list)))), ==(old(_dryad_S8, rsrtl(tmp_list)), old(_dryad_S9, rsrtl(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, rsrtl_reach(tmp_list)))), ==(old(_dryad_S8, rsrtl_reach(tmp_list)), old(_dryad_S9, rsrtl_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(tmp_list)))), ==(old(_dryad_S8, sll(tmp_list)), old(_dryad_S9, sll(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(tmp_list)))), ==(old(_dryad_S8, sll_reach(tmp_list)), old(_dryad_S9, sll_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(tmp_list)))), ==(old(_dryad_S8, sll_max_key(tmp_list)), old(_dryad_S9, sll_max_key(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(tmp_list)))), ==(old(_dryad_S8, sll_min_key(tmp_list)), old(_dryad_S9, sll_min_key(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, srtl_reach(tmp_list)))), ==(old(_dryad_S8, srtl(tmp_list)), old(_dryad_S9, srtl(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, srtl_reach(tmp_list)))), ==(old(_dryad_S8, srtl_reach(tmp_list)), old(_dryad_S9, srtl_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(prev_list)))), ==(old(_dryad_S8, sll_keys(prev_list)), old(_dryad_S9, sll_keys(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(prev_list)))), ==(old(_dryad_S8, sll_list_len_next(prev_list)), old(_dryad_S9, sll_list_len_next(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, rsrtl_reach(prev_list)))), ==(old(_dryad_S8, rsrtl(prev_list)), old(_dryad_S9, rsrtl(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, rsrtl_reach(prev_list)))), ==(old(_dryad_S8, rsrtl_reach(prev_list)), old(_dryad_S9, rsrtl_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(prev_list)))), ==(old(_dryad_S8, sll(prev_list)), old(_dryad_S9, sll(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(prev_list)))), ==(old(_dryad_S8, sll_reach(prev_list)), old(_dryad_S9, sll_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(prev_list)))), ==(old(_dryad_S8, sll_max_key(prev_list)), old(_dryad_S9, sll_max_key(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(prev_list)))), ==(old(_dryad_S8, sll_min_key(prev_list)), old(_dryad_S9, sll_min_key(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, srtl_reach(prev_list)))), ==(old(_dryad_S8, srtl(prev_list)), old(_dryad_S9, srtl(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, srtl_reach(prev_list)))), ==(old(_dryad_S8, srtl_reach(prev_list)), old(_dryad_S9, srtl_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(list)))), ==(old(_dryad_S8, sll_keys(list)), old(_dryad_S9, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(list)))), ==(old(_dryad_S8, sll_list_len_next(list)), old(_dryad_S9, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, rsrtl_reach(list)))), ==(old(_dryad_S8, rsrtl(list)), old(_dryad_S9, rsrtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, rsrtl_reach(list)))), ==(old(_dryad_S8, rsrtl_reach(list)), old(_dryad_S9, rsrtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(list)))), ==(old(_dryad_S8, sll(list)), old(_dryad_S9, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(list)))), ==(old(_dryad_S8, sll_reach(list)), old(_dryad_S9, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(list)))), ==(old(_dryad_S8, sll_max_key(list)), old(_dryad_S9, sll_max_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_reach(list)))), ==(old(_dryad_S8, sll_min_key(list)), old(_dryad_S9, sll_min_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, srtl_reach(list)))), ==(old(_dryad_S8, srtl(list)), old(_dryad_S9, srtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, srtl_reach(list)))), ==(old(_dryad_S8, srtl_reach(list)), old(_dryad_S9, srtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S8, sll_lseg(list, prev_list)), old(_dryad_S9, sll_lseg(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S8, sll_lseg_reach(list, prev_list)), old(_dryad_S9, sll_lseg_reach(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S8, sll_lseg_keys(list, prev_list)), old(_dryad_S9, sll_lseg_keys(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S8, sll_lseg_len_next(list, prev_list)), old(_dryad_S9, sll_lseg_len_next(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S8, sll_lseg_max_key(list, prev_list)), old(_dryad_S9, sll_lseg_max_key(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S8, sll_lseg_min_key(list, prev_list)), old(_dryad_S9, sll_lseg_min_key(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, srtl_lseg_reach(list, prev_list)))), ==(old(_dryad_S8, srtl_lseg(list, prev_list)), old(_dryad_S9, srtl_lseg(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, srtl_lseg_reach(list, prev_list)))), ==(old(_dryad_S8, srtl_lseg_reach(list, prev_list)), old(_dryad_S9, srtl_lseg_reach(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S8, sll_lseg(list, tmp_list)), old(_dryad_S9, sll_lseg(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S8, sll_lseg_reach(list, tmp_list)), old(_dryad_S9, sll_lseg_reach(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S8, sll_lseg_keys(list, tmp_list)), old(_dryad_S9, sll_lseg_keys(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S8, sll_lseg_len_next(list, tmp_list)), old(_dryad_S9, sll_lseg_len_next(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S8, sll_lseg_max_key(list, tmp_list)), old(_dryad_S9, sll_lseg_max_key(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S8, sll_lseg_min_key(list, tmp_list)), old(_dryad_S9, sll_lseg_min_key(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, srtl_lseg_reach(list, tmp_list)))), ==(old(_dryad_S8, srtl_lseg(list, tmp_list)), old(_dryad_S9, srtl_lseg(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S8, srtl_lseg_reach(list, tmp_list)))), ==(old(_dryad_S8, srtl_lseg_reach(list, tmp_list)), old(_dryad_S9, srtl_lseg_reach(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), ==(*((tmp_list->key)), old(_dryad_S8, *((tmp_list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), @_vcc_ptr_eq_pure(*((tmp_list->next)), old(_dryad_S8, *((tmp_list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), ==(*((prev_list->key)), old(_dryad_S8, *((prev_list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), @_vcc_ptr_eq_pure(*((prev_list->next)), old(_dryad_S8, *((prev_list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), ==(*((list->key)), old(_dryad_S8, *((list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S8, *((list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg(list, prev_list), &&(sll_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), prev_list)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_reach(list, prev_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_keys(list, prev_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), prev_list), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_len_next(list, prev_list), unchecked+(sll_lseg_len_next(*((list->next)), prev_list), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_max_key(list, prev_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), prev_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_min_key(list, prev_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(srtl_lseg(list, prev_list), &&(&&(srtl_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), prev_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(srtl_lseg_reach(list, prev_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg(list, tmp_list), &&(sll_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), tmp_list)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_reach(list, tmp_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_keys(list, tmp_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), tmp_list), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_len_next(list, tmp_list), unchecked+(sll_lseg_len_next(*((list->next)), tmp_list), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_max_key(list, tmp_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), tmp_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_min_key(list, tmp_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(srtl_lseg(list, tmp_list), &&(&&(srtl_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), tmp_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(srtl_lseg_reach(list, tmp_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // return list; 
        $result := $phys_ptr_cast(P#list, ^s_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon14:
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg(list, prev_list), &&(sll_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), prev_list)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_reach(list, prev_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_keys(list, prev_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), prev_list), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_len_next(list, prev_list), unchecked+(sll_lseg_len_next(*((list->next)), prev_list), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_max_key(list, prev_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), prev_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_min_key(list, prev_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(srtl_lseg(list, prev_list), &&(&&(srtl_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), prev_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(srtl_lseg_reach(list, prev_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg(list, tmp_list), &&(sll_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), tmp_list)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_reach(list, tmp_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_keys(list, tmp_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), tmp_list), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_len_next(list, tmp_list), unchecked+(sll_lseg_len_next(*((list->next)), tmp_list), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_max_key(list, tmp_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), tmp_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_min_key(list, tmp_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(srtl_lseg(list, tmp_list), &&(&&(srtl_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), tmp_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(srtl_lseg_reach(list, tmp_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // _math \state _dryad_S4#10; 
        // _dryad_S4#10 := @_vcc_current_state(@state); 
        _dryad_S4#10 := $current_state($s);
        // _math \state stmtexpr0#22; 
        // stmtexpr0#22 := _dryad_S4#10; 
        stmtexpr0#22 := _dryad_S4#10;
        // assert @prim_writes_check((new_list->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#new_list, ^s_node), s_node.next));
        // *(new_list->next) := list; 
        call $write_int(s_node.next, $phys_ptr_cast(L#new_list, ^s_node), $ptr_to_int($phys_ptr_cast(P#list, ^s_node)));
        assume $full_stop_ext(#tok$3^56.3, $s);
        // _math \state _dryad_S5#11; 
        // _dryad_S5#11 := @_vcc_current_state(@state); 
        _dryad_S5#11 := $current_state($s);
        // _math \state stmtexpr1#23; 
        // stmtexpr1#23 := _dryad_S5#11; 
        stmtexpr1#23 := _dryad_S5#11;
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(tmp_list)))), ==(old(_dryad_S4#10, sll_keys(tmp_list)), old(_dryad_S5#11, sll_keys(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_keys(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_keys(_dryad_S5#11, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(tmp_list)))), ==(old(_dryad_S4#10, sll_list_len_next(tmp_list)), old(_dryad_S5#11, sll_list_len_next(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_list_len_next(_dryad_S5#11, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, rsrtl_reach(tmp_list)))), ==(old(_dryad_S4#10, rsrtl(tmp_list)), old(_dryad_S5#11, rsrtl(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl(_dryad_S5#11, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, rsrtl_reach(tmp_list)))), ==(old(_dryad_S4#10, rsrtl_reach(tmp_list)), old(_dryad_S5#11, rsrtl_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#rsrtl_reach(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#rsrtl_reach(_dryad_S5#11, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(tmp_list)))), ==(old(_dryad_S4#10, sll(tmp_list)), old(_dryad_S5#11, sll(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll(_dryad_S5#11, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(tmp_list)))), ==(old(_dryad_S4#10, sll_reach(tmp_list)), old(_dryad_S5#11, sll_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_reach(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_reach(_dryad_S5#11, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(tmp_list)))), ==(old(_dryad_S4#10, sll_max_key(tmp_list)), old(_dryad_S5#11, sll_max_key(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_max_key(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_max_key(_dryad_S5#11, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(tmp_list)))), ==(old(_dryad_S4#10, sll_min_key(tmp_list)), old(_dryad_S5#11, sll_min_key(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_min_key(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_min_key(_dryad_S5#11, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, srtl_reach(tmp_list)))), ==(old(_dryad_S4#10, srtl(tmp_list)), old(_dryad_S5#11, srtl(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl(_dryad_S5#11, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, srtl_reach(tmp_list)))), ==(old(_dryad_S4#10, srtl_reach(tmp_list)), old(_dryad_S5#11, srtl_reach(tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_reach(_dryad_S4#10, $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_reach(_dryad_S5#11, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(prev_list)))), ==(old(_dryad_S4#10, sll_keys(prev_list)), old(_dryad_S5#11, sll_keys(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_keys(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_keys(_dryad_S5#11, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(prev_list)))), ==(old(_dryad_S4#10, sll_list_len_next(prev_list)), old(_dryad_S5#11, sll_list_len_next(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_list_len_next(_dryad_S5#11, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, rsrtl_reach(prev_list)))), ==(old(_dryad_S4#10, rsrtl(prev_list)), old(_dryad_S5#11, rsrtl(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl(_dryad_S5#11, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, rsrtl_reach(prev_list)))), ==(old(_dryad_S4#10, rsrtl_reach(prev_list)), old(_dryad_S5#11, rsrtl_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#rsrtl_reach(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node)) == F#rsrtl_reach(_dryad_S5#11, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(prev_list)))), ==(old(_dryad_S4#10, sll(prev_list)), old(_dryad_S5#11, sll(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll(_dryad_S5#11, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(prev_list)))), ==(old(_dryad_S4#10, sll_reach(prev_list)), old(_dryad_S5#11, sll_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_reach(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_reach(_dryad_S5#11, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(prev_list)))), ==(old(_dryad_S4#10, sll_max_key(prev_list)), old(_dryad_S5#11, sll_max_key(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_max_key(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_max_key(_dryad_S5#11, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(prev_list)))), ==(old(_dryad_S4#10, sll_min_key(prev_list)), old(_dryad_S5#11, sll_min_key(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_min_key(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_min_key(_dryad_S5#11, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, srtl_reach(prev_list)))), ==(old(_dryad_S4#10, srtl(prev_list)), old(_dryad_S5#11, srtl(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl(_dryad_S5#11, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, srtl_reach(prev_list)))), ==(old(_dryad_S4#10, srtl_reach(prev_list)), old(_dryad_S5#11, srtl_reach(prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_reach(_dryad_S4#10, $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_reach(_dryad_S5#11, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(list)))), ==(old(_dryad_S4#10, sll_keys(list)), old(_dryad_S5#11, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_keys(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node)) == F#sll_keys(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(list)))), ==(old(_dryad_S4#10, sll_list_len_next(list)), old(_dryad_S5#11, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node)) == F#sll_list_len_next(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, rsrtl_reach(list)))), ==(old(_dryad_S4#10, rsrtl(list)), old(_dryad_S5#11, rsrtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, rsrtl_reach(list)))), ==(old(_dryad_S4#10, rsrtl_reach(list)), old(_dryad_S5#11, rsrtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node)) == F#rsrtl_reach(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(list)))), ==(old(_dryad_S4#10, sll(list)), old(_dryad_S5#11, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node)) == F#sll(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(list)))), ==(old(_dryad_S4#10, sll_reach(list)), old(_dryad_S5#11, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node)) == F#sll_reach(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(list)))), ==(old(_dryad_S4#10, sll_max_key(list)), old(_dryad_S5#11, sll_max_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_max_key(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node)) == F#sll_max_key(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_reach(list)))), ==(old(_dryad_S4#10, sll_min_key(list)), old(_dryad_S5#11, sll_min_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node))) ==> F#sll_min_key(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node)) == F#sll_min_key(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, srtl_reach(list)))), ==(old(_dryad_S4#10, srtl(list)), old(_dryad_S5#11, srtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node)) == F#srtl(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, srtl_reach(list)))), ==(old(_dryad_S4#10, srtl_reach(list)), old(_dryad_S5#11, srtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node))) ==> F#srtl_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node)) == F#srtl_reach(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#10, sll_lseg(list, prev_list)), old(_dryad_S5#11, sll_lseg(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#10, sll_lseg_reach(list, prev_list)), old(_dryad_S5#11, sll_lseg_reach(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_reach(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#10, sll_lseg_keys(list, prev_list)), old(_dryad_S5#11, sll_lseg_keys(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_keys(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#10, sll_lseg_len_next(list, prev_list)), old(_dryad_S5#11, sll_lseg_len_next(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#10, sll_lseg_max_key(list, prev_list)), old(_dryad_S5#11, sll_lseg_max_key(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_max_key(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#10, sll_lseg_min_key(list, prev_list)), old(_dryad_S5#11, sll_lseg_min_key(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#sll_lseg_min_key(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, srtl_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#10, srtl_lseg(list, prev_list)), old(_dryad_S5#11, srtl_lseg(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_lseg(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_lseg(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, srtl_lseg_reach(list, prev_list)))), ==(old(_dryad_S4#10, srtl_lseg_reach(list, prev_list)), old(_dryad_S5#11, srtl_lseg_reach(list, prev_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == F#srtl_lseg_reach(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#10, sll_lseg(list, tmp_list)), old(_dryad_S5#11, sll_lseg(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#10, sll_lseg_reach(list, tmp_list)), old(_dryad_S5#11, sll_lseg_reach(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_reach(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#10, sll_lseg_keys(list, tmp_list)), old(_dryad_S5#11, sll_lseg_keys(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_keys(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#10, sll_lseg_len_next(list, tmp_list)), old(_dryad_S5#11, sll_lseg_len_next(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#10, sll_lseg_max_key(list, tmp_list)), old(_dryad_S5#11, sll_lseg_max_key(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_max_key(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, sll_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#10, sll_lseg_min_key(list, tmp_list)), old(_dryad_S5#11, sll_lseg_min_key(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#sll_lseg_min_key(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, srtl_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#10, srtl_lseg(list, tmp_list)), old(_dryad_S5#11, srtl_lseg(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_lseg(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_lseg(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(new_list, old(_dryad_S4#10, srtl_lseg_reach(list, tmp_list)))), ==(old(_dryad_S4#10, srtl_lseg_reach(list, tmp_list)), old(_dryad_S5#11, srtl_lseg_reach(list, tmp_list)))); 
        assume !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S4#10, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == F#srtl_lseg_reach(_dryad_S5#11, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), ==(*((tmp_list->key)), old(_dryad_S4#10, *((tmp_list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) == $rd_inv(_dryad_S4#10, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, tmp_list)), @_vcc_ptr_eq_pure(*((tmp_list->next)), old(_dryad_S4#10, *((tmp_list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#tmp_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#10, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), ==(*((prev_list->key)), old(_dryad_S4#10, *((prev_list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) == $rd_inv(_dryad_S4#10, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, prev_list)), @_vcc_ptr_eq_pure(*((prev_list->next)), old(_dryad_S4#10, *((prev_list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(L#prev_list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#10, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), ==(*((list->key)), old(_dryad_S4#10, *((list->key))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) == $rd_inv(_dryad_S4#10, s_node.key, $phys_ptr_cast(P#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(new_list, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S4#10, *((list->next))))); 
        assume !($phys_ptr_cast(L#new_list, ^s_node) == $phys_ptr_cast(P#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#10, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_keys(tmp_list), @_vcc_intset_union(sll_keys(*((tmp_list->next))), @_vcc_intset_singleton(*((tmp_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_list_len_next(tmp_list), unchecked+(sll_list_len_next(*((tmp_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(rsrtl(tmp_list), &&(&&(rsrtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, rsrtl_reach(*((tmp_list->next)))))), >=(*((tmp_list->key)), sll_max_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(rsrtl_reach(tmp_list), @_vcc_oset_union(rsrtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll(tmp_list), &&(sll(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, sll_reach(*((tmp_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(sll_reach(tmp_list), @_vcc_oset_union(sll_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_max_key(tmp_list), @\int_max(*((tmp_list->key)), sll_max_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(sll_min_key(tmp_list), @\int_min(*((tmp_list->key)), sll_min_key(*((tmp_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(tmp_list), @_vcc_ptr_neq_null(*((tmp_list->next)))), ==(srtl(tmp_list), &&(&&(srtl(*((tmp_list->next))), unchecked!(@_vcc_oset_in(tmp_list, srtl_reach(*((tmp_list->next)))))), <=(*((tmp_list->key)), sll_min_key(*((tmp_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_list), ==(srtl_reach(tmp_list), @_vcc_oset_union(srtl_reach(*((tmp_list->next))), @_vcc_oset_singleton(tmp_list)))); 
        assume $non_null($phys_ptr_cast(L#tmp_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_keys(prev_list), @_vcc_intset_union(sll_keys(*((prev_list->next))), @_vcc_intset_singleton(*((prev_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_list_len_next(prev_list), unchecked+(sll_list_len_next(*((prev_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(rsrtl(prev_list), &&(&&(rsrtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, rsrtl_reach(*((prev_list->next)))))), >=(*((prev_list->key)), sll_max_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(rsrtl_reach(prev_list), @_vcc_oset_union(rsrtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll(prev_list), &&(sll(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, sll_reach(*((prev_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(sll_reach(prev_list), @_vcc_oset_union(sll_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_max_key(prev_list), @\int_max(*((prev_list->key)), sll_max_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(sll_min_key(prev_list), @\int_min(*((prev_list->key)), sll_min_key(*((prev_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(prev_list), @_vcc_ptr_neq_null(*((prev_list->next)))), ==(srtl(prev_list), &&(&&(srtl(*((prev_list->next))), unchecked!(@_vcc_oset_in(prev_list, srtl_reach(*((prev_list->next)))))), <=(*((prev_list->key)), sll_min_key(*((prev_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#prev_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#prev_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(prev_list), ==(srtl_reach(prev_list), @_vcc_oset_union(srtl_reach(*((prev_list->next))), @_vcc_oset_singleton(prev_list)))); 
        assume $non_null($phys_ptr_cast(L#prev_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#prev_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_keys(new_list), @_vcc_intset_union(sll_keys(*((new_list->next))), @_vcc_intset_singleton(*((new_list->key)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#new_list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_list_len_next(new_list), unchecked+(sll_list_len_next(*((new_list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#new_list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(rsrtl(new_list), &&(&&(rsrtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, rsrtl_reach(*((new_list->next)))))), >=(*((new_list->key)), sll_max_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(rsrtl_reach(new_list), @_vcc_oset_union(rsrtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll(new_list), &&(sll(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, sll_reach(*((new_list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(sll_reach(new_list), @_vcc_oset_union(sll_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_max_key(new_list), @\int_max(*((new_list->key)), sll_max_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(sll_min_key(new_list), @\int_min(*((new_list->key)), sll_min_key(*((new_list->next)))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#new_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(new_list), @_vcc_ptr_neq_null(*((new_list->next)))), ==(srtl(new_list), &&(&&(srtl(*((new_list->next))), unchecked!(@_vcc_oset_in(new_list, srtl_reach(*((new_list->next)))))), <=(*((new_list->key)), sll_min_key(*((new_list->next))))))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#new_list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#new_list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#new_list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(new_list), ==(srtl_reach(new_list), @_vcc_oset_union(srtl_reach(*((new_list->next))), @_vcc_oset_singleton(new_list)))); 
        assume $non_null($phys_ptr_cast(L#new_list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#new_list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#new_list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#new_list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg(list, prev_list), &&(sll_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), prev_list)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_reach(list, prev_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_keys(list, prev_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), prev_list), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(sll_lseg_len_next(list, prev_list), unchecked+(sll_lseg_len_next(*((list->next)), prev_list), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_max_key(list, prev_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), prev_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(sll_lseg_min_key(list, prev_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), @_vcc_ptr_neq_pure(*((list->next)), prev_list)), ==(srtl_lseg(list, prev_list), &&(&&(srtl_lseg(*((list->next)), prev_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), prev_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), prev_list))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, prev_list)), ==(srtl_lseg_reach(list, prev_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), prev_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#prev_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#prev_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg(list, tmp_list), &&(sll_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), tmp_list)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_reach(list, tmp_list), @_vcc_oset_union(sll_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_keys(list, tmp_list), @_vcc_intset_union(sll_lseg_keys(*((list->next)), tmp_list), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(sll_lseg_len_next(list, tmp_list), unchecked+(sll_lseg_len_next(*((list->next)), tmp_list), 1))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_max_key(list, tmp_list), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), tmp_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(sll_lseg_min_key(list, tmp_list), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), @_vcc_ptr_neq_pure(*((list->next)), tmp_list)), ==(srtl_lseg(list, tmp_list), &&(&&(srtl_lseg(*((list->next)), tmp_list), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), tmp_list)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), tmp_list))))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) && !$oset_in($phys_ptr_cast(P#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, tmp_list)), ==(srtl_lseg_reach(list, tmp_list), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), tmp_list), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(P#list, ^s_node)) && $phys_ptr_cast(P#list, ^s_node) != $phys_ptr_cast(L#tmp_list, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#list, ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#list, ^s_node), ^s_node), $phys_ptr_cast(L#tmp_list, ^s_node)), $oset_singleton($phys_ptr_cast(P#list, ^s_node)));
        // return new_list; 
        $result := $phys_ptr_cast(L#new_list, ^s_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }

  anon20:
    // skip

  #exit:
}



axiom (forall Q#__vcc_state$2^687.9#tc2#1700: $state, Q#x$2^687.9#dt1#1620: $ptr :: {:weight 10} { F#srtl(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1620, ^s_node)) } { F#sll(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1620, ^s_node)) } $good_state(Q#__vcc_state$2^687.9#tc2#1700) && true ==> F#srtl(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1620, ^s_node)) ==> F#sll(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1620, ^s_node)));

axiom (forall Q#__vcc_state$2^688.9#tc2#1701: $state, Q#x$2^688.9#dt1#1621: $ptr :: {:weight 10} { F#rsrtl(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1621, ^s_node)) } { F#sll(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1621, ^s_node)) } $good_state(Q#__vcc_state$2^688.9#tc2#1701) && true ==> F#rsrtl(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1621, ^s_node)) ==> F#sll(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1621, ^s_node)));

axiom (forall Q#__vcc_state$2^689.9#tc2#1702: $state, Q#x$2^689.9#dt1#1622: $ptr :: {:weight 10} { F#sll_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1622, ^s_node)) } { F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1622, ^s_node)) } $good_state(Q#__vcc_state$2^689.9#tc2#1702) && true ==> F#sll_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1622, ^s_node)) == F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1622, ^s_node)));

axiom (forall Q#__vcc_state$2^690.9#tc2#1703: $state, Q#x$2^690.9#dt1#1623: $ptr :: {:weight 10} { F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1623, ^s_node)) } { F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1623, ^s_node)) } $good_state(Q#__vcc_state$2^690.9#tc2#1703) && true ==> F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1623, ^s_node)) == F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1623, ^s_node)));

axiom (forall Q#__vcc_state$2^691.9#tc2#1704: $state, Q#x$2^691.9#dt1#1624: $ptr, Q#y$2^691.9#dt1#1625: $ptr :: {:weight 10} { F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1624, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1625, ^s_node)) } { F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1624, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1625, ^s_node)) } $good_state(Q#__vcc_state$2^691.9#tc2#1704) && true ==> F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1624, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1625, ^s_node)) == F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1624, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1625, ^s_node)));

const unique l#public: $label;

axiom $type_code_is(2, ^$#state_t);

const unique #tok$3^56.3: $token;

const unique #tok$3^53.3: $token;

const unique #tok$3^52.3: $token;

const unique #tok$3^51.3: $token;

const unique #tok$3^46.3: $token;

const unique #tok$3^45.3: $token;

const unique #tok$3^43.2: $token;

const unique #tok$3^41.13: $token;

const unique #tok$3^22.2: $token;

const unique #tok$3^18.3: $token;

const unique #tok$3^17.3: $token;

const unique #tok$3^15.14: $token;

const unique #tok$4^0.0: $token;

const unique #file^?3Cno?20file?3E: $token;

axiom $file_name_is(4, #file^?3Cno?20file?3E);

const unique #tok$3^3.3: $token;

const unique #file^Z?3A?5CInvariantSynthesis?5Csubmit?5Cglibc?5Cgslist?5Cg_slist_insert_sorted.c: $token;

axiom $file_name_is(3, #file^Z?3A?5CInvariantSynthesis?5Csubmit?5Cglibc?5Cgslist?5Cg_slist_insert_sorted.c);

const unique #file^z?3A?5Cinvariantsynthesis?5Csubmit?5Cglibc?5Cgslist?5Cdryad_gslist.h: $token;

axiom $file_name_is(2, #file^z?3A?5Cinvariantsynthesis?5Csubmit?5Cglibc?5Cgslist?5Cdryad_gslist.h);

const unique #file^Z?3A?5CInvariantSynthesis?5CDownloads?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h: $token;

axiom $file_name_is(1, #file^Z?3A?5CInvariantSynthesis?5CDownloads?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h);

const unique #distTp1: $ctype;

axiom #distTp1 == $ptr_to(^s_node);
