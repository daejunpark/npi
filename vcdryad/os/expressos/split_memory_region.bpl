axiom $arch_ptr_size == 8;

axiom $arch_spec_ptr_start == $max.u8;

const unique ^$##thread_id: $ctype;

axiom $def_math_type(^$##thread_id);

type $##thread_id;

const unique ^$##club: $ctype;

axiom $def_math_type(^$##club);

type $##club;

const unique ^backing_file: $ctype;

axiom $is_span_sequential(^backing_file);

axiom $def_struct_type(^backing_file, 4, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^backing_file) } $inv2(#s1, #s2, #p, ^backing_file) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^backing_file) } $inv2_without_lemmas(#s1, #s2, #p, ^backing_file) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^backing_file)) } $in(q, $composite_extent(s, p, ^backing_file)) == (q == p));

const unique backing_file.file_id: $field;

axiom $def_phys_field(^backing_file, backing_file.file_id, ^^i4, false, 0);

const unique ^mem_reg: $ctype;

axiom $is_span_sequential(^mem_reg);

axiom $def_struct_type(^mem_reg, 40, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^mem_reg) } $inv2(#s1, #s2, #p, ^mem_reg) == ($set_eq($owns(#s2, #p), $set_empty()) && $rd_inv(#s2, mem_reg.file_size, #p) <= $rd_inv(#s2, mem_reg.size, #p)));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^mem_reg) } $inv2_without_lemmas(#s1, #s2, #p, ^mem_reg) == ($set_eq($owns(#s2, #p), $set_empty()) && $rd_inv(#s2, mem_reg.file_size, #p) <= $rd_inv(#s2, mem_reg.size, #p)));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^mem_reg)) } $in(q, $composite_extent(s, p, ^mem_reg)) == (q == p));

const unique mem_reg.file: $field;

axiom $def_phys_field(^mem_reg, mem_reg.file, $ptr_to(^backing_file), false, 0);

const unique mem_reg.file_offset: $field;

axiom $def_phys_field(^mem_reg, mem_reg.file_offset, ^^i4, false, 8);

const unique mem_reg.file_size: $field;

axiom $def_phys_field(^mem_reg, mem_reg.file_size, ^^i4, false, 12);

const unique mem_reg.start_address: $field;

axiom $def_phys_field(^mem_reg, mem_reg.start_address, ^^i4, false, 16);

const unique mem_reg.size: $field;

axiom $def_phys_field(^mem_reg, mem_reg.size, ^^i4, false, 20);

const unique mem_reg.prev: $field;

axiom $def_phys_field(^mem_reg, mem_reg.prev, $ptr_to(^mem_reg), false, 24);

const unique mem_reg.next: $field;

axiom $def_phys_field(^mem_reg, mem_reg.next, $ptr_to(^mem_reg), false, 32);

procedure mem_reg#adm(P#_this_: $ptr);
  modifies $s, $cev_pc;
  ensures $is_admissibility_check() ==> $set_eq($owns($s, $phys_ptr_cast(P#_this_, ^mem_reg)), $set_empty());
  ensures $is_admissibility_check() ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#_this_, ^mem_reg)) <= $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#_this_, ^mem_reg));
  ensures $is_unwrap_check() ==> $set_eq($owns($s, $phys_ptr_cast(P#_this_, ^mem_reg)), $set_empty());
  ensures $is_unwrap_check() ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#_this_, ^mem_reg)) <= $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#_this_, ^mem_reg));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



implementation mem_reg#adm(P#_this_: $ptr)
{
  var #wrTime$1^15.1: int;
  var #stackframe: int;

  anon6:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$1^15.1, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$1^15.1 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$1^15.1, (lambda #p: $ptr :: false));
    // assume @decreases_level_is(0); 
    assume 0 == $decreases_level;
    // assume @_vcc_admissibility_start(_this_); 
    assume $admissibility_start($phys_ptr_cast(P#_this_, ^mem_reg), ^mem_reg);
    assume true;
    // if (@_vcc_is_unwrap_check) ...
    if ($is_unwrap_check())
    {
      anon1:
        // assume !(@_vcc_is_stuttering_check); 
        assume !$is_stuttering_check();
        // assume @_vcc_unwrap_check_pre(@state, _this_); 
        assume $unwrap_check_pre($s, $phys_ptr_cast(P#_this_, ^mem_reg));
        // @_vcc_unwrap_check(_this_)
        call $unwrap_check($phys_ptr_cast(P#_this_, ^mem_reg));
        assume $good_state_ext(#tok$1^15.1, $s);
        // assert true
    }
    else
    {
      anon4:
        assume true;
        // if (@_vcc_is_admissibility_check) ...
        if ($is_admissibility_check())
        {
          anon2:
            // assume @_vcc_admissibility_pre(@state, _this_); 
            assume $admissibility_pre($s, $phys_ptr_cast(P#_this_, ^mem_reg));
        }
        else
        {
          anon3:
            // assume @_vcc_stuttering_pre(@state, _this_); 
            assume $stuttering_pre($s, $phys_ptr_cast(P#_this_, ^mem_reg));
        }

      anon5:
        // @_vcc_havoc_others(_this_, @_vcc_typeof((struct mem_reg*)@null))
        call $havoc_others($phys_ptr_cast(P#_this_, ^mem_reg), ^mem_reg);
        assume $good_state_ext(#tok$1^15.1, $s);
        // assert true
        // assume ==>(@_vcc_is_stuttering_check, @_vcc_inv2(old(@prestate, @state), @state, _this_)); 
        assume $is_stuttering_check() ==> $inv2(old($s), $s, $phys_ptr_cast(P#_this_, ^mem_reg), ^mem_reg);
    }

  #exit:
}



function F#glob_reach() : $oset;

const unique cf#glob_reach: $pure_function;

axiom $function_arg_type(cf#glob_reach, 0, ^$#oset);

procedure glob_reach() returns ($result: $oset);
  free ensures $result == F#glob_reach();
  free ensures $call_transition(old($s), $s);



const unique ^$#_purecall_handler#1: $ctype;

axiom $def_fnptr_type(^$#_purecall_handler#1);

type $#_purecall_handler#1;

const unique ^$#_invalid_parameter_handler#2: $ctype;

axiom $def_fnptr_type(^$#_invalid_parameter_handler#2);

type $#_invalid_parameter_handler#2;

const unique ^$#split_memory_region.c..36263#3: $ctype;

axiom $def_fnptr_type(^$#split_memory_region.c..36263#3);

type $#split_memory_region.c..36263#3;

const unique ^$#_PtFuncCompare#4: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#4);

type $#_PtFuncCompare#4;

const unique ^$#_PtFuncCompare#5: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#5);

type $#_PtFuncCompare#5;

const unique ^$#_PtFuncCompare#6: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#6);

type $#_PtFuncCompare#6;

const unique ^$#_PtFuncCompare#7: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#7);

type $#_PtFuncCompare#7;

const unique ^$#_onexit_t#8: $ctype;

axiom $def_fnptr_type(^$#_onexit_t#8);

type $#_onexit_t#8;

function F#dll(#s: $state, SP#hd: $ptr) : bool;

const unique cf#dll: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#dll(#s, SP#hd) } 1 < $decreases_level ==> $is_null($phys_ptr_cast(SP#hd, ^mem_reg)) ==> F#dll(#s, SP#hd));

axiom $function_arg_type(cf#dll, 0, ^^bool);

axiom $function_arg_type(cf#dll, 1, $ptr_to(^mem_reg));

procedure dll(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^mem_reg)) ==> $result;
  free ensures $result == F#dll($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#dll_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#dll_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#dll_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^mem_reg)) ==> $oset_in($phys_ptr_cast(SP#hd, ^mem_reg), F#dll_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^mem_reg)) ==> F#dll_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#dll_reach, 0, ^$#oset);

axiom $function_arg_type(cf#dll_reach, 1, $ptr_to(^mem_reg));

procedure dll_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^mem_reg)) ==> $oset_in($phys_ptr_cast(SP#hd, ^mem_reg), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^mem_reg)) ==> $result == $oset_empty());
  free ensures $result == F#dll_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



procedure split_memory_region(P#curr: $ptr, P#offset: int) returns ($result: $ptr);
  requires $non_null($phys_ptr_cast(P#curr, ^mem_reg));
  requires F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg));
  requires P#offset > 0;
  requires $unchk_mod(^^i4, P#offset, 4096) == 0;
  requires $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) + P#offset < 2147483647;
  modifies $s, $cev_pc;
  ensures F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg));
  ensures F#dll($s, $phys_ptr_cast($result, ^mem_reg));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



implementation split_memory_region(P#curr: $ptr, P#offset: int) returns ($result: $ptr)
{
  var stmtexpr10#52: $state;
  var _dryad_S7#28: $state;
  var stmtexpr9#51: $state;
  var _dryad_S6#27: $state;
  var stmtexpr1#41: $state;
  var _dryad_S7#26: $state;
  var stmtexpr0#40: $state;
  var _dryad_S6#25: $state;
  var stmtexpr8#50: $state;
  var _dryad_S5#24: $state;
  var stmtexpr7#49: $state;
  var _dryad_S4#23: $state;
  var stmtexpr6#48: $state;
  var _dryad_S3#22: $state;
  var stmtexpr5#47: $state;
  var _dryad_S2#21: $state;
  var stmtexpr4#46: $state;
  var _dryad_S1#20: $state;
  var stmtexpr3#45: $state;
  var _dryad_S0#19: $state;
  var stmtexpr20#39: $state;
  var SL#_dryad_S17: $state;
  var stmtexpr19#38: $state;
  var SL#_dryad_S16: $state;
  var stmtexpr18#37: $state;
  var _dryad_S15#18: $state;
  var stmtexpr17#36: $state;
  var _dryad_S14#17: $state;
  var stmtexpr16#35: $state;
  var _dryad_S13#16: $state;
  var stmtexpr15#34: $state;
  var _dryad_S12#15: $state;
  var stmtexpr14#33: $state;
  var _dryad_S11#14: $state;
  var stmtexpr13#32: $state;
  var _dryad_S10#13: $state;
  var stmtexpr12#31: $state;
  var _dryad_S9#12: $state;
  var stmtexpr11#30: $state;
  var _dryad_S8#11: $state;
  var stmtexpr10#29: $ptr;
  var SL#curr5: $ptr;
  var stmtexpr9#28: $state;
  var _dryad_S7#10: $state;
  var stmtexpr8#27: $state;
  var _dryad_S6#9: $state;
  var stmtexpr7#26: $state;
  var _dryad_S5#8: $state;
  var stmtexpr6#25: $state;
  var _dryad_S4#7: $state;
  var stmtexpr5#24: $state;
  var _dryad_S3#6: $state;
  var stmtexpr4#23: $state;
  var _dryad_S2#5: $state;
  var stmtexpr3#22: $ptr;
  var SL#curr1: $ptr;
  var stmtexpr2#21: $state;
  var _dryad_S1#4: $state;
  var stmtexpr1#20: $oset;
  var stmtexpr0#19: $state;
  var _dryad_S0#3: $state;
  var L#bf: $ptr;
  var curr_s#2: int where $in_range_i4(curr_s#2);
  var curr_so#1: int where $in_range_i4(curr_so#1);
  var tmp_size#0: int where $in_range_i4(tmp_size#0);
  var stmtexpr17#18: $state;
  var SL#_dryad_S15: $state;
  var stmtexpr16#17: $state;
  var SL#_dryad_S14: $state;
  var stmtexpr15#16: $state;
  var SL#_dryad_S13: $state;
  var stmtexpr14#15: $state;
  var SL#_dryad_S12: $state;
  var stmtexpr13#14: $state;
  var SL#_dryad_S11: $state;
  var stmtexpr12#13: $state;
  var SL#_dryad_S10: $state;
  var stmtexpr11#12: $state;
  var SL#_dryad_S9: $state;
  var stmtexpr10#11: $state;
  var SL#_dryad_S8: $state;
  var stmtexpr9#10: $ptr;
  var SL#curr4: $ptr;
  var stmtexpr8#9: $state;
  var SL#_dryad_S7: $state;
  var stmtexpr7#8: $state;
  var SL#_dryad_S6: $state;
  var stmtexpr6#7: $state;
  var SL#_dryad_S5: $state;
  var stmtexpr5#6: $state;
  var SL#_dryad_S4: $state;
  var stmtexpr4#5: $state;
  var SL#_dryad_S3: $state;
  var stmtexpr3#4: $state;
  var SL#_dryad_S2: $state;
  var stmtexpr2#3: $state;
  var SL#_dryad_S1: $state;
  var stmtexpr1#2: $oset;
  var stmtexpr0#1: $state;
  var SL#_dryad_S0: $state;
  var L#curr_s: int where $in_range_i4(L#curr_s);
  var L#curr_so: int where $in_range_i4(L#curr_so);
  var L#tmp_size: int where $in_range_i4(L#tmp_size);
  var stmtexpr2#44: $ptr;
  var SL#curr0: $ptr;
  var L#old_next: $ptr;
  var L#next: $ptr;
  var stmtexpr1#43: $oset;
  var stmtexpr0#42: $oset;
  var SL#_dryad_G1: $oset;
  var SL#_dryad_G0: $oset;
  var #wrTime$3^5.3: int;
  var #stackframe: int;

  anon13:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$3^5.3, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$3^5.3 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$3^5.3, (lambda #p: $ptr :: false));
    // assume true
    // assume @in_range_i4(offset); 
    assume $in_range_i4(P#offset);
    // assume @decreases_level_is(2147483647); 
    assume 2147483647 == $decreases_level;
    // assume true
    //  --- Dryad annotated function --- 
    // _math \oset _dryad_G0; 
    // _math \oset _dryad_G1; 
    // _dryad_G0 := dll_reach(curr); 
    call SL#_dryad_G0 := dll_reach($phys_ptr_cast(P#curr, ^mem_reg));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset stmtexpr0#42; 
    // stmtexpr0#42 := _dryad_G0; 
    stmtexpr0#42 := SL#_dryad_G0;
    // _dryad_G1 := _dryad_G0; 
    SL#_dryad_G1 := SL#_dryad_G0;
    // _math \oset stmtexpr1#43; 
    // stmtexpr1#43 := _dryad_G1; 
    stmtexpr1#43 := SL#_dryad_G1;
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
    assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
    // struct mem_reg* next; 
    // struct mem_reg* old_next; 
    // assume ==>(@_vcc_ptr_neq_null(curr), &&(@_vcc_mutable(@state, curr), @writes_check(curr))); 
    assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> $mutable($s, $phys_ptr_cast(P#curr, ^mem_reg)) && $top_writable($s, #wrTime$3^5.3, $phys_ptr_cast(P#curr, ^mem_reg));
    // assert @reads_check_normal((curr->size)); 
    assert $thread_local($s, $phys_ptr_cast(P#curr, ^mem_reg));
    assume true;
    // if (>=(offset, *((curr->size)))) ...
    if (P#offset >= $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)))
    {
      anon7:
        // return (struct mem_reg*)@null; 
        $result := $phys_ptr_cast($null, ^mem_reg);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon8:
        // assert @_vcc_possibly_unreachable; 
        assert {:PossiblyUnreachable true} true;
    }

  anon14:
    // struct mem_reg* curr0; 
    // curr0 := curr; 
    SL#curr0 := $phys_ptr_cast(P#curr, ^mem_reg);
    // struct mem_reg* stmtexpr2#44; 
    // stmtexpr2#44 := curr0; 
    stmtexpr2#44 := $phys_ptr_cast(SL#curr0, ^mem_reg);
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
    assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
    // assert @reads_check_normal((curr->next)); 
    assert $thread_local($s, $phys_ptr_cast(P#curr, ^mem_reg));
    // old_next := *((curr->next)); 
    L#old_next := $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
    // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
    assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
    assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
    // next := (struct mem_reg*)@null; 
    L#next := $phys_ptr_cast($null, ^mem_reg);
    // assume ==>(@_vcc_ptr_neq_null(next), ==(dll(next), &&(&&(dll(*((next->next))), ==>(@_vcc_ptr_neq_null(*((next->next))), @_vcc_ptr_eq_pure(*((*((next->next))->prev)), next))), unchecked!(@_vcc_oset_in(next, dll_reach(*((next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(next), ==(dll_reach(next), @_vcc_oset_union(dll_reach(*((next->next))), @_vcc_oset_singleton(next)))); 
    assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#next, ^mem_reg)));
    // assert @reads_check_normal((curr->file_size)); 
    assert $thread_local($s, $phys_ptr_cast(P#curr, ^mem_reg));
    assume true;
    // if (>(offset, *((curr->file_size)))) ...
    if (P#offset > $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)))
    {
      anon9:
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll(next), &&(&&(dll(*((next->next))), ==>(@_vcc_ptr_neq_null(*((next->next))), @_vcc_ptr_eq_pure(*((*((next->next))->prev)), next))), unchecked!(@_vcc_oset_in(next, dll_reach(*((next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll_reach(next), @_vcc_oset_union(dll_reach(*((next->next))), @_vcc_oset_singleton(next)))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // int32_t tmp_size; 
        // int32_t curr_so; 
        // int32_t curr_s; 
        // _math \state _dryad_S0; 
        // _dryad_S0 := @_vcc_current_state(@state); 
        SL#_dryad_S0 := $current_state($s);
        // _math \state stmtexpr0#1; 
        // stmtexpr0#1 := _dryad_S0; 
        stmtexpr0#1 := SL#_dryad_S0;
        // next := _vcc_alloc(@_vcc_typeof((struct mem_reg*)@null)); 
        call L#next := $alloc(^mem_reg);
        assume $full_stop_ext(#tok$3^24.12, $s);
        // assume !(@_vcc_oset_in(next, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
        // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(next)); 
        SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#next, ^mem_reg)));
        // _math \oset stmtexpr1#2; 
        // stmtexpr1#2 := _dryad_G1; 
        stmtexpr1#2 := SL#_dryad_G1;
        // assume ==(glob_reach(), _dryad_G1); 
        assume F#glob_reach() == SL#_dryad_G1;
        // _math \state _dryad_S1; 
        // _dryad_S1 := @_vcc_current_state(@state); 
        SL#_dryad_S1 := $current_state($s);
        // _math \state stmtexpr2#3; 
        // stmtexpr2#3 := _dryad_S1; 
        stmtexpr2#3 := SL#_dryad_S1;
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll(next), &&(&&(dll(*((next->next))), ==>(@_vcc_ptr_neq_null(*((next->next))), @_vcc_ptr_eq_pure(*((*((next->next))->prev)), next))), unchecked!(@_vcc_oset_in(next, dll_reach(*((next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll_reach(next), @_vcc_oset_union(dll_reach(*((next->next))), @_vcc_oset_singleton(next)))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S0, dll_reach(curr0)))), ==(old(_dryad_S0, dll(curr0)), old(_dryad_S1, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S0, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(SL#_dryad_S0, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(SL#_dryad_S1, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S0, dll_reach(curr0)))), ==(old(_dryad_S0, dll_reach(curr0)), old(_dryad_S1, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S0, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S0, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(SL#_dryad_S1, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S0, dll_reach(old_next)))), ==(old(_dryad_S0, dll(old_next)), old(_dryad_S1, dll(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S0, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(SL#_dryad_S0, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(SL#_dryad_S1, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S0, dll_reach(old_next)))), ==(old(_dryad_S0, dll_reach(old_next)), old(_dryad_S1, dll_reach(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S0, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S0, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(SL#_dryad_S1, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S0, dll_reach(curr)))), ==(old(_dryad_S0, dll(curr)), old(_dryad_S1, dll(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S0, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(SL#_dryad_S0, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(SL#_dryad_S1, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S0, dll_reach(curr)))), ==(old(_dryad_S0, dll_reach(curr)), old(_dryad_S1, dll_reach(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S0, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S0, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(SL#_dryad_S1, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume @_vcc_ptr_neq_null(next); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg));
        // _math \state _dryad_S2; 
        // _dryad_S2 := @_vcc_current_state(@state); 
        SL#_dryad_S2 := $current_state($s);
        // _math \state stmtexpr3#4; 
        // stmtexpr3#4 := _dryad_S2; 
        stmtexpr3#4 := SL#_dryad_S2;
        // assert @prim_writes_check((next->file)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#next, ^mem_reg), mem_reg.file));
        // *(next->file) := (struct backing_file*)@null; 
        call $write_int(mem_reg.file, $phys_ptr_cast(L#next, ^mem_reg), $ptr_to_int($phys_ptr_cast($null, ^backing_file)));
        assume $full_stop_ext(#tok$3^26.5, $s);
        // _math \state _dryad_S3; 
        // _dryad_S3 := @_vcc_current_state(@state); 
        SL#_dryad_S3 := $current_state($s);
        // _math \state stmtexpr4#5; 
        // stmtexpr4#5 := _dryad_S3; 
        stmtexpr4#5 := SL#_dryad_S3;
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2, dll_reach(*((next->prev)))))), ==(old(_dryad_S2, dll(*((next->prev)))), old(_dryad_S3, dll(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2, dll_reach(*((next->prev)))))), ==(old(_dryad_S2, dll_reach(*((next->prev)))), old(_dryad_S3, dll_reach(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2, dll_reach(*((next->next)))))), ==(old(_dryad_S2, dll(*((next->next)))), old(_dryad_S3, dll(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2, dll_reach(*((next->next)))))), ==(old(_dryad_S2, dll_reach(*((next->next)))), old(_dryad_S3, dll_reach(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==(old(_dryad_S2, dll(curr0)), old(_dryad_S3, dll(curr0))); 
        assume F#dll(SL#_dryad_S2, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(SL#_dryad_S3, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S2, dll_reach(curr0)), old(_dryad_S3, dll_reach(curr0))); 
        assume F#dll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(SL#_dryad_S3, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S2, dll(old_next)), old(_dryad_S3, dll(old_next))); 
        assume F#dll(SL#_dryad_S2, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(SL#_dryad_S3, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S2, dll_reach(old_next)), old(_dryad_S3, dll_reach(old_next))); 
        assume F#dll_reach(SL#_dryad_S2, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(SL#_dryad_S3, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S2, dll(next)), old(_dryad_S3, dll(next))); 
        assume F#dll(SL#_dryad_S2, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(SL#_dryad_S3, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S2, dll_reach(next)), old(_dryad_S3, dll_reach(next))); 
        assume F#dll_reach(SL#_dryad_S2, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(SL#_dryad_S3, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S2, dll(curr)), old(_dryad_S3, dll(curr))); 
        assume F#dll(SL#_dryad_S2, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(SL#_dryad_S3, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==(old(_dryad_S2, dll_reach(curr)), old(_dryad_S3, dll_reach(curr))); 
        assume F#dll_reach(SL#_dryad_S2, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(SL#_dryad_S3, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2, dll_reach(curr0)))), ==(old(_dryad_S2, dll(curr0)), old(_dryad_S3, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(SL#_dryad_S2, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(SL#_dryad_S3, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2, dll_reach(curr0)))), ==(old(_dryad_S2, dll_reach(curr0)), old(_dryad_S3, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(SL#_dryad_S3, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2, dll_reach(old_next)))), ==(old(_dryad_S2, dll(old_next)), old(_dryad_S3, dll(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S2, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(SL#_dryad_S2, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(SL#_dryad_S3, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2, dll_reach(old_next)))), ==(old(_dryad_S2, dll_reach(old_next)), old(_dryad_S3, dll_reach(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S2, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S2, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(SL#_dryad_S3, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2, dll_reach(curr)))), ==(old(_dryad_S2, dll(curr)), old(_dryad_S3, dll(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S2, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(SL#_dryad_S2, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(SL#_dryad_S3, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2, dll_reach(curr)))), ==(old(_dryad_S2, dll_reach(curr)), old(_dryad_S3, dll_reach(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S2, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S2, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(SL#_dryad_S3, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S2, *((curr0->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S2, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_offset)), old(_dryad_S2, *((curr0->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S2, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_size)), old(_dryad_S2, *((curr0->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S2, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->start_address)), old(_dryad_S2, *((curr0->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S2, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->size)), old(_dryad_S2, *((curr0->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S2, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S2, *((curr0->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S2, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S2, *((curr0->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S2, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S2, *((old_next->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S2, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_offset)), old(_dryad_S2, *((old_next->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S2, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_size)), old(_dryad_S2, *((old_next->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S2, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->start_address)), old(_dryad_S2, *((old_next->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S2, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->size)), old(_dryad_S2, *((old_next->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S2, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S2, *((old_next->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S2, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S2, *((old_next->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S2, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->file)), old(_dryad_S2, *((curr->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S2, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_offset)), old(_dryad_S2, *((curr->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S2, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_size)), old(_dryad_S2, *((curr->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S2, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->start_address)), old(_dryad_S2, *((curr->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S2, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->size)), old(_dryad_S2, *((curr->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S2, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->prev)), old(_dryad_S2, *((curr->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S2, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S2, *((curr->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S2, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // _math \state _dryad_S4; 
        // _dryad_S4 := @_vcc_current_state(@state); 
        SL#_dryad_S4 := $current_state($s);
        // _math \state stmtexpr5#6; 
        // stmtexpr5#6 := _dryad_S4; 
        stmtexpr5#6 := SL#_dryad_S4;
        // assert @prim_writes_check((next->file_offset)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#next, ^mem_reg), mem_reg.file_offset));
        // *(next->file_offset) := 0; 
        call $write_int(mem_reg.file_offset, $phys_ptr_cast(L#next, ^mem_reg), 0);
        assume $full_stop_ext(#tok$3^27.5, $s);
        // _math \state _dryad_S5; 
        // _dryad_S5 := @_vcc_current_state(@state); 
        SL#_dryad_S5 := $current_state($s);
        // _math \state stmtexpr6#7; 
        // stmtexpr6#7 := _dryad_S5; 
        stmtexpr6#7 := SL#_dryad_S5;
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4, dll_reach(*((next->prev)))))), ==(old(_dryad_S4, dll(*((next->prev)))), old(_dryad_S5, dll(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4, dll_reach(*((next->prev)))))), ==(old(_dryad_S4, dll_reach(*((next->prev)))), old(_dryad_S5, dll_reach(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4, dll_reach(*((next->next)))))), ==(old(_dryad_S4, dll(*((next->next)))), old(_dryad_S5, dll(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4, dll_reach(*((next->next)))))), ==(old(_dryad_S4, dll_reach(*((next->next)))), old(_dryad_S5, dll_reach(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==(old(_dryad_S4, dll(curr0)), old(_dryad_S5, dll(curr0))); 
        assume F#dll(SL#_dryad_S4, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(SL#_dryad_S5, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S4, dll_reach(curr0)), old(_dryad_S5, dll_reach(curr0))); 
        assume F#dll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(SL#_dryad_S5, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S4, dll(old_next)), old(_dryad_S5, dll(old_next))); 
        assume F#dll(SL#_dryad_S4, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(SL#_dryad_S5, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S4, dll_reach(old_next)), old(_dryad_S5, dll_reach(old_next))); 
        assume F#dll_reach(SL#_dryad_S4, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(SL#_dryad_S5, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S4, dll(next)), old(_dryad_S5, dll(next))); 
        assume F#dll(SL#_dryad_S4, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(SL#_dryad_S5, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S4, dll_reach(next)), old(_dryad_S5, dll_reach(next))); 
        assume F#dll_reach(SL#_dryad_S4, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(SL#_dryad_S5, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S4, dll(curr)), old(_dryad_S5, dll(curr))); 
        assume F#dll(SL#_dryad_S4, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(SL#_dryad_S5, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==(old(_dryad_S4, dll_reach(curr)), old(_dryad_S5, dll_reach(curr))); 
        assume F#dll_reach(SL#_dryad_S4, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(SL#_dryad_S5, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4, dll_reach(curr0)))), ==(old(_dryad_S4, dll(curr0)), old(_dryad_S5, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(SL#_dryad_S4, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(SL#_dryad_S5, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4, dll_reach(curr0)))), ==(old(_dryad_S4, dll_reach(curr0)), old(_dryad_S5, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(SL#_dryad_S5, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4, dll_reach(old_next)))), ==(old(_dryad_S4, dll(old_next)), old(_dryad_S5, dll(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S4, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(SL#_dryad_S4, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(SL#_dryad_S5, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4, dll_reach(old_next)))), ==(old(_dryad_S4, dll_reach(old_next)), old(_dryad_S5, dll_reach(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S4, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S4, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(SL#_dryad_S5, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4, dll_reach(curr)))), ==(old(_dryad_S4, dll(curr)), old(_dryad_S5, dll(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S4, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(SL#_dryad_S4, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(SL#_dryad_S5, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4, dll_reach(curr)))), ==(old(_dryad_S4, dll_reach(curr)), old(_dryad_S5, dll_reach(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S4, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S4, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(SL#_dryad_S5, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S4, *((curr0->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S4, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_offset)), old(_dryad_S4, *((curr0->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S4, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_size)), old(_dryad_S4, *((curr0->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S4, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->start_address)), old(_dryad_S4, *((curr0->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S4, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->size)), old(_dryad_S4, *((curr0->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S4, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S4, *((curr0->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S4, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S4, *((curr0->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S4, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S4, *((old_next->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S4, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_offset)), old(_dryad_S4, *((old_next->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S4, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_size)), old(_dryad_S4, *((old_next->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S4, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->start_address)), old(_dryad_S4, *((old_next->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S4, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->size)), old(_dryad_S4, *((old_next->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S4, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S4, *((old_next->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S4, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S4, *((old_next->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S4, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->file)), old(_dryad_S4, *((curr->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S4, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_offset)), old(_dryad_S4, *((curr->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S4, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_size)), old(_dryad_S4, *((curr->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S4, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->start_address)), old(_dryad_S4, *((curr->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S4, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->size)), old(_dryad_S4, *((curr->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S4, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->prev)), old(_dryad_S4, *((curr->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S4, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S4, *((curr->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S4, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // _math \state _dryad_S6; 
        // _dryad_S6 := @_vcc_current_state(@state); 
        SL#_dryad_S6 := $current_state($s);
        // _math \state stmtexpr7#8; 
        // stmtexpr7#8 := _dryad_S6; 
        stmtexpr7#8 := SL#_dryad_S6;
        // assert @prim_writes_check((next->file_size)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#next, ^mem_reg), mem_reg.file_size));
        // *(next->file_size) := 0; 
        call $write_int(mem_reg.file_size, $phys_ptr_cast(L#next, ^mem_reg), 0);
        assume $full_stop_ext(#tok$3^28.5, $s);
        // _math \state _dryad_S7; 
        // _dryad_S7 := @_vcc_current_state(@state); 
        SL#_dryad_S7 := $current_state($s);
        // _math \state stmtexpr8#9; 
        // stmtexpr8#9 := _dryad_S7; 
        stmtexpr8#9 := SL#_dryad_S7;
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6, dll_reach(*((next->prev)))))), ==(old(_dryad_S6, dll(*((next->prev)))), old(_dryad_S7, dll(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6, dll_reach(*((next->prev)))))), ==(old(_dryad_S6, dll_reach(*((next->prev)))), old(_dryad_S7, dll_reach(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6, dll_reach(*((next->next)))))), ==(old(_dryad_S6, dll(*((next->next)))), old(_dryad_S7, dll(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6, dll_reach(*((next->next)))))), ==(old(_dryad_S6, dll_reach(*((next->next)))), old(_dryad_S7, dll_reach(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==(old(_dryad_S6, dll(curr0)), old(_dryad_S7, dll(curr0))); 
        assume F#dll(SL#_dryad_S6, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(SL#_dryad_S7, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S6, dll_reach(curr0)), old(_dryad_S7, dll_reach(curr0))); 
        assume F#dll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S6, dll(old_next)), old(_dryad_S7, dll(old_next))); 
        assume F#dll(SL#_dryad_S6, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(SL#_dryad_S7, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S6, dll_reach(old_next)), old(_dryad_S7, dll_reach(old_next))); 
        assume F#dll_reach(SL#_dryad_S6, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(SL#_dryad_S7, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S6, dll(next)), old(_dryad_S7, dll(next))); 
        assume F#dll(SL#_dryad_S6, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(SL#_dryad_S7, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S6, dll_reach(next)), old(_dryad_S7, dll_reach(next))); 
        assume F#dll_reach(SL#_dryad_S6, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(SL#_dryad_S7, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S6, dll(curr)), old(_dryad_S7, dll(curr))); 
        assume F#dll(SL#_dryad_S6, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(SL#_dryad_S7, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==(old(_dryad_S6, dll_reach(curr)), old(_dryad_S7, dll_reach(curr))); 
        assume F#dll_reach(SL#_dryad_S6, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(SL#_dryad_S7, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6, dll_reach(curr0)))), ==(old(_dryad_S6, dll(curr0)), old(_dryad_S7, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(SL#_dryad_S6, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(SL#_dryad_S7, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6, dll_reach(curr0)))), ==(old(_dryad_S6, dll_reach(curr0)), old(_dryad_S7, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6, dll_reach(old_next)))), ==(old(_dryad_S6, dll(old_next)), old(_dryad_S7, dll(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S6, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(SL#_dryad_S6, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(SL#_dryad_S7, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6, dll_reach(old_next)))), ==(old(_dryad_S6, dll_reach(old_next)), old(_dryad_S7, dll_reach(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S6, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S6, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(SL#_dryad_S7, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6, dll_reach(curr)))), ==(old(_dryad_S6, dll(curr)), old(_dryad_S7, dll(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S6, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(SL#_dryad_S6, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(SL#_dryad_S7, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6, dll_reach(curr)))), ==(old(_dryad_S6, dll_reach(curr)), old(_dryad_S7, dll_reach(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S6, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S6, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(SL#_dryad_S7, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S6, *((curr0->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S6, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_offset)), old(_dryad_S6, *((curr0->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S6, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_size)), old(_dryad_S6, *((curr0->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S6, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->start_address)), old(_dryad_S6, *((curr0->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S6, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->size)), old(_dryad_S6, *((curr0->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S6, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S6, *((curr0->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S6, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S6, *((curr0->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S6, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S6, *((old_next->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S6, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_offset)), old(_dryad_S6, *((old_next->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S6, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_size)), old(_dryad_S6, *((old_next->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S6, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->start_address)), old(_dryad_S6, *((old_next->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S6, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->size)), old(_dryad_S6, *((old_next->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S6, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S6, *((old_next->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S6, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S6, *((old_next->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S6, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->file)), old(_dryad_S6, *((curr->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S6, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_offset)), old(_dryad_S6, *((curr->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S6, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_size)), old(_dryad_S6, *((curr->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S6, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->start_address)), old(_dryad_S6, *((curr->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S6, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->size)), old(_dryad_S6, *((curr->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S6, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->prev)), old(_dryad_S6, *((curr->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S6, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S6, *((curr->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S6, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // struct mem_reg* curr4; 
        // curr4 := curr; 
        SL#curr4 := $phys_ptr_cast(P#curr, ^mem_reg);
        // struct mem_reg* stmtexpr9#10; 
        // stmtexpr9#10 := curr4; 
        stmtexpr9#10 := $phys_ptr_cast(SL#curr4, ^mem_reg);
        // assert @reads_check_normal((curr->start_address)); 
        assert $thread_local($s, $phys_ptr_cast(P#curr, ^mem_reg));
        // curr_s := *((curr->start_address)); 
        L#curr_s := $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
        // assert @in_range_i4(+(curr_s, offset)); 
        assert $in_range_i4(L#curr_s + P#offset);
        // curr_so := +(curr_s, offset); 
        L#curr_so := L#curr_s + P#offset;
        // _math \state _dryad_S8; 
        // _dryad_S8 := @_vcc_current_state(@state); 
        SL#_dryad_S8 := $current_state($s);
        // _math \state stmtexpr10#11; 
        // stmtexpr10#11 := _dryad_S8; 
        stmtexpr10#11 := SL#_dryad_S8;
        // assert @prim_writes_check((next->start_address)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#next, ^mem_reg), mem_reg.start_address));
        // *(next->start_address) := curr_so; 
        call $write_int(mem_reg.start_address, $phys_ptr_cast(L#next, ^mem_reg), L#curr_so);
        assume $full_stop_ext(#tok$3^31.5, $s);
        // _math \state _dryad_S9; 
        // _dryad_S9 := @_vcc_current_state(@state); 
        SL#_dryad_S9 := $current_state($s);
        // _math \state stmtexpr11#12; 
        // stmtexpr11#12 := _dryad_S9; 
        stmtexpr11#12 := SL#_dryad_S9;
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8, dll_reach(*((next->prev)))))), ==(old(_dryad_S8, dll(*((next->prev)))), old(_dryad_S9, dll(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(SL#_dryad_S9, $rd_phys_ptr(SL#_dryad_S9, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8, dll_reach(*((next->prev)))))), ==(old(_dryad_S8, dll_reach(*((next->prev)))), old(_dryad_S9, dll_reach(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(SL#_dryad_S9, $rd_phys_ptr(SL#_dryad_S9, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8, dll_reach(*((next->next)))))), ==(old(_dryad_S8, dll(*((next->next)))), old(_dryad_S9, dll(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(SL#_dryad_S9, $rd_phys_ptr(SL#_dryad_S9, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8, dll_reach(*((next->next)))))), ==(old(_dryad_S8, dll_reach(*((next->next)))), old(_dryad_S9, dll_reach(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(SL#_dryad_S9, $rd_phys_ptr(SL#_dryad_S9, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==(old(_dryad_S8, dll(curr4)), old(_dryad_S9, dll(curr4))); 
        assume F#dll(SL#_dryad_S8, $phys_ptr_cast(SL#curr4, ^mem_reg)) == F#dll(SL#_dryad_S9, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==(old(_dryad_S8, dll_reach(curr4)), old(_dryad_S9, dll_reach(curr4))); 
        assume F#dll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr4, ^mem_reg)) == F#dll_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==(old(_dryad_S8, dll(curr0)), old(_dryad_S9, dll(curr0))); 
        assume F#dll(SL#_dryad_S8, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(SL#_dryad_S9, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S8, dll_reach(curr0)), old(_dryad_S9, dll_reach(curr0))); 
        assume F#dll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S8, dll(old_next)), old(_dryad_S9, dll(old_next))); 
        assume F#dll(SL#_dryad_S8, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(SL#_dryad_S9, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S8, dll_reach(old_next)), old(_dryad_S9, dll_reach(old_next))); 
        assume F#dll_reach(SL#_dryad_S8, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(SL#_dryad_S9, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S8, dll(next)), old(_dryad_S9, dll(next))); 
        assume F#dll(SL#_dryad_S8, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(SL#_dryad_S9, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S8, dll_reach(next)), old(_dryad_S9, dll_reach(next))); 
        assume F#dll_reach(SL#_dryad_S8, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(SL#_dryad_S9, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S8, dll(curr)), old(_dryad_S9, dll(curr))); 
        assume F#dll(SL#_dryad_S8, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(SL#_dryad_S9, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==(old(_dryad_S8, dll_reach(curr)), old(_dryad_S9, dll_reach(curr))); 
        assume F#dll_reach(SL#_dryad_S8, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(SL#_dryad_S9, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8, dll_reach(curr4)))), ==(old(_dryad_S8, dll(curr4)), old(_dryad_S9, dll(curr4)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr4, ^mem_reg))) ==> F#dll(SL#_dryad_S8, $phys_ptr_cast(SL#curr4, ^mem_reg)) == F#dll(SL#_dryad_S9, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8, dll_reach(curr4)))), ==(old(_dryad_S8, dll_reach(curr4)), old(_dryad_S9, dll_reach(curr4)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr4, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr4, ^mem_reg)) == F#dll_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8, dll_reach(curr0)))), ==(old(_dryad_S8, dll(curr0)), old(_dryad_S9, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(SL#_dryad_S8, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(SL#_dryad_S9, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8, dll_reach(curr0)))), ==(old(_dryad_S8, dll_reach(curr0)), old(_dryad_S9, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8, dll_reach(old_next)))), ==(old(_dryad_S8, dll(old_next)), old(_dryad_S9, dll(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S8, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(SL#_dryad_S8, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(SL#_dryad_S9, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8, dll_reach(old_next)))), ==(old(_dryad_S8, dll_reach(old_next)), old(_dryad_S9, dll_reach(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S8, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S8, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(SL#_dryad_S9, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8, dll_reach(curr)))), ==(old(_dryad_S8, dll(curr)), old(_dryad_S9, dll(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S8, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(SL#_dryad_S8, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(SL#_dryad_S9, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8, dll_reach(curr)))), ==(old(_dryad_S8, dll_reach(curr)), old(_dryad_S9, dll_reach(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S8, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S8, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(SL#_dryad_S9, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), @_vcc_ptr_eq_pure(*((curr4->file)), old(_dryad_S8, *((curr4->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr4, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S8, mem_reg.file, $phys_ptr_cast(SL#curr4, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), ==(*((curr4->file_offset)), old(_dryad_S8, *((curr4->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $rd_inv(SL#_dryad_S8, mem_reg.file_offset, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), ==(*((curr4->file_size)), old(_dryad_S8, *((curr4->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $rd_inv(SL#_dryad_S8, mem_reg.file_size, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), ==(*((curr4->start_address)), old(_dryad_S8, *((curr4->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $rd_inv(SL#_dryad_S8, mem_reg.start_address, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), ==(*((curr4->size)), old(_dryad_S8, *((curr4->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $rd_inv(SL#_dryad_S8, mem_reg.size, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), @_vcc_ptr_eq_pure(*((curr4->prev)), old(_dryad_S8, *((curr4->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S8, mem_reg.prev, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), @_vcc_ptr_eq_pure(*((curr4->next)), old(_dryad_S8, *((curr4->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S8, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S8, *((curr0->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S8, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_offset)), old(_dryad_S8, *((curr0->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S8, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_size)), old(_dryad_S8, *((curr0->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S8, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->start_address)), old(_dryad_S8, *((curr0->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S8, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->size)), old(_dryad_S8, *((curr0->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S8, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S8, *((curr0->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S8, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S8, *((curr0->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S8, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S8, *((old_next->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S8, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_offset)), old(_dryad_S8, *((old_next->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S8, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_size)), old(_dryad_S8, *((old_next->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S8, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->start_address)), old(_dryad_S8, *((old_next->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S8, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->size)), old(_dryad_S8, *((old_next->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S8, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S8, *((old_next->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S8, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S8, *((old_next->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S8, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->file)), old(_dryad_S8, *((curr->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S8, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_offset)), old(_dryad_S8, *((curr->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S8, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_size)), old(_dryad_S8, *((curr->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S8, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->start_address)), old(_dryad_S8, *((curr->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S8, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->size)), old(_dryad_S8, *((curr->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S8, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->prev)), old(_dryad_S8, *((curr->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S8, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S8, *((curr->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S8, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(@_vcc_ptr_neq_null(curr4), ==(dll(curr4), &&(&&(dll(*((curr4->next))), ==>(@_vcc_ptr_neq_null(*((curr4->next))), @_vcc_ptr_eq_pure(*((*((curr4->next))->prev)), curr4))), unchecked!(@_vcc_oset_in(curr4, dll_reach(*((curr4->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr4, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr4, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr4, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr4), ==(dll_reach(curr4), @_vcc_oset_union(dll_reach(*((curr4->next))), @_vcc_oset_singleton(curr4)))); 
        assume $non_null($phys_ptr_cast(SL#curr4, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr4, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // assert @in_range_i4(-(*((curr->size)), offset)); 
        assert $in_range_i4($rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) - P#offset);
        // assert @reads_check_normal((curr->size)); 
        assert $thread_local($s, $phys_ptr_cast(P#curr, ^mem_reg));
        // tmp_size := -(*((curr->size)), offset); 
        L#tmp_size := $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) - P#offset;
        // _math \state _dryad_S10; 
        // _dryad_S10 := @_vcc_current_state(@state); 
        SL#_dryad_S10 := $current_state($s);
        // _math \state stmtexpr12#13; 
        // stmtexpr12#13 := _dryad_S10; 
        stmtexpr12#13 := SL#_dryad_S10;
        // assert @prim_writes_check((next->size)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#next, ^mem_reg), mem_reg.size));
        // *(next->size) := tmp_size; 
        call $write_int(mem_reg.size, $phys_ptr_cast(L#next, ^mem_reg), L#tmp_size);
        assume $full_stop_ext(#tok$3^33.5, $s);
        // _math \state _dryad_S11; 
        // _dryad_S11 := @_vcc_current_state(@state); 
        SL#_dryad_S11 := $current_state($s);
        // _math \state stmtexpr13#14; 
        // stmtexpr13#14 := _dryad_S11; 
        stmtexpr13#14 := SL#_dryad_S11;
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10, dll_reach(*((next->prev)))))), ==(old(_dryad_S10, dll(*((next->prev)))), old(_dryad_S11, dll(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10, dll_reach(*((next->prev)))))), ==(old(_dryad_S10, dll_reach(*((next->prev)))), old(_dryad_S11, dll_reach(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10, dll_reach(*((next->next)))))), ==(old(_dryad_S10, dll(*((next->next)))), old(_dryad_S11, dll(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10, dll_reach(*((next->next)))))), ==(old(_dryad_S10, dll_reach(*((next->next)))), old(_dryad_S11, dll_reach(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==(old(_dryad_S10, dll(curr4)), old(_dryad_S11, dll(curr4))); 
        assume F#dll(SL#_dryad_S10, $phys_ptr_cast(SL#curr4, ^mem_reg)) == F#dll(SL#_dryad_S11, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==(old(_dryad_S10, dll_reach(curr4)), old(_dryad_S11, dll_reach(curr4))); 
        assume F#dll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr4, ^mem_reg)) == F#dll_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==(old(_dryad_S10, dll(curr0)), old(_dryad_S11, dll(curr0))); 
        assume F#dll(SL#_dryad_S10, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(SL#_dryad_S11, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S10, dll_reach(curr0)), old(_dryad_S11, dll_reach(curr0))); 
        assume F#dll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S10, dll(old_next)), old(_dryad_S11, dll(old_next))); 
        assume F#dll(SL#_dryad_S10, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(SL#_dryad_S11, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S10, dll_reach(old_next)), old(_dryad_S11, dll_reach(old_next))); 
        assume F#dll_reach(SL#_dryad_S10, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(SL#_dryad_S11, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S10, dll(next)), old(_dryad_S11, dll(next))); 
        assume F#dll(SL#_dryad_S10, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(SL#_dryad_S11, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S10, dll_reach(next)), old(_dryad_S11, dll_reach(next))); 
        assume F#dll_reach(SL#_dryad_S10, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(SL#_dryad_S11, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S10, dll(curr)), old(_dryad_S11, dll(curr))); 
        assume F#dll(SL#_dryad_S10, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(SL#_dryad_S11, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==(old(_dryad_S10, dll_reach(curr)), old(_dryad_S11, dll_reach(curr))); 
        assume F#dll_reach(SL#_dryad_S10, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(SL#_dryad_S11, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10, dll_reach(curr4)))), ==(old(_dryad_S10, dll(curr4)), old(_dryad_S11, dll(curr4)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr4, ^mem_reg))) ==> F#dll(SL#_dryad_S10, $phys_ptr_cast(SL#curr4, ^mem_reg)) == F#dll(SL#_dryad_S11, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10, dll_reach(curr4)))), ==(old(_dryad_S10, dll_reach(curr4)), old(_dryad_S11, dll_reach(curr4)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr4, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr4, ^mem_reg)) == F#dll_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10, dll_reach(curr0)))), ==(old(_dryad_S10, dll(curr0)), old(_dryad_S11, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(SL#_dryad_S10, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(SL#_dryad_S11, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10, dll_reach(curr0)))), ==(old(_dryad_S10, dll_reach(curr0)), old(_dryad_S11, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10, dll_reach(old_next)))), ==(old(_dryad_S10, dll(old_next)), old(_dryad_S11, dll(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S10, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(SL#_dryad_S10, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(SL#_dryad_S11, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10, dll_reach(old_next)))), ==(old(_dryad_S10, dll_reach(old_next)), old(_dryad_S11, dll_reach(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S10, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S10, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(SL#_dryad_S11, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10, dll_reach(curr)))), ==(old(_dryad_S10, dll(curr)), old(_dryad_S11, dll(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S10, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(SL#_dryad_S10, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(SL#_dryad_S11, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10, dll_reach(curr)))), ==(old(_dryad_S10, dll_reach(curr)), old(_dryad_S11, dll_reach(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S10, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S10, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(SL#_dryad_S11, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), @_vcc_ptr_eq_pure(*((curr4->file)), old(_dryad_S10, *((curr4->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr4, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S10, mem_reg.file, $phys_ptr_cast(SL#curr4, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), ==(*((curr4->file_offset)), old(_dryad_S10, *((curr4->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $rd_inv(SL#_dryad_S10, mem_reg.file_offset, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), ==(*((curr4->file_size)), old(_dryad_S10, *((curr4->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $rd_inv(SL#_dryad_S10, mem_reg.file_size, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), ==(*((curr4->start_address)), old(_dryad_S10, *((curr4->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $rd_inv(SL#_dryad_S10, mem_reg.start_address, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), ==(*((curr4->size)), old(_dryad_S10, *((curr4->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $rd_inv(SL#_dryad_S10, mem_reg.size, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), @_vcc_ptr_eq_pure(*((curr4->prev)), old(_dryad_S10, *((curr4->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S10, mem_reg.prev, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), @_vcc_ptr_eq_pure(*((curr4->next)), old(_dryad_S10, *((curr4->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S10, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S10, *((curr0->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S10, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_offset)), old(_dryad_S10, *((curr0->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S10, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_size)), old(_dryad_S10, *((curr0->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S10, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->start_address)), old(_dryad_S10, *((curr0->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S10, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->size)), old(_dryad_S10, *((curr0->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S10, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S10, *((curr0->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S10, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S10, *((curr0->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S10, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S10, *((old_next->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S10, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_offset)), old(_dryad_S10, *((old_next->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S10, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_size)), old(_dryad_S10, *((old_next->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S10, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->start_address)), old(_dryad_S10, *((old_next->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S10, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->size)), old(_dryad_S10, *((old_next->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S10, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S10, *((old_next->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S10, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S10, *((old_next->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S10, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->file)), old(_dryad_S10, *((curr->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S10, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_offset)), old(_dryad_S10, *((curr->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S10, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_size)), old(_dryad_S10, *((curr->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S10, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->start_address)), old(_dryad_S10, *((curr->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S10, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->size)), old(_dryad_S10, *((curr->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S10, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->prev)), old(_dryad_S10, *((curr->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S10, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S10, *((curr->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S10, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(@_vcc_ptr_neq_null(curr4), ==(dll(curr4), &&(&&(dll(*((curr4->next))), ==>(@_vcc_ptr_neq_null(*((curr4->next))), @_vcc_ptr_eq_pure(*((*((curr4->next))->prev)), curr4))), unchecked!(@_vcc_oset_in(curr4, dll_reach(*((curr4->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr4, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr4, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr4, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr4), ==(dll_reach(curr4), @_vcc_oset_union(dll_reach(*((curr4->next))), @_vcc_oset_singleton(curr4)))); 
        assume $non_null($phys_ptr_cast(SL#curr4, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr4, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // _math \state _dryad_S12; 
        // _dryad_S12 := @_vcc_current_state(@state); 
        SL#_dryad_S12 := $current_state($s);
        // _math \state stmtexpr14#15; 
        // stmtexpr14#15 := _dryad_S12; 
        stmtexpr14#15 := SL#_dryad_S12;
        // assert @prim_writes_check((next->prev)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#next, ^mem_reg), mem_reg.prev));
        // *(next->prev) := (struct mem_reg*)@null; 
        call $write_int(mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), $ptr_to_int($phys_ptr_cast($null, ^mem_reg)));
        assume $full_stop_ext(#tok$3^34.5, $s);
        // _math \state _dryad_S13; 
        // _dryad_S13 := @_vcc_current_state(@state); 
        SL#_dryad_S13 := $current_state($s);
        // _math \state stmtexpr15#16; 
        // stmtexpr15#16 := _dryad_S13; 
        stmtexpr15#16 := SL#_dryad_S13;
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12, dll_reach(*((next->next)))))), ==(old(_dryad_S12, dll(*((next->next)))), old(_dryad_S13, dll(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S12, $rd_phys_ptr(SL#_dryad_S12, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(SL#_dryad_S12, $rd_phys_ptr(SL#_dryad_S12, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(SL#_dryad_S13, $rd_phys_ptr(SL#_dryad_S13, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12, dll_reach(*((next->next)))))), ==(old(_dryad_S12, dll_reach(*((next->next)))), old(_dryad_S13, dll_reach(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S12, $rd_phys_ptr(SL#_dryad_S12, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(SL#_dryad_S12, $rd_phys_ptr(SL#_dryad_S12, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(SL#_dryad_S13, $rd_phys_ptr(SL#_dryad_S13, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==(old(_dryad_S12, dll(curr4)), old(_dryad_S13, dll(curr4))); 
        assume F#dll(SL#_dryad_S12, $phys_ptr_cast(SL#curr4, ^mem_reg)) == F#dll(SL#_dryad_S13, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==(old(_dryad_S12, dll_reach(curr4)), old(_dryad_S13, dll_reach(curr4))); 
        assume F#dll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr4, ^mem_reg)) == F#dll_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==(old(_dryad_S12, dll(curr0)), old(_dryad_S13, dll(curr0))); 
        assume F#dll(SL#_dryad_S12, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(SL#_dryad_S13, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S12, dll_reach(curr0)), old(_dryad_S13, dll_reach(curr0))); 
        assume F#dll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S12, dll(old_next)), old(_dryad_S13, dll(old_next))); 
        assume F#dll(SL#_dryad_S12, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(SL#_dryad_S13, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S12, dll_reach(old_next)), old(_dryad_S13, dll_reach(old_next))); 
        assume F#dll_reach(SL#_dryad_S12, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(SL#_dryad_S13, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S12, dll(next)), old(_dryad_S13, dll(next))); 
        assume F#dll(SL#_dryad_S12, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(SL#_dryad_S13, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S12, dll_reach(next)), old(_dryad_S13, dll_reach(next))); 
        assume F#dll_reach(SL#_dryad_S12, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(SL#_dryad_S13, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S12, dll(curr)), old(_dryad_S13, dll(curr))); 
        assume F#dll(SL#_dryad_S12, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(SL#_dryad_S13, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==(old(_dryad_S12, dll_reach(curr)), old(_dryad_S13, dll_reach(curr))); 
        assume F#dll_reach(SL#_dryad_S12, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(SL#_dryad_S13, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12, dll_reach(curr4)))), ==(old(_dryad_S12, dll(curr4)), old(_dryad_S13, dll(curr4)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr4, ^mem_reg))) ==> F#dll(SL#_dryad_S12, $phys_ptr_cast(SL#curr4, ^mem_reg)) == F#dll(SL#_dryad_S13, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12, dll_reach(curr4)))), ==(old(_dryad_S12, dll_reach(curr4)), old(_dryad_S13, dll_reach(curr4)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr4, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr4, ^mem_reg)) == F#dll_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12, dll_reach(curr0)))), ==(old(_dryad_S12, dll(curr0)), old(_dryad_S13, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(SL#_dryad_S12, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(SL#_dryad_S13, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12, dll_reach(curr0)))), ==(old(_dryad_S12, dll_reach(curr0)), old(_dryad_S13, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12, dll_reach(old_next)))), ==(old(_dryad_S12, dll(old_next)), old(_dryad_S13, dll(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S12, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(SL#_dryad_S12, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(SL#_dryad_S13, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12, dll_reach(old_next)))), ==(old(_dryad_S12, dll_reach(old_next)), old(_dryad_S13, dll_reach(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S12, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S12, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(SL#_dryad_S13, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12, dll_reach(curr)))), ==(old(_dryad_S12, dll(curr)), old(_dryad_S13, dll(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S12, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(SL#_dryad_S12, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(SL#_dryad_S13, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12, dll_reach(curr)))), ==(old(_dryad_S12, dll_reach(curr)), old(_dryad_S13, dll_reach(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S12, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S12, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(SL#_dryad_S13, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), @_vcc_ptr_eq_pure(*((curr4->file)), old(_dryad_S12, *((curr4->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr4, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S12, mem_reg.file, $phys_ptr_cast(SL#curr4, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), ==(*((curr4->file_offset)), old(_dryad_S12, *((curr4->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $rd_inv(SL#_dryad_S12, mem_reg.file_offset, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), ==(*((curr4->file_size)), old(_dryad_S12, *((curr4->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $rd_inv(SL#_dryad_S12, mem_reg.file_size, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), ==(*((curr4->start_address)), old(_dryad_S12, *((curr4->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $rd_inv(SL#_dryad_S12, mem_reg.start_address, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), ==(*((curr4->size)), old(_dryad_S12, *((curr4->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $rd_inv(SL#_dryad_S12, mem_reg.size, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), @_vcc_ptr_eq_pure(*((curr4->prev)), old(_dryad_S12, *((curr4->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S12, mem_reg.prev, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), @_vcc_ptr_eq_pure(*((curr4->next)), old(_dryad_S12, *((curr4->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S12, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S12, *((curr0->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S12, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_offset)), old(_dryad_S12, *((curr0->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S12, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_size)), old(_dryad_S12, *((curr0->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S12, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->start_address)), old(_dryad_S12, *((curr0->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S12, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->size)), old(_dryad_S12, *((curr0->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S12, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S12, *((curr0->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S12, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S12, *((curr0->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S12, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S12, *((old_next->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S12, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_offset)), old(_dryad_S12, *((old_next->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S12, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_size)), old(_dryad_S12, *((old_next->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S12, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->start_address)), old(_dryad_S12, *((old_next->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S12, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->size)), old(_dryad_S12, *((old_next->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S12, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S12, *((old_next->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S12, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S12, *((old_next->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S12, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->file)), old(_dryad_S12, *((curr->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S12, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_offset)), old(_dryad_S12, *((curr->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S12, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_size)), old(_dryad_S12, *((curr->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S12, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->start_address)), old(_dryad_S12, *((curr->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S12, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->size)), old(_dryad_S12, *((curr->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S12, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->prev)), old(_dryad_S12, *((curr->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S12, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S12, *((curr->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S12, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(@_vcc_ptr_neq_null(curr4), ==(dll(curr4), &&(&&(dll(*((curr4->next))), ==>(@_vcc_ptr_neq_null(*((curr4->next))), @_vcc_ptr_eq_pure(*((*((curr4->next))->prev)), curr4))), unchecked!(@_vcc_oset_in(curr4, dll_reach(*((curr4->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr4, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr4, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr4, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr4), ==(dll_reach(curr4), @_vcc_oset_union(dll_reach(*((curr4->next))), @_vcc_oset_singleton(curr4)))); 
        assume $non_null($phys_ptr_cast(SL#curr4, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr4, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // _math \state _dryad_S14; 
        // _dryad_S14 := @_vcc_current_state(@state); 
        SL#_dryad_S14 := $current_state($s);
        // _math \state stmtexpr16#17; 
        // stmtexpr16#17 := _dryad_S14; 
        stmtexpr16#17 := SL#_dryad_S14;
        // assert @prim_writes_check((next->next)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#next, ^mem_reg), mem_reg.next));
        // *(next->next) := (struct mem_reg*)@null; 
        call $write_int(mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), $ptr_to_int($phys_ptr_cast($null, ^mem_reg)));
        assume $full_stop_ext(#tok$3^35.5, $s);
        // _math \state _dryad_S15; 
        // _dryad_S15 := @_vcc_current_state(@state); 
        SL#_dryad_S15 := $current_state($s);
        // _math \state stmtexpr17#18; 
        // stmtexpr17#18 := _dryad_S15; 
        stmtexpr17#18 := SL#_dryad_S15;
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14, dll_reach(*((next->prev)))))), ==(old(_dryad_S14, dll(*((next->prev)))), old(_dryad_S15, dll(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S14, $rd_phys_ptr(SL#_dryad_S14, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(SL#_dryad_S14, $rd_phys_ptr(SL#_dryad_S14, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(SL#_dryad_S15, $rd_phys_ptr(SL#_dryad_S15, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14, dll_reach(*((next->prev)))))), ==(old(_dryad_S14, dll_reach(*((next->prev)))), old(_dryad_S15, dll_reach(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S14, $rd_phys_ptr(SL#_dryad_S14, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(SL#_dryad_S14, $rd_phys_ptr(SL#_dryad_S14, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(SL#_dryad_S15, $rd_phys_ptr(SL#_dryad_S15, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14, dll_reach(curr4)))), ==(old(_dryad_S14, dll(curr4)), old(_dryad_S15, dll(curr4)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S14, $phys_ptr_cast(SL#curr4, ^mem_reg))) ==> F#dll(SL#_dryad_S14, $phys_ptr_cast(SL#curr4, ^mem_reg)) == F#dll(SL#_dryad_S15, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14, dll_reach(curr4)))), ==(old(_dryad_S14, dll_reach(curr4)), old(_dryad_S15, dll_reach(curr4)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S14, $phys_ptr_cast(SL#curr4, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S14, $phys_ptr_cast(SL#curr4, ^mem_reg)) == F#dll_reach(SL#_dryad_S15, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14, dll_reach(curr0)))), ==(old(_dryad_S14, dll(curr0)), old(_dryad_S15, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S14, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(SL#_dryad_S14, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(SL#_dryad_S15, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14, dll_reach(curr0)))), ==(old(_dryad_S14, dll_reach(curr0)), old(_dryad_S15, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S14, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S14, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(SL#_dryad_S15, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14, dll_reach(old_next)))), ==(old(_dryad_S14, dll(old_next)), old(_dryad_S15, dll(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S14, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(SL#_dryad_S14, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(SL#_dryad_S15, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14, dll_reach(old_next)))), ==(old(_dryad_S14, dll_reach(old_next)), old(_dryad_S15, dll_reach(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S14, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S14, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(SL#_dryad_S15, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14, dll_reach(curr)))), ==(old(_dryad_S14, dll(curr)), old(_dryad_S15, dll(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S14, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(SL#_dryad_S14, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(SL#_dryad_S15, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14, dll_reach(curr)))), ==(old(_dryad_S14, dll_reach(curr)), old(_dryad_S15, dll_reach(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(SL#_dryad_S14, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S14, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(SL#_dryad_S15, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), @_vcc_ptr_eq_pure(*((curr4->file)), old(_dryad_S14, *((curr4->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr4, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S14, mem_reg.file, $phys_ptr_cast(SL#curr4, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), ==(*((curr4->file_offset)), old(_dryad_S14, *((curr4->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $rd_inv(SL#_dryad_S14, mem_reg.file_offset, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), ==(*((curr4->file_size)), old(_dryad_S14, *((curr4->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $rd_inv(SL#_dryad_S14, mem_reg.file_size, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), ==(*((curr4->start_address)), old(_dryad_S14, *((curr4->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $rd_inv(SL#_dryad_S14, mem_reg.start_address, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), ==(*((curr4->size)), old(_dryad_S14, *((curr4->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $rd_inv(SL#_dryad_S14, mem_reg.size, $phys_ptr_cast(SL#curr4, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), @_vcc_ptr_eq_pure(*((curr4->prev)), old(_dryad_S14, *((curr4->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S14, mem_reg.prev, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr4)), @_vcc_ptr_eq_pure(*((curr4->next)), old(_dryad_S14, *((curr4->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S14, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S14, *((curr0->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S14, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_offset)), old(_dryad_S14, *((curr0->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S14, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_size)), old(_dryad_S14, *((curr0->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S14, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->start_address)), old(_dryad_S14, *((curr0->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S14, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->size)), old(_dryad_S14, *((curr0->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S14, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S14, *((curr0->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S14, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S14, *((curr0->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S14, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S14, *((old_next->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S14, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_offset)), old(_dryad_S14, *((old_next->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S14, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_size)), old(_dryad_S14, *((old_next->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S14, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->start_address)), old(_dryad_S14, *((old_next->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S14, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->size)), old(_dryad_S14, *((old_next->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S14, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S14, *((old_next->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S14, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S14, *((old_next->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S14, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->file)), old(_dryad_S14, *((curr->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S14, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_offset)), old(_dryad_S14, *((curr->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S14, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_size)), old(_dryad_S14, *((curr->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S14, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->start_address)), old(_dryad_S14, *((curr->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S14, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->size)), old(_dryad_S14, *((curr->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(SL#_dryad_S14, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->prev)), old(_dryad_S14, *((curr->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S14, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S14, *((curr->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S14, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(@_vcc_ptr_neq_null(curr4), ==(dll(curr4), &&(&&(dll(*((curr4->next))), ==>(@_vcc_ptr_neq_null(*((curr4->next))), @_vcc_ptr_eq_pure(*((*((curr4->next))->prev)), curr4))), unchecked!(@_vcc_oset_in(curr4, dll_reach(*((curr4->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr4, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr4, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr4, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr4, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr4), ==(dll_reach(curr4), @_vcc_oset_union(dll_reach(*((curr4->next))), @_vcc_oset_singleton(curr4)))); 
        assume $non_null($phys_ptr_cast(SL#curr4, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr4, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr4, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr4, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll(next), &&(&&(dll(*((next->next))), ==>(@_vcc_ptr_neq_null(*((next->next))), @_vcc_ptr_eq_pure(*((*((next->next))->prev)), next))), unchecked!(@_vcc_oset_in(next, dll_reach(*((next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll_reach(next), @_vcc_oset_union(dll_reach(*((next->next))), @_vcc_oset_singleton(next)))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#next, ^mem_reg)));
    }
    else
    {
      anon10:
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll(next), &&(&&(dll(*((next->next))), ==>(@_vcc_ptr_neq_null(*((next->next))), @_vcc_ptr_eq_pure(*((*((next->next))->prev)), next))), unchecked!(@_vcc_oset_in(next, dll_reach(*((next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll_reach(next), @_vcc_oset_union(dll_reach(*((next->next))), @_vcc_oset_singleton(next)))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // int32_t tmp_size#0; 
        // int32_t curr_so#1; 
        // int32_t curr_s#2; 
        // struct backing_file* bf; 
        // _math \state _dryad_S0#3; 
        // _dryad_S0#3 := @_vcc_current_state(@state); 
        _dryad_S0#3 := $current_state($s);
        // _math \state stmtexpr0#19; 
        // stmtexpr0#19 := _dryad_S0#3; 
        stmtexpr0#19 := _dryad_S0#3;
        // next := _vcc_alloc(@_vcc_typeof((struct mem_reg*)@null)); 
        call L#next := $alloc(^mem_reg);
        assume $full_stop_ext(#tok$3^37.12, $s);
        // assume !(@_vcc_oset_in(next, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
        // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(next)); 
        SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#next, ^mem_reg)));
        // _math \oset stmtexpr1#20; 
        // stmtexpr1#20 := _dryad_G1; 
        stmtexpr1#20 := SL#_dryad_G1;
        // assume ==(glob_reach(), _dryad_G1); 
        assume F#glob_reach() == SL#_dryad_G1;
        // _math \state _dryad_S1#4; 
        // _dryad_S1#4 := @_vcc_current_state(@state); 
        _dryad_S1#4 := $current_state($s);
        // _math \state stmtexpr2#21; 
        // stmtexpr2#21 := _dryad_S1#4; 
        stmtexpr2#21 := _dryad_S1#4;
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll(next), &&(&&(dll(*((next->next))), ==>(@_vcc_ptr_neq_null(*((next->next))), @_vcc_ptr_eq_pure(*((*((next->next))->prev)), next))), unchecked!(@_vcc_oset_in(next, dll_reach(*((next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll_reach(next), @_vcc_oset_union(dll_reach(*((next->next))), @_vcc_oset_singleton(next)))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S0#3, dll_reach(curr0)))), ==(old(_dryad_S0#3, dll(curr0)), old(_dryad_S1#4, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S0#3, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(_dryad_S0#3, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S1#4, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S0#3, dll_reach(curr0)))), ==(old(_dryad_S0#3, dll_reach(curr0)), old(_dryad_S1#4, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S0#3, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(_dryad_S0#3, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S1#4, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S0#3, dll_reach(old_next)))), ==(old(_dryad_S0#3, dll(old_next)), old(_dryad_S1#4, dll(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S0#3, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(_dryad_S0#3, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S1#4, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S0#3, dll_reach(old_next)))), ==(old(_dryad_S0#3, dll_reach(old_next)), old(_dryad_S1#4, dll_reach(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S0#3, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(_dryad_S0#3, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S1#4, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S0#3, dll_reach(curr)))), ==(old(_dryad_S0#3, dll(curr)), old(_dryad_S1#4, dll(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S0#3, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(_dryad_S0#3, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S1#4, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S0#3, dll_reach(curr)))), ==(old(_dryad_S0#3, dll_reach(curr)), old(_dryad_S1#4, dll_reach(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S0#3, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(_dryad_S0#3, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S1#4, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume @_vcc_ptr_neq_null(next); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg));
        // struct mem_reg* curr1; 
        // curr1 := curr; 
        SL#curr1 := $phys_ptr_cast(P#curr, ^mem_reg);
        // struct mem_reg* stmtexpr3#22; 
        // stmtexpr3#22 := curr1; 
        stmtexpr3#22 := $phys_ptr_cast(SL#curr1, ^mem_reg);
        // assert @reads_check_normal((curr->file)); 
        assert $thread_local($s, $phys_ptr_cast(P#curr, ^mem_reg));
        // bf := *((curr->file)); 
        L#bf := $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
        // _math \state _dryad_S2#5; 
        // _dryad_S2#5 := @_vcc_current_state(@state); 
        _dryad_S2#5 := $current_state($s);
        // _math \state stmtexpr4#23; 
        // stmtexpr4#23 := _dryad_S2#5; 
        stmtexpr4#23 := _dryad_S2#5;
        // assert @prim_writes_check((next->file)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#next, ^mem_reg), mem_reg.file));
        // *(next->file) := bf; 
        call $write_int(mem_reg.file, $phys_ptr_cast(L#next, ^mem_reg), $ptr_to_int($phys_ptr_cast(L#bf, ^backing_file)));
        assume $full_stop_ext(#tok$3^40.5, $s);
        // _math \state _dryad_S3#6; 
        // _dryad_S3#6 := @_vcc_current_state(@state); 
        _dryad_S3#6 := $current_state($s);
        // _math \state stmtexpr5#24; 
        // stmtexpr5#24 := _dryad_S3#6; 
        stmtexpr5#24 := _dryad_S3#6;
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#5, dll_reach(*((next->prev)))))), ==(old(_dryad_S2#5, dll(*((next->prev)))), old(_dryad_S3#6, dll(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#5, $rd_phys_ptr(_dryad_S2#5, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S2#5, $rd_phys_ptr(_dryad_S2#5, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S3#6, $rd_phys_ptr(_dryad_S3#6, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#5, dll_reach(*((next->prev)))))), ==(old(_dryad_S2#5, dll_reach(*((next->prev)))), old(_dryad_S3#6, dll_reach(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#5, $rd_phys_ptr(_dryad_S2#5, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S2#5, $rd_phys_ptr(_dryad_S2#5, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S3#6, $rd_phys_ptr(_dryad_S3#6, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#5, dll_reach(*((next->next)))))), ==(old(_dryad_S2#5, dll(*((next->next)))), old(_dryad_S3#6, dll(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#5, $rd_phys_ptr(_dryad_S2#5, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S2#5, $rd_phys_ptr(_dryad_S2#5, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S3#6, $rd_phys_ptr(_dryad_S3#6, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#5, dll_reach(*((next->next)))))), ==(old(_dryad_S2#5, dll_reach(*((next->next)))), old(_dryad_S3#6, dll_reach(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#5, $rd_phys_ptr(_dryad_S2#5, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S2#5, $rd_phys_ptr(_dryad_S2#5, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S3#6, $rd_phys_ptr(_dryad_S3#6, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==(old(_dryad_S2#5, dll(curr1)), old(_dryad_S3#6, dll(curr1))); 
        assume F#dll(_dryad_S2#5, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll(_dryad_S3#6, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==(old(_dryad_S2#5, dll_reach(curr1)), old(_dryad_S3#6, dll_reach(curr1))); 
        assume F#dll_reach(_dryad_S2#5, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll_reach(_dryad_S3#6, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==(old(_dryad_S2#5, dll(curr0)), old(_dryad_S3#6, dll(curr0))); 
        assume F#dll(_dryad_S2#5, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S3#6, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S2#5, dll_reach(curr0)), old(_dryad_S3#6, dll_reach(curr0))); 
        assume F#dll_reach(_dryad_S2#5, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S3#6, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S2#5, dll(old_next)), old(_dryad_S3#6, dll(old_next))); 
        assume F#dll(_dryad_S2#5, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S3#6, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S2#5, dll_reach(old_next)), old(_dryad_S3#6, dll_reach(old_next))); 
        assume F#dll_reach(_dryad_S2#5, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S3#6, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S2#5, dll(next)), old(_dryad_S3#6, dll(next))); 
        assume F#dll(_dryad_S2#5, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(_dryad_S3#6, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S2#5, dll_reach(next)), old(_dryad_S3#6, dll_reach(next))); 
        assume F#dll_reach(_dryad_S2#5, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(_dryad_S3#6, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S2#5, dll(curr)), old(_dryad_S3#6, dll(curr))); 
        assume F#dll(_dryad_S2#5, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S3#6, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==(old(_dryad_S2#5, dll_reach(curr)), old(_dryad_S3#6, dll_reach(curr))); 
        assume F#dll_reach(_dryad_S2#5, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S3#6, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#5, dll_reach(curr1)))), ==(old(_dryad_S2#5, dll(curr1)), old(_dryad_S3#6, dll(curr1)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#5, $phys_ptr_cast(SL#curr1, ^mem_reg))) ==> F#dll(_dryad_S2#5, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll(_dryad_S3#6, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#5, dll_reach(curr1)))), ==(old(_dryad_S2#5, dll_reach(curr1)), old(_dryad_S3#6, dll_reach(curr1)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#5, $phys_ptr_cast(SL#curr1, ^mem_reg))) ==> F#dll_reach(_dryad_S2#5, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll_reach(_dryad_S3#6, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#5, dll_reach(curr0)))), ==(old(_dryad_S2#5, dll(curr0)), old(_dryad_S3#6, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#5, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(_dryad_S2#5, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S3#6, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#5, dll_reach(curr0)))), ==(old(_dryad_S2#5, dll_reach(curr0)), old(_dryad_S3#6, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#5, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(_dryad_S2#5, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S3#6, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#5, dll_reach(old_next)))), ==(old(_dryad_S2#5, dll(old_next)), old(_dryad_S3#6, dll(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#5, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(_dryad_S2#5, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S3#6, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#5, dll_reach(old_next)))), ==(old(_dryad_S2#5, dll_reach(old_next)), old(_dryad_S3#6, dll_reach(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#5, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(_dryad_S2#5, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S3#6, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#5, dll_reach(curr)))), ==(old(_dryad_S2#5, dll(curr)), old(_dryad_S3#6, dll(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#5, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(_dryad_S2#5, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S3#6, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#5, dll_reach(curr)))), ==(old(_dryad_S2#5, dll_reach(curr)), old(_dryad_S3#6, dll_reach(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#5, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(_dryad_S2#5, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S3#6, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->file)), old(_dryad_S2#5, *((curr1->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr1, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S2#5, mem_reg.file, $phys_ptr_cast(SL#curr1, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->file_offset)), old(_dryad_S2#5, *((curr1->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S2#5, mem_reg.file_offset, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->file_size)), old(_dryad_S2#5, *((curr1->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S2#5, mem_reg.file_size, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->start_address)), old(_dryad_S2#5, *((curr1->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S2#5, mem_reg.start_address, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->size)), old(_dryad_S2#5, *((curr1->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S2#5, mem_reg.size, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->prev)), old(_dryad_S2#5, *((curr1->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S2#5, mem_reg.prev, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->next)), old(_dryad_S2#5, *((curr1->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S2#5, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S2#5, *((curr0->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S2#5, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_offset)), old(_dryad_S2#5, *((curr0->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S2#5, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_size)), old(_dryad_S2#5, *((curr0->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S2#5, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->start_address)), old(_dryad_S2#5, *((curr0->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S2#5, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->size)), old(_dryad_S2#5, *((curr0->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S2#5, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S2#5, *((curr0->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S2#5, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S2#5, *((curr0->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S2#5, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S2#5, *((old_next->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S2#5, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_offset)), old(_dryad_S2#5, *((old_next->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S2#5, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_size)), old(_dryad_S2#5, *((old_next->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S2#5, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->start_address)), old(_dryad_S2#5, *((old_next->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S2#5, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->size)), old(_dryad_S2#5, *((old_next->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S2#5, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S2#5, *((old_next->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S2#5, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S2#5, *((old_next->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S2#5, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->file)), old(_dryad_S2#5, *((curr->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S2#5, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_offset)), old(_dryad_S2#5, *((curr->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S2#5, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_size)), old(_dryad_S2#5, *((curr->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S2#5, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->start_address)), old(_dryad_S2#5, *((curr->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S2#5, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->size)), old(_dryad_S2#5, *((curr->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S2#5, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->prev)), old(_dryad_S2#5, *((curr->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S2#5, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S2#5, *((curr->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S2#5, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(@_vcc_ptr_neq_null(curr1), ==(dll(curr1), &&(&&(dll(*((curr1->next))), ==>(@_vcc_ptr_neq_null(*((curr1->next))), @_vcc_ptr_eq_pure(*((*((curr1->next))->prev)), curr1))), unchecked!(@_vcc_oset_in(curr1, dll_reach(*((curr1->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr1, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr1, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr1, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr1), ==(dll_reach(curr1), @_vcc_oset_union(dll_reach(*((curr1->next))), @_vcc_oset_singleton(curr1)))); 
        assume $non_null($phys_ptr_cast(SL#curr1, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr1, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // _math \state _dryad_S4#7; 
        // _dryad_S4#7 := @_vcc_current_state(@state); 
        _dryad_S4#7 := $current_state($s);
        // _math \state stmtexpr6#25; 
        // stmtexpr6#25 := _dryad_S4#7; 
        stmtexpr6#25 := _dryad_S4#7;
        // assert @prim_writes_check((next->file_offset)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#next, ^mem_reg), mem_reg.file_offset));
        // *(next->file_offset) := 0; 
        call $write_int(mem_reg.file_offset, $phys_ptr_cast(L#next, ^mem_reg), 0);
        assume $full_stop_ext(#tok$3^41.5, $s);
        // _math \state _dryad_S5#8; 
        // _dryad_S5#8 := @_vcc_current_state(@state); 
        _dryad_S5#8 := $current_state($s);
        // _math \state stmtexpr7#26; 
        // stmtexpr7#26 := _dryad_S5#8; 
        stmtexpr7#26 := _dryad_S5#8;
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#7, dll_reach(*((next->prev)))))), ==(old(_dryad_S4#7, dll(*((next->prev)))), old(_dryad_S5#8, dll(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#7, $rd_phys_ptr(_dryad_S4#7, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S4#7, $rd_phys_ptr(_dryad_S4#7, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S5#8, $rd_phys_ptr(_dryad_S5#8, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#7, dll_reach(*((next->prev)))))), ==(old(_dryad_S4#7, dll_reach(*((next->prev)))), old(_dryad_S5#8, dll_reach(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#7, $rd_phys_ptr(_dryad_S4#7, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S4#7, $rd_phys_ptr(_dryad_S4#7, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S5#8, $rd_phys_ptr(_dryad_S5#8, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#7, dll_reach(*((next->next)))))), ==(old(_dryad_S4#7, dll(*((next->next)))), old(_dryad_S5#8, dll(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#7, $rd_phys_ptr(_dryad_S4#7, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S4#7, $rd_phys_ptr(_dryad_S4#7, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S5#8, $rd_phys_ptr(_dryad_S5#8, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#7, dll_reach(*((next->next)))))), ==(old(_dryad_S4#7, dll_reach(*((next->next)))), old(_dryad_S5#8, dll_reach(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#7, $rd_phys_ptr(_dryad_S4#7, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S4#7, $rd_phys_ptr(_dryad_S4#7, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S5#8, $rd_phys_ptr(_dryad_S5#8, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==(old(_dryad_S4#7, dll(curr1)), old(_dryad_S5#8, dll(curr1))); 
        assume F#dll(_dryad_S4#7, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll(_dryad_S5#8, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==(old(_dryad_S4#7, dll_reach(curr1)), old(_dryad_S5#8, dll_reach(curr1))); 
        assume F#dll_reach(_dryad_S4#7, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll_reach(_dryad_S5#8, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==(old(_dryad_S4#7, dll(curr0)), old(_dryad_S5#8, dll(curr0))); 
        assume F#dll(_dryad_S4#7, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S5#8, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S4#7, dll_reach(curr0)), old(_dryad_S5#8, dll_reach(curr0))); 
        assume F#dll_reach(_dryad_S4#7, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S5#8, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S4#7, dll(old_next)), old(_dryad_S5#8, dll(old_next))); 
        assume F#dll(_dryad_S4#7, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S5#8, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S4#7, dll_reach(old_next)), old(_dryad_S5#8, dll_reach(old_next))); 
        assume F#dll_reach(_dryad_S4#7, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S5#8, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S4#7, dll(next)), old(_dryad_S5#8, dll(next))); 
        assume F#dll(_dryad_S4#7, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(_dryad_S5#8, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S4#7, dll_reach(next)), old(_dryad_S5#8, dll_reach(next))); 
        assume F#dll_reach(_dryad_S4#7, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(_dryad_S5#8, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S4#7, dll(curr)), old(_dryad_S5#8, dll(curr))); 
        assume F#dll(_dryad_S4#7, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S5#8, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==(old(_dryad_S4#7, dll_reach(curr)), old(_dryad_S5#8, dll_reach(curr))); 
        assume F#dll_reach(_dryad_S4#7, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S5#8, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#7, dll_reach(curr1)))), ==(old(_dryad_S4#7, dll(curr1)), old(_dryad_S5#8, dll(curr1)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#7, $phys_ptr_cast(SL#curr1, ^mem_reg))) ==> F#dll(_dryad_S4#7, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll(_dryad_S5#8, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#7, dll_reach(curr1)))), ==(old(_dryad_S4#7, dll_reach(curr1)), old(_dryad_S5#8, dll_reach(curr1)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#7, $phys_ptr_cast(SL#curr1, ^mem_reg))) ==> F#dll_reach(_dryad_S4#7, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll_reach(_dryad_S5#8, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#7, dll_reach(curr0)))), ==(old(_dryad_S4#7, dll(curr0)), old(_dryad_S5#8, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#7, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(_dryad_S4#7, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S5#8, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#7, dll_reach(curr0)))), ==(old(_dryad_S4#7, dll_reach(curr0)), old(_dryad_S5#8, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#7, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(_dryad_S4#7, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S5#8, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#7, dll_reach(old_next)))), ==(old(_dryad_S4#7, dll(old_next)), old(_dryad_S5#8, dll(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#7, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(_dryad_S4#7, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S5#8, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#7, dll_reach(old_next)))), ==(old(_dryad_S4#7, dll_reach(old_next)), old(_dryad_S5#8, dll_reach(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#7, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(_dryad_S4#7, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S5#8, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#7, dll_reach(curr)))), ==(old(_dryad_S4#7, dll(curr)), old(_dryad_S5#8, dll(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#7, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(_dryad_S4#7, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S5#8, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#7, dll_reach(curr)))), ==(old(_dryad_S4#7, dll_reach(curr)), old(_dryad_S5#8, dll_reach(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#7, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(_dryad_S4#7, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S5#8, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->file)), old(_dryad_S4#7, *((curr1->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr1, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S4#7, mem_reg.file, $phys_ptr_cast(SL#curr1, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->file_offset)), old(_dryad_S4#7, *((curr1->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S4#7, mem_reg.file_offset, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->file_size)), old(_dryad_S4#7, *((curr1->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S4#7, mem_reg.file_size, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->start_address)), old(_dryad_S4#7, *((curr1->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S4#7, mem_reg.start_address, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->size)), old(_dryad_S4#7, *((curr1->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S4#7, mem_reg.size, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->prev)), old(_dryad_S4#7, *((curr1->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S4#7, mem_reg.prev, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->next)), old(_dryad_S4#7, *((curr1->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S4#7, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S4#7, *((curr0->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S4#7, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_offset)), old(_dryad_S4#7, *((curr0->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S4#7, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_size)), old(_dryad_S4#7, *((curr0->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S4#7, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->start_address)), old(_dryad_S4#7, *((curr0->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S4#7, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->size)), old(_dryad_S4#7, *((curr0->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S4#7, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S4#7, *((curr0->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S4#7, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S4#7, *((curr0->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S4#7, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S4#7, *((old_next->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S4#7, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_offset)), old(_dryad_S4#7, *((old_next->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S4#7, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_size)), old(_dryad_S4#7, *((old_next->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S4#7, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->start_address)), old(_dryad_S4#7, *((old_next->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S4#7, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->size)), old(_dryad_S4#7, *((old_next->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S4#7, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S4#7, *((old_next->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S4#7, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S4#7, *((old_next->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S4#7, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->file)), old(_dryad_S4#7, *((curr->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S4#7, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_offset)), old(_dryad_S4#7, *((curr->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S4#7, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_size)), old(_dryad_S4#7, *((curr->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S4#7, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->start_address)), old(_dryad_S4#7, *((curr->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S4#7, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->size)), old(_dryad_S4#7, *((curr->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S4#7, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->prev)), old(_dryad_S4#7, *((curr->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S4#7, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S4#7, *((curr->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S4#7, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(@_vcc_ptr_neq_null(curr1), ==(dll(curr1), &&(&&(dll(*((curr1->next))), ==>(@_vcc_ptr_neq_null(*((curr1->next))), @_vcc_ptr_eq_pure(*((*((curr1->next))->prev)), curr1))), unchecked!(@_vcc_oset_in(curr1, dll_reach(*((curr1->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr1, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr1, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr1, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr1), ==(dll_reach(curr1), @_vcc_oset_union(dll_reach(*((curr1->next))), @_vcc_oset_singleton(curr1)))); 
        assume $non_null($phys_ptr_cast(SL#curr1, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr1, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // _math \state _dryad_S6#9; 
        // _dryad_S6#9 := @_vcc_current_state(@state); 
        _dryad_S6#9 := $current_state($s);
        // _math \state stmtexpr8#27; 
        // stmtexpr8#27 := _dryad_S6#9; 
        stmtexpr8#27 := _dryad_S6#9;
        // assert @prim_writes_check((next->file_size)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#next, ^mem_reg), mem_reg.file_size));
        // *(next->file_size) := 0; 
        call $write_int(mem_reg.file_size, $phys_ptr_cast(L#next, ^mem_reg), 0);
        assume $full_stop_ext(#tok$3^42.5, $s);
        // _math \state _dryad_S7#10; 
        // _dryad_S7#10 := @_vcc_current_state(@state); 
        _dryad_S7#10 := $current_state($s);
        // _math \state stmtexpr9#28; 
        // stmtexpr9#28 := _dryad_S7#10; 
        stmtexpr9#28 := _dryad_S7#10;
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6#9, dll_reach(*((next->prev)))))), ==(old(_dryad_S6#9, dll(*((next->prev)))), old(_dryad_S7#10, dll(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S6#9, $rd_phys_ptr(_dryad_S6#9, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S6#9, $rd_phys_ptr(_dryad_S6#9, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S7#10, $rd_phys_ptr(_dryad_S7#10, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6#9, dll_reach(*((next->prev)))))), ==(old(_dryad_S6#9, dll_reach(*((next->prev)))), old(_dryad_S7#10, dll_reach(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S6#9, $rd_phys_ptr(_dryad_S6#9, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S6#9, $rd_phys_ptr(_dryad_S6#9, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S7#10, $rd_phys_ptr(_dryad_S7#10, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6#9, dll_reach(*((next->next)))))), ==(old(_dryad_S6#9, dll(*((next->next)))), old(_dryad_S7#10, dll(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S6#9, $rd_phys_ptr(_dryad_S6#9, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S6#9, $rd_phys_ptr(_dryad_S6#9, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S7#10, $rd_phys_ptr(_dryad_S7#10, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6#9, dll_reach(*((next->next)))))), ==(old(_dryad_S6#9, dll_reach(*((next->next)))), old(_dryad_S7#10, dll_reach(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S6#9, $rd_phys_ptr(_dryad_S6#9, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S6#9, $rd_phys_ptr(_dryad_S6#9, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S7#10, $rd_phys_ptr(_dryad_S7#10, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==(old(_dryad_S6#9, dll(curr1)), old(_dryad_S7#10, dll(curr1))); 
        assume F#dll(_dryad_S6#9, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll(_dryad_S7#10, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==(old(_dryad_S6#9, dll_reach(curr1)), old(_dryad_S7#10, dll_reach(curr1))); 
        assume F#dll_reach(_dryad_S6#9, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll_reach(_dryad_S7#10, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==(old(_dryad_S6#9, dll(curr0)), old(_dryad_S7#10, dll(curr0))); 
        assume F#dll(_dryad_S6#9, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S7#10, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S6#9, dll_reach(curr0)), old(_dryad_S7#10, dll_reach(curr0))); 
        assume F#dll_reach(_dryad_S6#9, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S7#10, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S6#9, dll(old_next)), old(_dryad_S7#10, dll(old_next))); 
        assume F#dll(_dryad_S6#9, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S7#10, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S6#9, dll_reach(old_next)), old(_dryad_S7#10, dll_reach(old_next))); 
        assume F#dll_reach(_dryad_S6#9, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S7#10, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S6#9, dll(next)), old(_dryad_S7#10, dll(next))); 
        assume F#dll(_dryad_S6#9, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(_dryad_S7#10, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S6#9, dll_reach(next)), old(_dryad_S7#10, dll_reach(next))); 
        assume F#dll_reach(_dryad_S6#9, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(_dryad_S7#10, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S6#9, dll(curr)), old(_dryad_S7#10, dll(curr))); 
        assume F#dll(_dryad_S6#9, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S7#10, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==(old(_dryad_S6#9, dll_reach(curr)), old(_dryad_S7#10, dll_reach(curr))); 
        assume F#dll_reach(_dryad_S6#9, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S7#10, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6#9, dll_reach(curr1)))), ==(old(_dryad_S6#9, dll(curr1)), old(_dryad_S7#10, dll(curr1)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S6#9, $phys_ptr_cast(SL#curr1, ^mem_reg))) ==> F#dll(_dryad_S6#9, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll(_dryad_S7#10, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6#9, dll_reach(curr1)))), ==(old(_dryad_S6#9, dll_reach(curr1)), old(_dryad_S7#10, dll_reach(curr1)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S6#9, $phys_ptr_cast(SL#curr1, ^mem_reg))) ==> F#dll_reach(_dryad_S6#9, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll_reach(_dryad_S7#10, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6#9, dll_reach(curr0)))), ==(old(_dryad_S6#9, dll(curr0)), old(_dryad_S7#10, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S6#9, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(_dryad_S6#9, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S7#10, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6#9, dll_reach(curr0)))), ==(old(_dryad_S6#9, dll_reach(curr0)), old(_dryad_S7#10, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S6#9, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(_dryad_S6#9, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S7#10, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6#9, dll_reach(old_next)))), ==(old(_dryad_S6#9, dll(old_next)), old(_dryad_S7#10, dll(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S6#9, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(_dryad_S6#9, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S7#10, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6#9, dll_reach(old_next)))), ==(old(_dryad_S6#9, dll_reach(old_next)), old(_dryad_S7#10, dll_reach(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S6#9, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(_dryad_S6#9, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S7#10, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6#9, dll_reach(curr)))), ==(old(_dryad_S6#9, dll(curr)), old(_dryad_S7#10, dll(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S6#9, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(_dryad_S6#9, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S7#10, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S6#9, dll_reach(curr)))), ==(old(_dryad_S6#9, dll_reach(curr)), old(_dryad_S7#10, dll_reach(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S6#9, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(_dryad_S6#9, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S7#10, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->file)), old(_dryad_S6#9, *((curr1->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr1, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S6#9, mem_reg.file, $phys_ptr_cast(SL#curr1, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->file_offset)), old(_dryad_S6#9, *((curr1->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S6#9, mem_reg.file_offset, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->file_size)), old(_dryad_S6#9, *((curr1->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S6#9, mem_reg.file_size, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->start_address)), old(_dryad_S6#9, *((curr1->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S6#9, mem_reg.start_address, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->size)), old(_dryad_S6#9, *((curr1->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S6#9, mem_reg.size, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->prev)), old(_dryad_S6#9, *((curr1->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#9, mem_reg.prev, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->next)), old(_dryad_S6#9, *((curr1->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#9, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S6#9, *((curr0->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S6#9, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_offset)), old(_dryad_S6#9, *((curr0->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S6#9, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_size)), old(_dryad_S6#9, *((curr0->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S6#9, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->start_address)), old(_dryad_S6#9, *((curr0->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S6#9, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->size)), old(_dryad_S6#9, *((curr0->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S6#9, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S6#9, *((curr0->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#9, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S6#9, *((curr0->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#9, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S6#9, *((old_next->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S6#9, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_offset)), old(_dryad_S6#9, *((old_next->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S6#9, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_size)), old(_dryad_S6#9, *((old_next->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S6#9, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->start_address)), old(_dryad_S6#9, *((old_next->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S6#9, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->size)), old(_dryad_S6#9, *((old_next->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S6#9, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S6#9, *((old_next->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#9, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S6#9, *((old_next->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#9, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->file)), old(_dryad_S6#9, *((curr->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S6#9, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_offset)), old(_dryad_S6#9, *((curr->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S6#9, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_size)), old(_dryad_S6#9, *((curr->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S6#9, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->start_address)), old(_dryad_S6#9, *((curr->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S6#9, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->size)), old(_dryad_S6#9, *((curr->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S6#9, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->prev)), old(_dryad_S6#9, *((curr->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#9, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S6#9, *((curr->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#9, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(@_vcc_ptr_neq_null(curr1), ==(dll(curr1), &&(&&(dll(*((curr1->next))), ==>(@_vcc_ptr_neq_null(*((curr1->next))), @_vcc_ptr_eq_pure(*((*((curr1->next))->prev)), curr1))), unchecked!(@_vcc_oset_in(curr1, dll_reach(*((curr1->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr1, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr1, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr1, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr1), ==(dll_reach(curr1), @_vcc_oset_union(dll_reach(*((curr1->next))), @_vcc_oset_singleton(curr1)))); 
        assume $non_null($phys_ptr_cast(SL#curr1, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr1, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // struct mem_reg* curr5; 
        // curr5 := curr; 
        SL#curr5 := $phys_ptr_cast(P#curr, ^mem_reg);
        // struct mem_reg* stmtexpr10#29; 
        // stmtexpr10#29 := curr5; 
        stmtexpr10#29 := $phys_ptr_cast(SL#curr5, ^mem_reg);
        // assert @reads_check_normal((curr->start_address)); 
        assert $thread_local($s, $phys_ptr_cast(P#curr, ^mem_reg));
        // curr_s#2 := *((curr->start_address)); 
        curr_s#2 := $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
        // assert @in_range_i4(+(curr_s#2, offset)); 
        assert $in_range_i4(curr_s#2 + P#offset);
        // curr_so#1 := +(curr_s#2, offset); 
        curr_so#1 := curr_s#2 + P#offset;
        // _math \state _dryad_S8#11; 
        // _dryad_S8#11 := @_vcc_current_state(@state); 
        _dryad_S8#11 := $current_state($s);
        // _math \state stmtexpr11#30; 
        // stmtexpr11#30 := _dryad_S8#11; 
        stmtexpr11#30 := _dryad_S8#11;
        // assert @prim_writes_check((next->start_address)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#next, ^mem_reg), mem_reg.start_address));
        // *(next->start_address) := curr_so#1; 
        call $write_int(mem_reg.start_address, $phys_ptr_cast(L#next, ^mem_reg), curr_so#1);
        assume $full_stop_ext(#tok$3^45.5, $s);
        // _math \state _dryad_S9#12; 
        // _dryad_S9#12 := @_vcc_current_state(@state); 
        _dryad_S9#12 := $current_state($s);
        // _math \state stmtexpr12#31; 
        // stmtexpr12#31 := _dryad_S9#12; 
        stmtexpr12#31 := _dryad_S9#12;
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8#11, dll_reach(*((next->prev)))))), ==(old(_dryad_S8#11, dll(*((next->prev)))), old(_dryad_S9#12, dll(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S8#11, $rd_phys_ptr(_dryad_S8#11, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S8#11, $rd_phys_ptr(_dryad_S8#11, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S9#12, $rd_phys_ptr(_dryad_S9#12, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8#11, dll_reach(*((next->prev)))))), ==(old(_dryad_S8#11, dll_reach(*((next->prev)))), old(_dryad_S9#12, dll_reach(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S8#11, $rd_phys_ptr(_dryad_S8#11, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S8#11, $rd_phys_ptr(_dryad_S8#11, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S9#12, $rd_phys_ptr(_dryad_S9#12, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8#11, dll_reach(*((next->next)))))), ==(old(_dryad_S8#11, dll(*((next->next)))), old(_dryad_S9#12, dll(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S8#11, $rd_phys_ptr(_dryad_S8#11, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S8#11, $rd_phys_ptr(_dryad_S8#11, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S9#12, $rd_phys_ptr(_dryad_S9#12, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8#11, dll_reach(*((next->next)))))), ==(old(_dryad_S8#11, dll_reach(*((next->next)))), old(_dryad_S9#12, dll_reach(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S8#11, $rd_phys_ptr(_dryad_S8#11, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S8#11, $rd_phys_ptr(_dryad_S8#11, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S9#12, $rd_phys_ptr(_dryad_S9#12, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==(old(_dryad_S8#11, dll(curr5)), old(_dryad_S9#12, dll(curr5))); 
        assume F#dll(_dryad_S8#11, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll(_dryad_S9#12, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==(old(_dryad_S8#11, dll_reach(curr5)), old(_dryad_S9#12, dll_reach(curr5))); 
        assume F#dll_reach(_dryad_S8#11, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll_reach(_dryad_S9#12, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==(old(_dryad_S8#11, dll(curr1)), old(_dryad_S9#12, dll(curr1))); 
        assume F#dll(_dryad_S8#11, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll(_dryad_S9#12, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==(old(_dryad_S8#11, dll_reach(curr1)), old(_dryad_S9#12, dll_reach(curr1))); 
        assume F#dll_reach(_dryad_S8#11, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll_reach(_dryad_S9#12, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==(old(_dryad_S8#11, dll(curr0)), old(_dryad_S9#12, dll(curr0))); 
        assume F#dll(_dryad_S8#11, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S9#12, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S8#11, dll_reach(curr0)), old(_dryad_S9#12, dll_reach(curr0))); 
        assume F#dll_reach(_dryad_S8#11, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S9#12, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S8#11, dll(old_next)), old(_dryad_S9#12, dll(old_next))); 
        assume F#dll(_dryad_S8#11, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S9#12, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S8#11, dll_reach(old_next)), old(_dryad_S9#12, dll_reach(old_next))); 
        assume F#dll_reach(_dryad_S8#11, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S9#12, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S8#11, dll(next)), old(_dryad_S9#12, dll(next))); 
        assume F#dll(_dryad_S8#11, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(_dryad_S9#12, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S8#11, dll_reach(next)), old(_dryad_S9#12, dll_reach(next))); 
        assume F#dll_reach(_dryad_S8#11, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(_dryad_S9#12, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S8#11, dll(curr)), old(_dryad_S9#12, dll(curr))); 
        assume F#dll(_dryad_S8#11, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S9#12, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==(old(_dryad_S8#11, dll_reach(curr)), old(_dryad_S9#12, dll_reach(curr))); 
        assume F#dll_reach(_dryad_S8#11, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S9#12, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8#11, dll_reach(curr5)))), ==(old(_dryad_S8#11, dll(curr5)), old(_dryad_S9#12, dll(curr5)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S8#11, $phys_ptr_cast(SL#curr5, ^mem_reg))) ==> F#dll(_dryad_S8#11, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll(_dryad_S9#12, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8#11, dll_reach(curr5)))), ==(old(_dryad_S8#11, dll_reach(curr5)), old(_dryad_S9#12, dll_reach(curr5)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S8#11, $phys_ptr_cast(SL#curr5, ^mem_reg))) ==> F#dll_reach(_dryad_S8#11, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll_reach(_dryad_S9#12, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8#11, dll_reach(curr1)))), ==(old(_dryad_S8#11, dll(curr1)), old(_dryad_S9#12, dll(curr1)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S8#11, $phys_ptr_cast(SL#curr1, ^mem_reg))) ==> F#dll(_dryad_S8#11, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll(_dryad_S9#12, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8#11, dll_reach(curr1)))), ==(old(_dryad_S8#11, dll_reach(curr1)), old(_dryad_S9#12, dll_reach(curr1)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S8#11, $phys_ptr_cast(SL#curr1, ^mem_reg))) ==> F#dll_reach(_dryad_S8#11, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll_reach(_dryad_S9#12, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8#11, dll_reach(curr0)))), ==(old(_dryad_S8#11, dll(curr0)), old(_dryad_S9#12, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S8#11, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(_dryad_S8#11, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S9#12, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8#11, dll_reach(curr0)))), ==(old(_dryad_S8#11, dll_reach(curr0)), old(_dryad_S9#12, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S8#11, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(_dryad_S8#11, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S9#12, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8#11, dll_reach(old_next)))), ==(old(_dryad_S8#11, dll(old_next)), old(_dryad_S9#12, dll(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S8#11, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(_dryad_S8#11, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S9#12, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8#11, dll_reach(old_next)))), ==(old(_dryad_S8#11, dll_reach(old_next)), old(_dryad_S9#12, dll_reach(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S8#11, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(_dryad_S8#11, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S9#12, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8#11, dll_reach(curr)))), ==(old(_dryad_S8#11, dll(curr)), old(_dryad_S9#12, dll(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S8#11, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(_dryad_S8#11, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S9#12, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S8#11, dll_reach(curr)))), ==(old(_dryad_S8#11, dll_reach(curr)), old(_dryad_S9#12, dll_reach(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S8#11, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(_dryad_S8#11, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S9#12, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), @_vcc_ptr_eq_pure(*((curr5->file)), old(_dryad_S8#11, *((curr5->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr5, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S8#11, mem_reg.file, $phys_ptr_cast(SL#curr5, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), ==(*((curr5->file_offset)), old(_dryad_S8#11, *((curr5->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.file_offset, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), ==(*((curr5->file_size)), old(_dryad_S8#11, *((curr5->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.file_size, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), ==(*((curr5->start_address)), old(_dryad_S8#11, *((curr5->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.start_address, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), ==(*((curr5->size)), old(_dryad_S8#11, *((curr5->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.size, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), @_vcc_ptr_eq_pure(*((curr5->prev)), old(_dryad_S8#11, *((curr5->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S8#11, mem_reg.prev, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), @_vcc_ptr_eq_pure(*((curr5->next)), old(_dryad_S8#11, *((curr5->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S8#11, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->file)), old(_dryad_S8#11, *((curr1->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr1, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S8#11, mem_reg.file, $phys_ptr_cast(SL#curr1, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->file_offset)), old(_dryad_S8#11, *((curr1->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.file_offset, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->file_size)), old(_dryad_S8#11, *((curr1->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.file_size, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->start_address)), old(_dryad_S8#11, *((curr1->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.start_address, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->size)), old(_dryad_S8#11, *((curr1->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.size, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->prev)), old(_dryad_S8#11, *((curr1->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S8#11, mem_reg.prev, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->next)), old(_dryad_S8#11, *((curr1->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S8#11, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S8#11, *((curr0->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S8#11, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_offset)), old(_dryad_S8#11, *((curr0->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_size)), old(_dryad_S8#11, *((curr0->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->start_address)), old(_dryad_S8#11, *((curr0->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->size)), old(_dryad_S8#11, *((curr0->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S8#11, *((curr0->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S8#11, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S8#11, *((curr0->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S8#11, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S8#11, *((old_next->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S8#11, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_offset)), old(_dryad_S8#11, *((old_next->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_size)), old(_dryad_S8#11, *((old_next->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->start_address)), old(_dryad_S8#11, *((old_next->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->size)), old(_dryad_S8#11, *((old_next->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S8#11, *((old_next->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S8#11, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S8#11, *((old_next->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S8#11, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->file)), old(_dryad_S8#11, *((curr->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S8#11, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_offset)), old(_dryad_S8#11, *((curr->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_size)), old(_dryad_S8#11, *((curr->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->start_address)), old(_dryad_S8#11, *((curr->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->size)), old(_dryad_S8#11, *((curr->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S8#11, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->prev)), old(_dryad_S8#11, *((curr->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S8#11, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S8#11, *((curr->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S8#11, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(@_vcc_ptr_neq_null(curr5), ==(dll(curr5), &&(&&(dll(*((curr5->next))), ==>(@_vcc_ptr_neq_null(*((curr5->next))), @_vcc_ptr_eq_pure(*((*((curr5->next))->prev)), curr5))), unchecked!(@_vcc_oset_in(curr5, dll_reach(*((curr5->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr5, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr5, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr5, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr5), ==(dll_reach(curr5), @_vcc_oset_union(dll_reach(*((curr5->next))), @_vcc_oset_singleton(curr5)))); 
        assume $non_null($phys_ptr_cast(SL#curr5, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr5, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr1), ==(dll(curr1), &&(&&(dll(*((curr1->next))), ==>(@_vcc_ptr_neq_null(*((curr1->next))), @_vcc_ptr_eq_pure(*((*((curr1->next))->prev)), curr1))), unchecked!(@_vcc_oset_in(curr1, dll_reach(*((curr1->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr1, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr1, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr1, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr1), ==(dll_reach(curr1), @_vcc_oset_union(dll_reach(*((curr1->next))), @_vcc_oset_singleton(curr1)))); 
        assume $non_null($phys_ptr_cast(SL#curr1, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr1, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // assert @in_range_i4(-(*((curr->size)), offset)); 
        assert $in_range_i4($rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) - P#offset);
        // assert @reads_check_normal((curr->size)); 
        assert $thread_local($s, $phys_ptr_cast(P#curr, ^mem_reg));
        // tmp_size#0 := -(*((curr->size)), offset); 
        tmp_size#0 := $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) - P#offset;
        // _math \state _dryad_S10#13; 
        // _dryad_S10#13 := @_vcc_current_state(@state); 
        _dryad_S10#13 := $current_state($s);
        // _math \state stmtexpr13#32; 
        // stmtexpr13#32 := _dryad_S10#13; 
        stmtexpr13#32 := _dryad_S10#13;
        // assert @prim_writes_check((next->size)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#next, ^mem_reg), mem_reg.size));
        // *(next->size) := tmp_size#0; 
        call $write_int(mem_reg.size, $phys_ptr_cast(L#next, ^mem_reg), tmp_size#0);
        assume $full_stop_ext(#tok$3^47.5, $s);
        // _math \state _dryad_S11#14; 
        // _dryad_S11#14 := @_vcc_current_state(@state); 
        _dryad_S11#14 := $current_state($s);
        // _math \state stmtexpr14#33; 
        // stmtexpr14#33 := _dryad_S11#14; 
        stmtexpr14#33 := _dryad_S11#14;
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10#13, dll_reach(*((next->prev)))))), ==(old(_dryad_S10#13, dll(*((next->prev)))), old(_dryad_S11#14, dll(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S10#13, $rd_phys_ptr(_dryad_S10#13, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S10#13, $rd_phys_ptr(_dryad_S10#13, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S11#14, $rd_phys_ptr(_dryad_S11#14, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10#13, dll_reach(*((next->prev)))))), ==(old(_dryad_S10#13, dll_reach(*((next->prev)))), old(_dryad_S11#14, dll_reach(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S10#13, $rd_phys_ptr(_dryad_S10#13, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S10#13, $rd_phys_ptr(_dryad_S10#13, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S11#14, $rd_phys_ptr(_dryad_S11#14, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10#13, dll_reach(*((next->next)))))), ==(old(_dryad_S10#13, dll(*((next->next)))), old(_dryad_S11#14, dll(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S10#13, $rd_phys_ptr(_dryad_S10#13, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S10#13, $rd_phys_ptr(_dryad_S10#13, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S11#14, $rd_phys_ptr(_dryad_S11#14, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10#13, dll_reach(*((next->next)))))), ==(old(_dryad_S10#13, dll_reach(*((next->next)))), old(_dryad_S11#14, dll_reach(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S10#13, $rd_phys_ptr(_dryad_S10#13, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S10#13, $rd_phys_ptr(_dryad_S10#13, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S11#14, $rd_phys_ptr(_dryad_S11#14, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==(old(_dryad_S10#13, dll(curr5)), old(_dryad_S11#14, dll(curr5))); 
        assume F#dll(_dryad_S10#13, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll(_dryad_S11#14, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==(old(_dryad_S10#13, dll_reach(curr5)), old(_dryad_S11#14, dll_reach(curr5))); 
        assume F#dll_reach(_dryad_S10#13, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll_reach(_dryad_S11#14, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==(old(_dryad_S10#13, dll(curr1)), old(_dryad_S11#14, dll(curr1))); 
        assume F#dll(_dryad_S10#13, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll(_dryad_S11#14, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==(old(_dryad_S10#13, dll_reach(curr1)), old(_dryad_S11#14, dll_reach(curr1))); 
        assume F#dll_reach(_dryad_S10#13, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll_reach(_dryad_S11#14, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==(old(_dryad_S10#13, dll(curr0)), old(_dryad_S11#14, dll(curr0))); 
        assume F#dll(_dryad_S10#13, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S11#14, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S10#13, dll_reach(curr0)), old(_dryad_S11#14, dll_reach(curr0))); 
        assume F#dll_reach(_dryad_S10#13, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S11#14, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S10#13, dll(old_next)), old(_dryad_S11#14, dll(old_next))); 
        assume F#dll(_dryad_S10#13, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S11#14, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S10#13, dll_reach(old_next)), old(_dryad_S11#14, dll_reach(old_next))); 
        assume F#dll_reach(_dryad_S10#13, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S11#14, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S10#13, dll(next)), old(_dryad_S11#14, dll(next))); 
        assume F#dll(_dryad_S10#13, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(_dryad_S11#14, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S10#13, dll_reach(next)), old(_dryad_S11#14, dll_reach(next))); 
        assume F#dll_reach(_dryad_S10#13, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(_dryad_S11#14, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S10#13, dll(curr)), old(_dryad_S11#14, dll(curr))); 
        assume F#dll(_dryad_S10#13, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S11#14, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==(old(_dryad_S10#13, dll_reach(curr)), old(_dryad_S11#14, dll_reach(curr))); 
        assume F#dll_reach(_dryad_S10#13, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S11#14, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10#13, dll_reach(curr5)))), ==(old(_dryad_S10#13, dll(curr5)), old(_dryad_S11#14, dll(curr5)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S10#13, $phys_ptr_cast(SL#curr5, ^mem_reg))) ==> F#dll(_dryad_S10#13, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll(_dryad_S11#14, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10#13, dll_reach(curr5)))), ==(old(_dryad_S10#13, dll_reach(curr5)), old(_dryad_S11#14, dll_reach(curr5)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S10#13, $phys_ptr_cast(SL#curr5, ^mem_reg))) ==> F#dll_reach(_dryad_S10#13, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll_reach(_dryad_S11#14, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10#13, dll_reach(curr1)))), ==(old(_dryad_S10#13, dll(curr1)), old(_dryad_S11#14, dll(curr1)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S10#13, $phys_ptr_cast(SL#curr1, ^mem_reg))) ==> F#dll(_dryad_S10#13, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll(_dryad_S11#14, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10#13, dll_reach(curr1)))), ==(old(_dryad_S10#13, dll_reach(curr1)), old(_dryad_S11#14, dll_reach(curr1)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S10#13, $phys_ptr_cast(SL#curr1, ^mem_reg))) ==> F#dll_reach(_dryad_S10#13, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll_reach(_dryad_S11#14, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10#13, dll_reach(curr0)))), ==(old(_dryad_S10#13, dll(curr0)), old(_dryad_S11#14, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S10#13, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(_dryad_S10#13, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S11#14, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10#13, dll_reach(curr0)))), ==(old(_dryad_S10#13, dll_reach(curr0)), old(_dryad_S11#14, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S10#13, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(_dryad_S10#13, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S11#14, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10#13, dll_reach(old_next)))), ==(old(_dryad_S10#13, dll(old_next)), old(_dryad_S11#14, dll(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S10#13, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(_dryad_S10#13, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S11#14, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10#13, dll_reach(old_next)))), ==(old(_dryad_S10#13, dll_reach(old_next)), old(_dryad_S11#14, dll_reach(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S10#13, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(_dryad_S10#13, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S11#14, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10#13, dll_reach(curr)))), ==(old(_dryad_S10#13, dll(curr)), old(_dryad_S11#14, dll(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S10#13, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(_dryad_S10#13, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S11#14, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S10#13, dll_reach(curr)))), ==(old(_dryad_S10#13, dll_reach(curr)), old(_dryad_S11#14, dll_reach(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S10#13, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(_dryad_S10#13, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S11#14, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), @_vcc_ptr_eq_pure(*((curr5->file)), old(_dryad_S10#13, *((curr5->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr5, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S10#13, mem_reg.file, $phys_ptr_cast(SL#curr5, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), ==(*((curr5->file_offset)), old(_dryad_S10#13, *((curr5->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.file_offset, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), ==(*((curr5->file_size)), old(_dryad_S10#13, *((curr5->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.file_size, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), ==(*((curr5->start_address)), old(_dryad_S10#13, *((curr5->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.start_address, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), ==(*((curr5->size)), old(_dryad_S10#13, *((curr5->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.size, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), @_vcc_ptr_eq_pure(*((curr5->prev)), old(_dryad_S10#13, *((curr5->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S10#13, mem_reg.prev, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), @_vcc_ptr_eq_pure(*((curr5->next)), old(_dryad_S10#13, *((curr5->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S10#13, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->file)), old(_dryad_S10#13, *((curr1->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr1, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S10#13, mem_reg.file, $phys_ptr_cast(SL#curr1, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->file_offset)), old(_dryad_S10#13, *((curr1->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.file_offset, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->file_size)), old(_dryad_S10#13, *((curr1->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.file_size, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->start_address)), old(_dryad_S10#13, *((curr1->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.start_address, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->size)), old(_dryad_S10#13, *((curr1->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.size, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->prev)), old(_dryad_S10#13, *((curr1->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S10#13, mem_reg.prev, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->next)), old(_dryad_S10#13, *((curr1->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S10#13, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S10#13, *((curr0->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S10#13, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_offset)), old(_dryad_S10#13, *((curr0->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_size)), old(_dryad_S10#13, *((curr0->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->start_address)), old(_dryad_S10#13, *((curr0->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->size)), old(_dryad_S10#13, *((curr0->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S10#13, *((curr0->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S10#13, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S10#13, *((curr0->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S10#13, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S10#13, *((old_next->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S10#13, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_offset)), old(_dryad_S10#13, *((old_next->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_size)), old(_dryad_S10#13, *((old_next->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->start_address)), old(_dryad_S10#13, *((old_next->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->size)), old(_dryad_S10#13, *((old_next->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S10#13, *((old_next->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S10#13, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S10#13, *((old_next->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S10#13, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->file)), old(_dryad_S10#13, *((curr->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S10#13, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_offset)), old(_dryad_S10#13, *((curr->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_size)), old(_dryad_S10#13, *((curr->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->start_address)), old(_dryad_S10#13, *((curr->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->size)), old(_dryad_S10#13, *((curr->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S10#13, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->prev)), old(_dryad_S10#13, *((curr->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S10#13, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S10#13, *((curr->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S10#13, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(@_vcc_ptr_neq_null(curr5), ==(dll(curr5), &&(&&(dll(*((curr5->next))), ==>(@_vcc_ptr_neq_null(*((curr5->next))), @_vcc_ptr_eq_pure(*((*((curr5->next))->prev)), curr5))), unchecked!(@_vcc_oset_in(curr5, dll_reach(*((curr5->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr5, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr5, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr5, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr5), ==(dll_reach(curr5), @_vcc_oset_union(dll_reach(*((curr5->next))), @_vcc_oset_singleton(curr5)))); 
        assume $non_null($phys_ptr_cast(SL#curr5, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr5, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr1), ==(dll(curr1), &&(&&(dll(*((curr1->next))), ==>(@_vcc_ptr_neq_null(*((curr1->next))), @_vcc_ptr_eq_pure(*((*((curr1->next))->prev)), curr1))), unchecked!(@_vcc_oset_in(curr1, dll_reach(*((curr1->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr1, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr1, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr1, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr1), ==(dll_reach(curr1), @_vcc_oset_union(dll_reach(*((curr1->next))), @_vcc_oset_singleton(curr1)))); 
        assume $non_null($phys_ptr_cast(SL#curr1, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr1, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // _math \state _dryad_S12#15; 
        // _dryad_S12#15 := @_vcc_current_state(@state); 
        _dryad_S12#15 := $current_state($s);
        // _math \state stmtexpr15#34; 
        // stmtexpr15#34 := _dryad_S12#15; 
        stmtexpr15#34 := _dryad_S12#15;
        // assert @prim_writes_check((next->prev)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#next, ^mem_reg), mem_reg.prev));
        // *(next->prev) := (struct mem_reg*)@null; 
        call $write_int(mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), $ptr_to_int($phys_ptr_cast($null, ^mem_reg)));
        assume $full_stop_ext(#tok$3^48.5, $s);
        // _math \state _dryad_S13#16; 
        // _dryad_S13#16 := @_vcc_current_state(@state); 
        _dryad_S13#16 := $current_state($s);
        // _math \state stmtexpr16#35; 
        // stmtexpr16#35 := _dryad_S13#16; 
        stmtexpr16#35 := _dryad_S13#16;
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12#15, dll_reach(*((next->next)))))), ==(old(_dryad_S12#15, dll(*((next->next)))), old(_dryad_S13#16, dll(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S12#15, $rd_phys_ptr(_dryad_S12#15, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S12#15, $rd_phys_ptr(_dryad_S12#15, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S13#16, $rd_phys_ptr(_dryad_S13#16, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12#15, dll_reach(*((next->next)))))), ==(old(_dryad_S12#15, dll_reach(*((next->next)))), old(_dryad_S13#16, dll_reach(*((next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S12#15, $rd_phys_ptr(_dryad_S12#15, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S12#15, $rd_phys_ptr(_dryad_S12#15, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S13#16, $rd_phys_ptr(_dryad_S13#16, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==(old(_dryad_S12#15, dll(curr5)), old(_dryad_S13#16, dll(curr5))); 
        assume F#dll(_dryad_S12#15, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll(_dryad_S13#16, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==(old(_dryad_S12#15, dll_reach(curr5)), old(_dryad_S13#16, dll_reach(curr5))); 
        assume F#dll_reach(_dryad_S12#15, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll_reach(_dryad_S13#16, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==(old(_dryad_S12#15, dll(curr1)), old(_dryad_S13#16, dll(curr1))); 
        assume F#dll(_dryad_S12#15, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll(_dryad_S13#16, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==(old(_dryad_S12#15, dll_reach(curr1)), old(_dryad_S13#16, dll_reach(curr1))); 
        assume F#dll_reach(_dryad_S12#15, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll_reach(_dryad_S13#16, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==(old(_dryad_S12#15, dll(curr0)), old(_dryad_S13#16, dll(curr0))); 
        assume F#dll(_dryad_S12#15, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S13#16, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S12#15, dll_reach(curr0)), old(_dryad_S13#16, dll_reach(curr0))); 
        assume F#dll_reach(_dryad_S12#15, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S13#16, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S12#15, dll(old_next)), old(_dryad_S13#16, dll(old_next))); 
        assume F#dll(_dryad_S12#15, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S13#16, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S12#15, dll_reach(old_next)), old(_dryad_S13#16, dll_reach(old_next))); 
        assume F#dll_reach(_dryad_S12#15, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S13#16, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S12#15, dll(next)), old(_dryad_S13#16, dll(next))); 
        assume F#dll(_dryad_S12#15, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(_dryad_S13#16, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S12#15, dll_reach(next)), old(_dryad_S13#16, dll_reach(next))); 
        assume F#dll_reach(_dryad_S12#15, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(_dryad_S13#16, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S12#15, dll(curr)), old(_dryad_S13#16, dll(curr))); 
        assume F#dll(_dryad_S12#15, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S13#16, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==(old(_dryad_S12#15, dll_reach(curr)), old(_dryad_S13#16, dll_reach(curr))); 
        assume F#dll_reach(_dryad_S12#15, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S13#16, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12#15, dll_reach(curr5)))), ==(old(_dryad_S12#15, dll(curr5)), old(_dryad_S13#16, dll(curr5)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S12#15, $phys_ptr_cast(SL#curr5, ^mem_reg))) ==> F#dll(_dryad_S12#15, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll(_dryad_S13#16, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12#15, dll_reach(curr5)))), ==(old(_dryad_S12#15, dll_reach(curr5)), old(_dryad_S13#16, dll_reach(curr5)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S12#15, $phys_ptr_cast(SL#curr5, ^mem_reg))) ==> F#dll_reach(_dryad_S12#15, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll_reach(_dryad_S13#16, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12#15, dll_reach(curr1)))), ==(old(_dryad_S12#15, dll(curr1)), old(_dryad_S13#16, dll(curr1)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S12#15, $phys_ptr_cast(SL#curr1, ^mem_reg))) ==> F#dll(_dryad_S12#15, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll(_dryad_S13#16, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12#15, dll_reach(curr1)))), ==(old(_dryad_S12#15, dll_reach(curr1)), old(_dryad_S13#16, dll_reach(curr1)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S12#15, $phys_ptr_cast(SL#curr1, ^mem_reg))) ==> F#dll_reach(_dryad_S12#15, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll_reach(_dryad_S13#16, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12#15, dll_reach(curr0)))), ==(old(_dryad_S12#15, dll(curr0)), old(_dryad_S13#16, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S12#15, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(_dryad_S12#15, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S13#16, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12#15, dll_reach(curr0)))), ==(old(_dryad_S12#15, dll_reach(curr0)), old(_dryad_S13#16, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S12#15, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(_dryad_S12#15, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S13#16, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12#15, dll_reach(old_next)))), ==(old(_dryad_S12#15, dll(old_next)), old(_dryad_S13#16, dll(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S12#15, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(_dryad_S12#15, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S13#16, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12#15, dll_reach(old_next)))), ==(old(_dryad_S12#15, dll_reach(old_next)), old(_dryad_S13#16, dll_reach(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S12#15, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(_dryad_S12#15, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S13#16, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12#15, dll_reach(curr)))), ==(old(_dryad_S12#15, dll(curr)), old(_dryad_S13#16, dll(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S12#15, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(_dryad_S12#15, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S13#16, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S12#15, dll_reach(curr)))), ==(old(_dryad_S12#15, dll_reach(curr)), old(_dryad_S13#16, dll_reach(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S12#15, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(_dryad_S12#15, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S13#16, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), @_vcc_ptr_eq_pure(*((curr5->file)), old(_dryad_S12#15, *((curr5->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr5, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S12#15, mem_reg.file, $phys_ptr_cast(SL#curr5, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), ==(*((curr5->file_offset)), old(_dryad_S12#15, *((curr5->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.file_offset, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), ==(*((curr5->file_size)), old(_dryad_S12#15, *((curr5->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.file_size, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), ==(*((curr5->start_address)), old(_dryad_S12#15, *((curr5->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.start_address, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), ==(*((curr5->size)), old(_dryad_S12#15, *((curr5->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.size, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), @_vcc_ptr_eq_pure(*((curr5->prev)), old(_dryad_S12#15, *((curr5->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S12#15, mem_reg.prev, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), @_vcc_ptr_eq_pure(*((curr5->next)), old(_dryad_S12#15, *((curr5->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S12#15, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->file)), old(_dryad_S12#15, *((curr1->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr1, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S12#15, mem_reg.file, $phys_ptr_cast(SL#curr1, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->file_offset)), old(_dryad_S12#15, *((curr1->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.file_offset, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->file_size)), old(_dryad_S12#15, *((curr1->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.file_size, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->start_address)), old(_dryad_S12#15, *((curr1->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.start_address, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->size)), old(_dryad_S12#15, *((curr1->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.size, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->prev)), old(_dryad_S12#15, *((curr1->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S12#15, mem_reg.prev, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->next)), old(_dryad_S12#15, *((curr1->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S12#15, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S12#15, *((curr0->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S12#15, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_offset)), old(_dryad_S12#15, *((curr0->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_size)), old(_dryad_S12#15, *((curr0->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->start_address)), old(_dryad_S12#15, *((curr0->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->size)), old(_dryad_S12#15, *((curr0->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S12#15, *((curr0->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S12#15, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S12#15, *((curr0->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S12#15, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S12#15, *((old_next->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S12#15, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_offset)), old(_dryad_S12#15, *((old_next->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_size)), old(_dryad_S12#15, *((old_next->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->start_address)), old(_dryad_S12#15, *((old_next->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->size)), old(_dryad_S12#15, *((old_next->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S12#15, *((old_next->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S12#15, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S12#15, *((old_next->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S12#15, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->file)), old(_dryad_S12#15, *((curr->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S12#15, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_offset)), old(_dryad_S12#15, *((curr->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_size)), old(_dryad_S12#15, *((curr->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->start_address)), old(_dryad_S12#15, *((curr->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->size)), old(_dryad_S12#15, *((curr->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S12#15, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->prev)), old(_dryad_S12#15, *((curr->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S12#15, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S12#15, *((curr->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S12#15, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(@_vcc_ptr_neq_null(curr5), ==(dll(curr5), &&(&&(dll(*((curr5->next))), ==>(@_vcc_ptr_neq_null(*((curr5->next))), @_vcc_ptr_eq_pure(*((*((curr5->next))->prev)), curr5))), unchecked!(@_vcc_oset_in(curr5, dll_reach(*((curr5->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr5, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr5, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr5, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr5), ==(dll_reach(curr5), @_vcc_oset_union(dll_reach(*((curr5->next))), @_vcc_oset_singleton(curr5)))); 
        assume $non_null($phys_ptr_cast(SL#curr5, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr5, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr1), ==(dll(curr1), &&(&&(dll(*((curr1->next))), ==>(@_vcc_ptr_neq_null(*((curr1->next))), @_vcc_ptr_eq_pure(*((*((curr1->next))->prev)), curr1))), unchecked!(@_vcc_oset_in(curr1, dll_reach(*((curr1->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr1, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr1, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr1, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr1), ==(dll_reach(curr1), @_vcc_oset_union(dll_reach(*((curr1->next))), @_vcc_oset_singleton(curr1)))); 
        assume $non_null($phys_ptr_cast(SL#curr1, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr1, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // _math \state _dryad_S14#17; 
        // _dryad_S14#17 := @_vcc_current_state(@state); 
        _dryad_S14#17 := $current_state($s);
        // _math \state stmtexpr17#36; 
        // stmtexpr17#36 := _dryad_S14#17; 
        stmtexpr17#36 := _dryad_S14#17;
        // assert @prim_writes_check((next->next)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#next, ^mem_reg), mem_reg.next));
        // *(next->next) := (struct mem_reg*)@null; 
        call $write_int(mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), $ptr_to_int($phys_ptr_cast($null, ^mem_reg)));
        assume $full_stop_ext(#tok$3^49.5, $s);
        // _math \state _dryad_S15#18; 
        // _dryad_S15#18 := @_vcc_current_state(@state); 
        _dryad_S15#18 := $current_state($s);
        // _math \state stmtexpr18#37; 
        // stmtexpr18#37 := _dryad_S15#18; 
        stmtexpr18#37 := _dryad_S15#18;
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14#17, dll_reach(*((next->prev)))))), ==(old(_dryad_S14#17, dll(*((next->prev)))), old(_dryad_S15#18, dll(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S14#17, $rd_phys_ptr(_dryad_S14#17, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S14#17, $rd_phys_ptr(_dryad_S14#17, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S15#18, $rd_phys_ptr(_dryad_S15#18, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14#17, dll_reach(*((next->prev)))))), ==(old(_dryad_S14#17, dll_reach(*((next->prev)))), old(_dryad_S15#18, dll_reach(*((next->prev)))))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S14#17, $rd_phys_ptr(_dryad_S14#17, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S14#17, $rd_phys_ptr(_dryad_S14#17, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S15#18, $rd_phys_ptr(_dryad_S15#18, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14#17, dll_reach(curr5)))), ==(old(_dryad_S14#17, dll(curr5)), old(_dryad_S15#18, dll(curr5)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S14#17, $phys_ptr_cast(SL#curr5, ^mem_reg))) ==> F#dll(_dryad_S14#17, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll(_dryad_S15#18, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14#17, dll_reach(curr5)))), ==(old(_dryad_S14#17, dll_reach(curr5)), old(_dryad_S15#18, dll_reach(curr5)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S14#17, $phys_ptr_cast(SL#curr5, ^mem_reg))) ==> F#dll_reach(_dryad_S14#17, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll_reach(_dryad_S15#18, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14#17, dll_reach(curr1)))), ==(old(_dryad_S14#17, dll(curr1)), old(_dryad_S15#18, dll(curr1)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S14#17, $phys_ptr_cast(SL#curr1, ^mem_reg))) ==> F#dll(_dryad_S14#17, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll(_dryad_S15#18, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14#17, dll_reach(curr1)))), ==(old(_dryad_S14#17, dll_reach(curr1)), old(_dryad_S15#18, dll_reach(curr1)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S14#17, $phys_ptr_cast(SL#curr1, ^mem_reg))) ==> F#dll_reach(_dryad_S14#17, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll_reach(_dryad_S15#18, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14#17, dll_reach(curr0)))), ==(old(_dryad_S14#17, dll(curr0)), old(_dryad_S15#18, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S14#17, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(_dryad_S14#17, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S15#18, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14#17, dll_reach(curr0)))), ==(old(_dryad_S14#17, dll_reach(curr0)), old(_dryad_S15#18, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S14#17, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(_dryad_S14#17, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S15#18, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14#17, dll_reach(old_next)))), ==(old(_dryad_S14#17, dll(old_next)), old(_dryad_S15#18, dll(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S14#17, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(_dryad_S14#17, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S15#18, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14#17, dll_reach(old_next)))), ==(old(_dryad_S14#17, dll_reach(old_next)), old(_dryad_S15#18, dll_reach(old_next)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S14#17, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(_dryad_S14#17, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S15#18, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14#17, dll_reach(curr)))), ==(old(_dryad_S14#17, dll(curr)), old(_dryad_S15#18, dll(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S14#17, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(_dryad_S14#17, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S15#18, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S14#17, dll_reach(curr)))), ==(old(_dryad_S14#17, dll_reach(curr)), old(_dryad_S15#18, dll_reach(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S14#17, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(_dryad_S14#17, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S15#18, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), @_vcc_ptr_eq_pure(*((curr5->file)), old(_dryad_S14#17, *((curr5->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr5, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S14#17, mem_reg.file, $phys_ptr_cast(SL#curr5, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), ==(*((curr5->file_offset)), old(_dryad_S14#17, *((curr5->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.file_offset, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), ==(*((curr5->file_size)), old(_dryad_S14#17, *((curr5->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.file_size, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), ==(*((curr5->start_address)), old(_dryad_S14#17, *((curr5->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.start_address, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), ==(*((curr5->size)), old(_dryad_S14#17, *((curr5->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.size, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), @_vcc_ptr_eq_pure(*((curr5->prev)), old(_dryad_S14#17, *((curr5->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S14#17, mem_reg.prev, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr5)), @_vcc_ptr_eq_pure(*((curr5->next)), old(_dryad_S14#17, *((curr5->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S14#17, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->file)), old(_dryad_S14#17, *((curr1->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr1, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S14#17, mem_reg.file, $phys_ptr_cast(SL#curr1, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->file_offset)), old(_dryad_S14#17, *((curr1->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.file_offset, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->file_size)), old(_dryad_S14#17, *((curr1->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.file_size, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->start_address)), old(_dryad_S14#17, *((curr1->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.start_address, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), ==(*((curr1->size)), old(_dryad_S14#17, *((curr1->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.size, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->prev)), old(_dryad_S14#17, *((curr1->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S14#17, mem_reg.prev, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr1)), @_vcc_ptr_eq_pure(*((curr1->next)), old(_dryad_S14#17, *((curr1->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S14#17, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S14#17, *((curr0->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S14#17, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_offset)), old(_dryad_S14#17, *((curr0->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_size)), old(_dryad_S14#17, *((curr0->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->start_address)), old(_dryad_S14#17, *((curr0->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->size)), old(_dryad_S14#17, *((curr0->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S14#17, *((curr0->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S14#17, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S14#17, *((curr0->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S14#17, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S14#17, *((old_next->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S14#17, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_offset)), old(_dryad_S14#17, *((old_next->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_size)), old(_dryad_S14#17, *((old_next->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->start_address)), old(_dryad_S14#17, *((old_next->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->size)), old(_dryad_S14#17, *((old_next->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S14#17, *((old_next->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S14#17, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S14#17, *((old_next->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S14#17, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->file)), old(_dryad_S14#17, *((curr->file))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S14#17, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_offset)), old(_dryad_S14#17, *((curr->file_offset))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_size)), old(_dryad_S14#17, *((curr->file_size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->start_address)), old(_dryad_S14#17, *((curr->start_address))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->size)), old(_dryad_S14#17, *((curr->size))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S14#17, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->prev)), old(_dryad_S14#17, *((curr->prev))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S14#17, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S14#17, *((curr->next))))); 
        assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S14#17, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(@_vcc_ptr_neq_null(curr5), ==(dll(curr5), &&(&&(dll(*((curr5->next))), ==>(@_vcc_ptr_neq_null(*((curr5->next))), @_vcc_ptr_eq_pure(*((*((curr5->next))->prev)), curr5))), unchecked!(@_vcc_oset_in(curr5, dll_reach(*((curr5->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr5, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr5, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr5, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr5), ==(dll_reach(curr5), @_vcc_oset_union(dll_reach(*((curr5->next))), @_vcc_oset_singleton(curr5)))); 
        assume $non_null($phys_ptr_cast(SL#curr5, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr5, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr1), ==(dll(curr1), &&(&&(dll(*((curr1->next))), ==>(@_vcc_ptr_neq_null(*((curr1->next))), @_vcc_ptr_eq_pure(*((*((curr1->next))->prev)), curr1))), unchecked!(@_vcc_oset_in(curr1, dll_reach(*((curr1->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr1, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr1, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr1, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr1), ==(dll_reach(curr1), @_vcc_oset_union(dll_reach(*((curr1->next))), @_vcc_oset_singleton(curr1)))); 
        assume $non_null($phys_ptr_cast(SL#curr1, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr1, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll(next), &&(&&(dll(*((next->next))), ==>(@_vcc_ptr_neq_null(*((next->next))), @_vcc_ptr_eq_pure(*((*((next->next))->prev)), next))), unchecked!(@_vcc_oset_in(next, dll_reach(*((next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll_reach(next), @_vcc_oset_union(dll_reach(*((next->next))), @_vcc_oset_singleton(next)))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#next, ^mem_reg)));
        // _math \state _dryad_S16; 
        // _dryad_S16 := @_vcc_current_state(@state); 
        SL#_dryad_S16 := $current_state($s);
        // _math \state stmtexpr19#38; 
        // stmtexpr19#38 := _dryad_S16; 
        stmtexpr19#38 := SL#_dryad_S16;
        // assert @prim_writes_check((curr->file_size)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(P#curr, ^mem_reg), mem_reg.file_size));
        // *(curr->file_size) := offset; 
        call $write_int(mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg), P#offset);
        assume $full_stop_ext(#tok$3^50.5, $s);
        // _math \state _dryad_S17; 
        // _dryad_S17 := @_vcc_current_state(@state); 
        SL#_dryad_S17 := $current_state($s);
        // _math \state stmtexpr20#39; 
        // stmtexpr20#39 := _dryad_S17; 
        stmtexpr20#39 := SL#_dryad_S17;
        // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S16, dll_reach(*((curr->prev)))))), ==(old(_dryad_S16, dll(*((curr->prev)))), old(_dryad_S17, dll(*((curr->prev)))))); 
        assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(SL#_dryad_S16, $rd_phys_ptr(SL#_dryad_S16, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))) ==> F#dll(SL#_dryad_S16, $rd_phys_ptr(SL#_dryad_S16, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) == F#dll(SL#_dryad_S17, $rd_phys_ptr(SL#_dryad_S17, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S16, dll_reach(*((curr->prev)))))), ==(old(_dryad_S16, dll_reach(*((curr->prev)))), old(_dryad_S17, dll_reach(*((curr->prev)))))); 
        assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(SL#_dryad_S16, $rd_phys_ptr(SL#_dryad_S16, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))) ==> F#dll_reach(SL#_dryad_S16, $rd_phys_ptr(SL#_dryad_S16, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) == F#dll_reach(SL#_dryad_S17, $rd_phys_ptr(SL#_dryad_S17, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S16, dll_reach(*((curr->next)))))), ==(old(_dryad_S16, dll(*((curr->next)))), old(_dryad_S17, dll(*((curr->next)))))); 
        assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(SL#_dryad_S16, $rd_phys_ptr(SL#_dryad_S16, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))) ==> F#dll(SL#_dryad_S16, $rd_phys_ptr(SL#_dryad_S16, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) == F#dll(SL#_dryad_S17, $rd_phys_ptr(SL#_dryad_S17, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S16, dll_reach(*((curr->next)))))), ==(old(_dryad_S16, dll_reach(*((curr->next)))), old(_dryad_S17, dll_reach(*((curr->next)))))); 
        assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(SL#_dryad_S16, $rd_phys_ptr(SL#_dryad_S16, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))) ==> F#dll_reach(SL#_dryad_S16, $rd_phys_ptr(SL#_dryad_S16, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) == F#dll_reach(SL#_dryad_S17, $rd_phys_ptr(SL#_dryad_S17, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg));
        // assume ==(old(_dryad_S16, dll(curr5)), old(_dryad_S17, dll(curr5))); 
        assume F#dll(SL#_dryad_S16, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll(SL#_dryad_S17, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==(old(_dryad_S16, dll_reach(curr5)), old(_dryad_S17, dll_reach(curr5))); 
        assume F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll_reach(SL#_dryad_S17, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==(old(_dryad_S16, dll(curr1)), old(_dryad_S17, dll(curr1))); 
        assume F#dll(SL#_dryad_S16, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll(SL#_dryad_S17, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==(old(_dryad_S16, dll_reach(curr1)), old(_dryad_S17, dll_reach(curr1))); 
        assume F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll_reach(SL#_dryad_S17, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==(old(_dryad_S16, dll(curr0)), old(_dryad_S17, dll(curr0))); 
        assume F#dll(SL#_dryad_S16, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(SL#_dryad_S17, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S16, dll_reach(curr0)), old(_dryad_S17, dll_reach(curr0))); 
        assume F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(SL#_dryad_S17, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==(old(_dryad_S16, dll(old_next)), old(_dryad_S17, dll(old_next))); 
        assume F#dll(SL#_dryad_S16, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(SL#_dryad_S17, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S16, dll_reach(old_next)), old(_dryad_S17, dll_reach(old_next))); 
        assume F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(SL#_dryad_S17, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S16, dll(next)), old(_dryad_S17, dll(next))); 
        assume F#dll(SL#_dryad_S16, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(SL#_dryad_S17, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S16, dll_reach(next)), old(_dryad_S17, dll_reach(next))); 
        assume F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(SL#_dryad_S17, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==(old(_dryad_S16, dll(curr)), old(_dryad_S17, dll(curr))); 
        assume F#dll(SL#_dryad_S16, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(SL#_dryad_S17, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==(old(_dryad_S16, dll_reach(curr)), old(_dryad_S17, dll_reach(curr))); 
        assume F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(SL#_dryad_S17, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S16, dll_reach(curr5)))), ==(old(_dryad_S16, dll(curr5)), old(_dryad_S17, dll(curr5)))); 
        assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(SL#curr5, ^mem_reg))) ==> F#dll(SL#_dryad_S16, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll(SL#_dryad_S17, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S16, dll_reach(curr5)))), ==(old(_dryad_S16, dll_reach(curr5)), old(_dryad_S17, dll_reach(curr5)))); 
        assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(SL#curr5, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(SL#curr5, ^mem_reg)) == F#dll_reach(SL#_dryad_S17, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S16, dll_reach(curr1)))), ==(old(_dryad_S16, dll(curr1)), old(_dryad_S17, dll(curr1)))); 
        assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(SL#curr1, ^mem_reg))) ==> F#dll(SL#_dryad_S16, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll(SL#_dryad_S17, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S16, dll_reach(curr1)))), ==(old(_dryad_S16, dll_reach(curr1)), old(_dryad_S17, dll_reach(curr1)))); 
        assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(SL#curr1, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(SL#curr1, ^mem_reg)) == F#dll_reach(SL#_dryad_S17, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S16, dll_reach(curr0)))), ==(old(_dryad_S16, dll(curr0)), old(_dryad_S17, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(SL#_dryad_S16, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(SL#_dryad_S17, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S16, dll_reach(curr0)))), ==(old(_dryad_S16, dll_reach(curr0)), old(_dryad_S17, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(SL#_dryad_S17, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S16, dll_reach(old_next)))), ==(old(_dryad_S16, dll(old_next)), old(_dryad_S17, dll(old_next)))); 
        assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(SL#_dryad_S16, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(SL#_dryad_S17, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S16, dll_reach(old_next)))), ==(old(_dryad_S16, dll_reach(old_next)), old(_dryad_S17, dll_reach(old_next)))); 
        assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(SL#_dryad_S17, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S16, dll_reach(next)))), ==(old(_dryad_S16, dll(next)), old(_dryad_S17, dll(next)))); 
        assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(L#next, ^mem_reg))) ==> F#dll(SL#_dryad_S16, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(SL#_dryad_S17, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S16, dll_reach(next)))), ==(old(_dryad_S16, dll_reach(next)), old(_dryad_S17, dll_reach(next)))); 
        assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(L#next, ^mem_reg))) ==> F#dll_reach(SL#_dryad_S16, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(SL#_dryad_S17, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr5)), @_vcc_ptr_eq_pure(*((curr5->file)), old(_dryad_S16, *((curr5->file))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr5, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S16, mem_reg.file, $phys_ptr_cast(SL#curr5, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr5)), ==(*((curr5->file_offset)), old(_dryad_S16, *((curr5->file_offset))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.file_offset, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr5)), ==(*((curr5->file_size)), old(_dryad_S16, *((curr5->file_size))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.file_size, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr5)), ==(*((curr5->start_address)), old(_dryad_S16, *((curr5->start_address))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.start_address, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr5)), ==(*((curr5->size)), old(_dryad_S16, *((curr5->size))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.size, $phys_ptr_cast(SL#curr5, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr5)), @_vcc_ptr_eq_pure(*((curr5->prev)), old(_dryad_S16, *((curr5->prev))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S16, mem_reg.prev, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr5)), @_vcc_ptr_eq_pure(*((curr5->next)), old(_dryad_S16, *((curr5->next))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S16, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr1)), @_vcc_ptr_eq_pure(*((curr1->file)), old(_dryad_S16, *((curr1->file))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr1, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S16, mem_reg.file, $phys_ptr_cast(SL#curr1, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr1)), ==(*((curr1->file_offset)), old(_dryad_S16, *((curr1->file_offset))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.file_offset, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr1)), ==(*((curr1->file_size)), old(_dryad_S16, *((curr1->file_size))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.file_size, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr1)), ==(*((curr1->start_address)), old(_dryad_S16, *((curr1->start_address))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.start_address, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr1)), ==(*((curr1->size)), old(_dryad_S16, *((curr1->size))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.size, $phys_ptr_cast(SL#curr1, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr1)), @_vcc_ptr_eq_pure(*((curr1->prev)), old(_dryad_S16, *((curr1->prev))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S16, mem_reg.prev, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr1)), @_vcc_ptr_eq_pure(*((curr1->next)), old(_dryad_S16, *((curr1->next))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S16, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S16, *((curr0->file))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S16, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), ==(*((curr0->file_offset)), old(_dryad_S16, *((curr0->file_offset))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), ==(*((curr0->file_size)), old(_dryad_S16, *((curr0->file_size))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), ==(*((curr0->start_address)), old(_dryad_S16, *((curr0->start_address))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), ==(*((curr0->size)), old(_dryad_S16, *((curr0->size))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S16, *((curr0->prev))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S16, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S16, *((curr0->next))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S16, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S16, *((old_next->file))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S16, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), ==(*((old_next->file_offset)), old(_dryad_S16, *((old_next->file_offset))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), ==(*((old_next->file_size)), old(_dryad_S16, *((old_next->file_size))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), ==(*((old_next->start_address)), old(_dryad_S16, *((old_next->start_address))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), ==(*((old_next->size)), old(_dryad_S16, *((old_next->size))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S16, *((old_next->prev))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S16, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S16, *((old_next->next))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S16, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), @_vcc_ptr_eq_pure(*((next->file)), old(_dryad_S16, *((next->file))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#next, ^mem_reg), ^backing_file) == $rd_phys_ptr(SL#_dryad_S16, mem_reg.file, $phys_ptr_cast(L#next, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), ==(*((next->file_offset)), old(_dryad_S16, *((next->file_offset))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#next, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.file_offset, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), ==(*((next->file_size)), old(_dryad_S16, *((next->file_size))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#next, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.file_size, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), ==(*((next->start_address)), old(_dryad_S16, *((next->start_address))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#next, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.start_address, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), ==(*((next->size)), old(_dryad_S16, *((next->size))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#next, ^mem_reg)) == $rd_inv(SL#_dryad_S16, mem_reg.size, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), @_vcc_ptr_eq_pure(*((next->prev)), old(_dryad_S16, *((next->prev))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S16, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), @_vcc_ptr_eq_pure(*((next->next)), old(_dryad_S16, *((next->next))))); 
        assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(SL#_dryad_S16, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg);
        // assume ==>(@_vcc_ptr_neq_null(curr5), ==(dll(curr5), &&(&&(dll(*((curr5->next))), ==>(@_vcc_ptr_neq_null(*((curr5->next))), @_vcc_ptr_eq_pure(*((*((curr5->next))->prev)), curr5))), unchecked!(@_vcc_oset_in(curr5, dll_reach(*((curr5->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr5, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr5, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr5, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr5, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr5), ==(dll_reach(curr5), @_vcc_oset_union(dll_reach(*((curr5->next))), @_vcc_oset_singleton(curr5)))); 
        assume $non_null($phys_ptr_cast(SL#curr5, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr5, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr5, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr5, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr1), ==(dll(curr1), &&(&&(dll(*((curr1->next))), ==>(@_vcc_ptr_neq_null(*((curr1->next))), @_vcc_ptr_eq_pure(*((*((curr1->next))->prev)), curr1))), unchecked!(@_vcc_oset_in(curr1, dll_reach(*((curr1->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr1, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr1, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr1, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr1, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr1), ==(dll_reach(curr1), @_vcc_oset_union(dll_reach(*((curr1->next))), @_vcc_oset_singleton(curr1)))); 
        assume $non_null($phys_ptr_cast(SL#curr1, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr1, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr1, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr1, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll(next), &&(&&(dll(*((next->next))), ==>(@_vcc_ptr_neq_null(*((next->next))), @_vcc_ptr_eq_pure(*((*((next->next))->prev)), next))), unchecked!(@_vcc_oset_in(next, dll_reach(*((next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll_reach(next), @_vcc_oset_union(dll_reach(*((next->next))), @_vcc_oset_singleton(next)))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#next, ^mem_reg)));
    }

  anon15:
    // _math \state _dryad_S0#19; 
    // _dryad_S0#19 := @_vcc_current_state(@state); 
    _dryad_S0#19 := $current_state($s);
    // _math \state stmtexpr3#45; 
    // stmtexpr3#45 := _dryad_S0#19; 
    stmtexpr3#45 := _dryad_S0#19;
    // assert @prim_writes_check((curr->size)); 
    assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(P#curr, ^mem_reg), mem_reg.size));
    // *(curr->size) := offset; 
    call $write_int(mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg), P#offset);
    assume $full_stop_ext(#tok$3^53.3, $s);
    // _math \state _dryad_S1#20; 
    // _dryad_S1#20 := @_vcc_current_state(@state); 
    _dryad_S1#20 := $current_state($s);
    // _math \state stmtexpr4#46; 
    // stmtexpr4#46 := _dryad_S1#20; 
    stmtexpr4#46 := _dryad_S1#20;
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S0#19, dll_reach(*((curr->prev)))))), ==(old(_dryad_S0#19, dll(*((curr->prev)))), old(_dryad_S1#20, dll(*((curr->prev)))))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S0#19, $rd_phys_ptr(_dryad_S0#19, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S0#19, $rd_phys_ptr(_dryad_S0#19, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S1#20, $rd_phys_ptr(_dryad_S1#20, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S0#19, dll_reach(*((curr->prev)))))), ==(old(_dryad_S0#19, dll_reach(*((curr->prev)))), old(_dryad_S1#20, dll_reach(*((curr->prev)))))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S0#19, $rd_phys_ptr(_dryad_S0#19, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S0#19, $rd_phys_ptr(_dryad_S0#19, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S1#20, $rd_phys_ptr(_dryad_S1#20, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S0#19, dll_reach(*((curr->next)))))), ==(old(_dryad_S0#19, dll(*((curr->next)))), old(_dryad_S1#20, dll(*((curr->next)))))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S0#19, $rd_phys_ptr(_dryad_S0#19, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S0#19, $rd_phys_ptr(_dryad_S0#19, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S1#20, $rd_phys_ptr(_dryad_S1#20, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S0#19, dll_reach(*((curr->next)))))), ==(old(_dryad_S0#19, dll_reach(*((curr->next)))), old(_dryad_S1#20, dll_reach(*((curr->next)))))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S0#19, $rd_phys_ptr(_dryad_S0#19, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S0#19, $rd_phys_ptr(_dryad_S0#19, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S1#20, $rd_phys_ptr(_dryad_S1#20, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg));
    // assume ==(old(_dryad_S0#19, dll(curr0)), old(_dryad_S1#20, dll(curr0))); 
    assume F#dll(_dryad_S0#19, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S1#20, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==(old(_dryad_S0#19, dll_reach(curr0)), old(_dryad_S1#20, dll_reach(curr0))); 
    assume F#dll_reach(_dryad_S0#19, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S1#20, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==(old(_dryad_S0#19, dll(old_next)), old(_dryad_S1#20, dll(old_next))); 
    assume F#dll(_dryad_S0#19, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S1#20, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==(old(_dryad_S0#19, dll_reach(old_next)), old(_dryad_S1#20, dll_reach(old_next))); 
    assume F#dll_reach(_dryad_S0#19, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S1#20, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==(old(_dryad_S0#19, dll(next)), old(_dryad_S1#20, dll(next))); 
    assume F#dll(_dryad_S0#19, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(_dryad_S1#20, $phys_ptr_cast(L#next, ^mem_reg));
    // assume ==(old(_dryad_S0#19, dll_reach(next)), old(_dryad_S1#20, dll_reach(next))); 
    assume F#dll_reach(_dryad_S0#19, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(_dryad_S1#20, $phys_ptr_cast(L#next, ^mem_reg));
    // assume ==(old(_dryad_S0#19, dll(curr)), old(_dryad_S1#20, dll(curr))); 
    assume F#dll(_dryad_S0#19, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S1#20, $phys_ptr_cast(P#curr, ^mem_reg));
    // assume ==(old(_dryad_S0#19, dll_reach(curr)), old(_dryad_S1#20, dll_reach(curr))); 
    assume F#dll_reach(_dryad_S0#19, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S1#20, $phys_ptr_cast(P#curr, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S0#19, dll_reach(curr0)))), ==(old(_dryad_S0#19, dll(curr0)), old(_dryad_S1#20, dll(curr0)))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S0#19, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(_dryad_S0#19, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S1#20, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S0#19, dll_reach(curr0)))), ==(old(_dryad_S0#19, dll_reach(curr0)), old(_dryad_S1#20, dll_reach(curr0)))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S0#19, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(_dryad_S0#19, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S1#20, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S0#19, dll_reach(old_next)))), ==(old(_dryad_S0#19, dll(old_next)), old(_dryad_S1#20, dll(old_next)))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S0#19, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(_dryad_S0#19, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S1#20, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S0#19, dll_reach(old_next)))), ==(old(_dryad_S0#19, dll_reach(old_next)), old(_dryad_S1#20, dll_reach(old_next)))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S0#19, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(_dryad_S0#19, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S1#20, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S0#19, dll_reach(next)))), ==(old(_dryad_S0#19, dll(next)), old(_dryad_S1#20, dll(next)))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S0#19, $phys_ptr_cast(L#next, ^mem_reg))) ==> F#dll(_dryad_S0#19, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(_dryad_S1#20, $phys_ptr_cast(L#next, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S0#19, dll_reach(next)))), ==(old(_dryad_S0#19, dll_reach(next)), old(_dryad_S1#20, dll_reach(next)))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S0#19, $phys_ptr_cast(L#next, ^mem_reg))) ==> F#dll_reach(_dryad_S0#19, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(_dryad_S1#20, $phys_ptr_cast(L#next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S0#19, *((curr0->file))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S0#19, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), ==(*((curr0->file_offset)), old(_dryad_S0#19, *((curr0->file_offset))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S0#19, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), ==(*((curr0->file_size)), old(_dryad_S0#19, *((curr0->file_size))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S0#19, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), ==(*((curr0->start_address)), old(_dryad_S0#19, *((curr0->start_address))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S0#19, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), ==(*((curr0->size)), old(_dryad_S0#19, *((curr0->size))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S0#19, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S0#19, *((curr0->prev))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S0#19, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S0#19, *((curr0->next))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S0#19, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S0#19, *((old_next->file))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S0#19, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), ==(*((old_next->file_offset)), old(_dryad_S0#19, *((old_next->file_offset))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S0#19, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), ==(*((old_next->file_size)), old(_dryad_S0#19, *((old_next->file_size))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S0#19, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), ==(*((old_next->start_address)), old(_dryad_S0#19, *((old_next->start_address))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S0#19, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), ==(*((old_next->size)), old(_dryad_S0#19, *((old_next->size))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S0#19, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S0#19, *((old_next->prev))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S0#19, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S0#19, *((old_next->next))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S0#19, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), @_vcc_ptr_eq_pure(*((next->file)), old(_dryad_S0#19, *((next->file))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#next, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S0#19, mem_reg.file, $phys_ptr_cast(L#next, ^mem_reg), ^backing_file);
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), ==(*((next->file_offset)), old(_dryad_S0#19, *((next->file_offset))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#next, ^mem_reg)) == $rd_inv(_dryad_S0#19, mem_reg.file_offset, $phys_ptr_cast(L#next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), ==(*((next->file_size)), old(_dryad_S0#19, *((next->file_size))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#next, ^mem_reg)) == $rd_inv(_dryad_S0#19, mem_reg.file_size, $phys_ptr_cast(L#next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), ==(*((next->start_address)), old(_dryad_S0#19, *((next->start_address))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#next, ^mem_reg)) == $rd_inv(_dryad_S0#19, mem_reg.start_address, $phys_ptr_cast(L#next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), ==(*((next->size)), old(_dryad_S0#19, *((next->size))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#next, ^mem_reg)) == $rd_inv(_dryad_S0#19, mem_reg.size, $phys_ptr_cast(L#next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), @_vcc_ptr_eq_pure(*((next->prev)), old(_dryad_S0#19, *((next->prev))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S0#19, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), @_vcc_ptr_eq_pure(*((next->next)), old(_dryad_S0#19, *((next->next))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S0#19, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg);
    // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
    assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
    // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
    assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
    // assume ==>(@_vcc_ptr_neq_null(next), ==(dll(next), &&(&&(dll(*((next->next))), ==>(@_vcc_ptr_neq_null(*((next->next))), @_vcc_ptr_eq_pure(*((*((next->next))->prev)), next))), unchecked!(@_vcc_oset_in(next, dll_reach(*((next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(next), ==(dll_reach(next), @_vcc_oset_union(dll_reach(*((next->next))), @_vcc_oset_singleton(next)))); 
    assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#next, ^mem_reg)));
    // _math \state _dryad_S2#21; 
    // _dryad_S2#21 := @_vcc_current_state(@state); 
    _dryad_S2#21 := $current_state($s);
    // _math \state stmtexpr5#47; 
    // stmtexpr5#47 := _dryad_S2#21; 
    stmtexpr5#47 := _dryad_S2#21;
    // assert @prim_writes_check((next->prev)); 
    assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#next, ^mem_reg), mem_reg.prev));
    // *(next->prev) := curr; 
    call $write_int(mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), $ptr_to_int($phys_ptr_cast(P#curr, ^mem_reg)));
    assume $full_stop_ext(#tok$3^54.3, $s);
    // _math \state _dryad_S3#22; 
    // _dryad_S3#22 := @_vcc_current_state(@state); 
    _dryad_S3#22 := $current_state($s);
    // _math \state stmtexpr6#48; 
    // stmtexpr6#48 := _dryad_S3#22; 
    stmtexpr6#48 := _dryad_S3#22;
    // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#21, dll_reach(*((next->next)))))), ==(old(_dryad_S2#21, dll(*((next->next)))), old(_dryad_S3#22, dll(*((next->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#21, $rd_phys_ptr(_dryad_S2#21, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S2#21, $rd_phys_ptr(_dryad_S2#21, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S3#22, $rd_phys_ptr(_dryad_S3#22, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#21, dll_reach(*((next->next)))))), ==(old(_dryad_S2#21, dll_reach(*((next->next)))), old(_dryad_S3#22, dll_reach(*((next->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#21, $rd_phys_ptr(_dryad_S2#21, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S2#21, $rd_phys_ptr(_dryad_S2#21, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S3#22, $rd_phys_ptr(_dryad_S3#22, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
    // assume ==(old(_dryad_S2#21, dll(next)), old(_dryad_S3#22, dll(next))); 
    assume F#dll(_dryad_S2#21, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(_dryad_S3#22, $phys_ptr_cast(L#next, ^mem_reg));
    // assume ==(old(_dryad_S2#21, dll_reach(next)), old(_dryad_S3#22, dll_reach(next))); 
    assume F#dll_reach(_dryad_S2#21, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(_dryad_S3#22, $phys_ptr_cast(L#next, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#21, dll_reach(curr0)))), ==(old(_dryad_S2#21, dll(curr0)), old(_dryad_S3#22, dll(curr0)))); 
    assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#21, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(_dryad_S2#21, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S3#22, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#21, dll_reach(curr0)))), ==(old(_dryad_S2#21, dll_reach(curr0)), old(_dryad_S3#22, dll_reach(curr0)))); 
    assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#21, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(_dryad_S2#21, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S3#22, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#21, dll_reach(old_next)))), ==(old(_dryad_S2#21, dll(old_next)), old(_dryad_S3#22, dll(old_next)))); 
    assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#21, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(_dryad_S2#21, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S3#22, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#21, dll_reach(old_next)))), ==(old(_dryad_S2#21, dll_reach(old_next)), old(_dryad_S3#22, dll_reach(old_next)))); 
    assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#21, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(_dryad_S2#21, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S3#22, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#21, dll_reach(curr)))), ==(old(_dryad_S2#21, dll(curr)), old(_dryad_S3#22, dll(curr)))); 
    assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#21, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(_dryad_S2#21, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S3#22, $phys_ptr_cast(P#curr, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S2#21, dll_reach(curr)))), ==(old(_dryad_S2#21, dll_reach(curr)), old(_dryad_S3#22, dll_reach(curr)))); 
    assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S2#21, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(_dryad_S2#21, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S3#22, $phys_ptr_cast(P#curr, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S2#21, *((curr0->file))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S2#21, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_offset)), old(_dryad_S2#21, *((curr0->file_offset))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S2#21, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_size)), old(_dryad_S2#21, *((curr0->file_size))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S2#21, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->start_address)), old(_dryad_S2#21, *((curr0->start_address))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S2#21, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->size)), old(_dryad_S2#21, *((curr0->size))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S2#21, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S2#21, *((curr0->prev))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S2#21, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S2#21, *((curr0->next))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S2#21, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S2#21, *((old_next->file))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S2#21, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
    // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_offset)), old(_dryad_S2#21, *((old_next->file_offset))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S2#21, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_size)), old(_dryad_S2#21, *((old_next->file_size))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S2#21, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->start_address)), old(_dryad_S2#21, *((old_next->start_address))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S2#21, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->size)), old(_dryad_S2#21, *((old_next->size))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S2#21, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S2#21, *((old_next->prev))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S2#21, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S2#21, *((old_next->next))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S2#21, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->file)), old(_dryad_S2#21, *((curr->file))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S2#21, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_offset)), old(_dryad_S2#21, *((curr->file_offset))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S2#21, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_size)), old(_dryad_S2#21, *((curr->file_size))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S2#21, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->start_address)), old(_dryad_S2#21, *((curr->start_address))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S2#21, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->size)), old(_dryad_S2#21, *((curr->size))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S2#21, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->prev)), old(_dryad_S2#21, *((curr->prev))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S2#21, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S2#21, *((curr->next))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S2#21, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
    // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
    assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
    // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
    assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
    assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
    assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
    // _math \state _dryad_S4#23; 
    // _dryad_S4#23 := @_vcc_current_state(@state); 
    _dryad_S4#23 := $current_state($s);
    // _math \state stmtexpr7#49; 
    // stmtexpr7#49 := _dryad_S4#23; 
    stmtexpr7#49 := _dryad_S4#23;
    // assert @prim_writes_check((next->next)); 
    assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#next, ^mem_reg), mem_reg.next));
    // *(next->next) := old_next; 
    call $write_int(mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), $ptr_to_int($phys_ptr_cast(L#old_next, ^mem_reg)));
    assume $full_stop_ext(#tok$3^55.3, $s);
    // _math \state _dryad_S5#24; 
    // _dryad_S5#24 := @_vcc_current_state(@state); 
    _dryad_S5#24 := $current_state($s);
    // _math \state stmtexpr8#50; 
    // stmtexpr8#50 := _dryad_S5#24; 
    stmtexpr8#50 := _dryad_S5#24;
    // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#23, dll_reach(*((next->prev)))))), ==(old(_dryad_S4#23, dll(*((next->prev)))), old(_dryad_S5#24, dll(*((next->prev)))))); 
    assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#23, $rd_phys_ptr(_dryad_S4#23, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S4#23, $rd_phys_ptr(_dryad_S4#23, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S5#24, $rd_phys_ptr(_dryad_S5#24, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#23, dll_reach(*((next->prev)))))), ==(old(_dryad_S4#23, dll_reach(*((next->prev)))), old(_dryad_S5#24, dll_reach(*((next->prev)))))); 
    assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#23, $rd_phys_ptr(_dryad_S4#23, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S4#23, $rd_phys_ptr(_dryad_S4#23, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S5#24, $rd_phys_ptr(_dryad_S5#24, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#23, dll_reach(curr0)))), ==(old(_dryad_S4#23, dll(curr0)), old(_dryad_S5#24, dll(curr0)))); 
    assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#23, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(_dryad_S4#23, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S5#24, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#23, dll_reach(curr0)))), ==(old(_dryad_S4#23, dll_reach(curr0)), old(_dryad_S5#24, dll_reach(curr0)))); 
    assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#23, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(_dryad_S4#23, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S5#24, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#23, dll_reach(old_next)))), ==(old(_dryad_S4#23, dll(old_next)), old(_dryad_S5#24, dll(old_next)))); 
    assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#23, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(_dryad_S4#23, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S5#24, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#23, dll_reach(old_next)))), ==(old(_dryad_S4#23, dll_reach(old_next)), old(_dryad_S5#24, dll_reach(old_next)))); 
    assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#23, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(_dryad_S4#23, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S5#24, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#23, dll_reach(curr)))), ==(old(_dryad_S4#23, dll(curr)), old(_dryad_S5#24, dll(curr)))); 
    assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#23, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(_dryad_S4#23, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S5#24, $phys_ptr_cast(P#curr, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(next, old(_dryad_S4#23, dll_reach(curr)))), ==(old(_dryad_S4#23, dll_reach(curr)), old(_dryad_S5#24, dll_reach(curr)))); 
    assume !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach(_dryad_S4#23, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(_dryad_S4#23, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S5#24, $phys_ptr_cast(P#curr, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S4#23, *((curr0->file))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S4#23, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_offset)), old(_dryad_S4#23, *((curr0->file_offset))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S4#23, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->file_size)), old(_dryad_S4#23, *((curr0->file_size))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S4#23, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->start_address)), old(_dryad_S4#23, *((curr0->start_address))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S4#23, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), ==(*((curr0->size)), old(_dryad_S4#23, *((curr0->size))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S4#23, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S4#23, *((curr0->prev))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S4#23, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S4#23, *((curr0->next))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S4#23, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S4#23, *((old_next->file))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S4#23, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
    // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_offset)), old(_dryad_S4#23, *((old_next->file_offset))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S4#23, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->file_size)), old(_dryad_S4#23, *((old_next->file_size))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S4#23, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->start_address)), old(_dryad_S4#23, *((old_next->start_address))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S4#23, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), ==(*((old_next->size)), old(_dryad_S4#23, *((old_next->size))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S4#23, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S4#23, *((old_next->prev))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S4#23, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(next, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S4#23, *((old_next->next))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S4#23, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->file)), old(_dryad_S4#23, *((curr->file))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S4#23, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_offset)), old(_dryad_S4#23, *((curr->file_offset))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S4#23, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->file_size)), old(_dryad_S4#23, *((curr->file_size))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S4#23, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->start_address)), old(_dryad_S4#23, *((curr->start_address))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S4#23, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), ==(*((curr->size)), old(_dryad_S4#23, *((curr->size))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S4#23, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->prev)), old(_dryad_S4#23, *((curr->prev))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S4#23, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(next, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S4#23, *((curr->next))))); 
    assume !($phys_ptr_cast(L#next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S4#23, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
    // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
    assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
    // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
    assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
    assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
    // assume ==>(@_vcc_ptr_neq_null(next), ==(dll(next), &&(&&(dll(*((next->next))), ==>(@_vcc_ptr_neq_null(*((next->next))), @_vcc_ptr_eq_pure(*((*((next->next))->prev)), next))), unchecked!(@_vcc_oset_in(next, dll_reach(*((next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(next), ==(dll_reach(next), @_vcc_oset_union(dll_reach(*((next->next))), @_vcc_oset_singleton(next)))); 
    assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#next, ^mem_reg)));
    // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
    assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
    assume true;
    // if (@_vcc_ptr_neq_null(old_next)) ...
    if ($non_null($phys_ptr_cast(L#old_next, ^mem_reg)))
    {
      anon11:
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll(next), &&(&&(dll(*((next->next))), ==>(@_vcc_ptr_neq_null(*((next->next))), @_vcc_ptr_eq_pure(*((*((next->next))->prev)), next))), unchecked!(@_vcc_oset_in(next, dll_reach(*((next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll_reach(next), @_vcc_oset_union(dll_reach(*((next->next))), @_vcc_oset_singleton(next)))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(old_next), &&(@_vcc_mutable(@state, old_next), @writes_check(old_next))); 
        assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> $mutable($s, $phys_ptr_cast(L#old_next, ^mem_reg)) && $top_writable($s, #wrTime$3^5.3, $phys_ptr_cast(L#old_next, ^mem_reg));
        // _math \state _dryad_S6#25; 
        // _dryad_S6#25 := @_vcc_current_state(@state); 
        _dryad_S6#25 := $current_state($s);
        // _math \state stmtexpr0#40; 
        // stmtexpr0#40 := _dryad_S6#25; 
        stmtexpr0#40 := _dryad_S6#25;
        // assert @prim_writes_check((old_next->prev)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#old_next, ^mem_reg), mem_reg.prev));
        // *(old_next->prev) := next; 
        call $write_int(mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), $ptr_to_int($phys_ptr_cast(L#next, ^mem_reg)));
        assume $full_stop_ext(#tok$3^59.5, $s);
        // _math \state _dryad_S7#26; 
        // _dryad_S7#26 := @_vcc_current_state(@state); 
        _dryad_S7#26 := $current_state($s);
        // _math \state stmtexpr1#41; 
        // stmtexpr1#41 := _dryad_S7#26; 
        stmtexpr1#41 := _dryad_S7#26;
        // assume ==>(unchecked!(@_vcc_oset_in(old_next, old(_dryad_S6#25, dll_reach(*((old_next->next)))))), ==(old(_dryad_S6#25, dll(*((old_next->next)))), old(_dryad_S7#26, dll(*((old_next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach(_dryad_S6#25, $rd_phys_ptr(_dryad_S6#25, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S6#25, $rd_phys_ptr(_dryad_S6#25, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S7#26, $rd_phys_ptr(_dryad_S7#26, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(old_next, old(_dryad_S6#25, dll_reach(*((old_next->next)))))), ==(old(_dryad_S6#25, dll_reach(*((old_next->next)))), old(_dryad_S7#26, dll_reach(*((old_next->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach(_dryad_S6#25, $rd_phys_ptr(_dryad_S6#25, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S6#25, $rd_phys_ptr(_dryad_S6#25, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S7#26, $rd_phys_ptr(_dryad_S7#26, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg));
        // assume ==(old(_dryad_S6#25, dll(old_next)), old(_dryad_S7#26, dll(old_next))); 
        assume F#dll(_dryad_S6#25, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S7#26, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==(old(_dryad_S6#25, dll_reach(old_next)), old(_dryad_S7#26, dll_reach(old_next))); 
        assume F#dll_reach(_dryad_S6#25, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S7#26, $phys_ptr_cast(L#old_next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(old_next, old(_dryad_S6#25, dll_reach(curr0)))), ==(old(_dryad_S6#25, dll(curr0)), old(_dryad_S7#26, dll(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach(_dryad_S6#25, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(_dryad_S6#25, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S7#26, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(old_next, old(_dryad_S6#25, dll_reach(curr0)))), ==(old(_dryad_S6#25, dll_reach(curr0)), old(_dryad_S7#26, dll_reach(curr0)))); 
        assume !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach(_dryad_S6#25, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(_dryad_S6#25, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S7#26, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(old_next, old(_dryad_S6#25, dll_reach(next)))), ==(old(_dryad_S6#25, dll(next)), old(_dryad_S7#26, dll(next)))); 
        assume !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach(_dryad_S6#25, $phys_ptr_cast(L#next, ^mem_reg))) ==> F#dll(_dryad_S6#25, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(_dryad_S7#26, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(old_next, old(_dryad_S6#25, dll_reach(next)))), ==(old(_dryad_S6#25, dll_reach(next)), old(_dryad_S7#26, dll_reach(next)))); 
        assume !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach(_dryad_S6#25, $phys_ptr_cast(L#next, ^mem_reg))) ==> F#dll_reach(_dryad_S6#25, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(_dryad_S7#26, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(old_next, old(_dryad_S6#25, dll_reach(curr)))), ==(old(_dryad_S6#25, dll(curr)), old(_dryad_S7#26, dll(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach(_dryad_S6#25, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll(_dryad_S6#25, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll(_dryad_S7#26, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(unchecked!(@_vcc_oset_in(old_next, old(_dryad_S6#25, dll_reach(curr)))), ==(old(_dryad_S6#25, dll_reach(curr)), old(_dryad_S7#26, dll_reach(curr)))); 
        assume !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach(_dryad_S6#25, $phys_ptr_cast(P#curr, ^mem_reg))) ==> F#dll_reach(_dryad_S6#25, $phys_ptr_cast(P#curr, ^mem_reg)) == F#dll_reach(_dryad_S7#26, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S6#25, *((curr0->file))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S6#25, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, curr0)), ==(*((curr0->file_offset)), old(_dryad_S6#25, *((curr0->file_offset))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S6#25, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, curr0)), ==(*((curr0->file_size)), old(_dryad_S6#25, *((curr0->file_size))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S6#25, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, curr0)), ==(*((curr0->start_address)), old(_dryad_S6#25, *((curr0->start_address))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S6#25, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, curr0)), ==(*((curr0->size)), old(_dryad_S6#25, *((curr0->size))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S6#25, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S6#25, *((curr0->prev))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#25, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S6#25, *((curr0->next))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#25, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, next)), @_vcc_ptr_eq_pure(*((next->file)), old(_dryad_S6#25, *((next->file))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#next, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S6#25, mem_reg.file, $phys_ptr_cast(L#next, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, next)), ==(*((next->file_offset)), old(_dryad_S6#25, *((next->file_offset))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#next, ^mem_reg)) == $rd_inv(_dryad_S6#25, mem_reg.file_offset, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, next)), ==(*((next->file_size)), old(_dryad_S6#25, *((next->file_size))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#next, ^mem_reg)) == $rd_inv(_dryad_S6#25, mem_reg.file_size, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, next)), ==(*((next->start_address)), old(_dryad_S6#25, *((next->start_address))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#next, ^mem_reg)) == $rd_inv(_dryad_S6#25, mem_reg.start_address, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, next)), ==(*((next->size)), old(_dryad_S6#25, *((next->size))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#next, ^mem_reg)) == $rd_inv(_dryad_S6#25, mem_reg.size, $phys_ptr_cast(L#next, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, next)), @_vcc_ptr_eq_pure(*((next->prev)), old(_dryad_S6#25, *((next->prev))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#25, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, next)), @_vcc_ptr_eq_pure(*((next->next)), old(_dryad_S6#25, *((next->next))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#25, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, curr)), @_vcc_ptr_eq_pure(*((curr->file)), old(_dryad_S6#25, *((curr->file))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S6#25, mem_reg.file, $phys_ptr_cast(P#curr, ^mem_reg), ^backing_file);
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, curr)), ==(*((curr->file_offset)), old(_dryad_S6#25, *((curr->file_offset))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S6#25, mem_reg.file_offset, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, curr)), ==(*((curr->file_size)), old(_dryad_S6#25, *((curr->file_size))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S6#25, mem_reg.file_size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, curr)), ==(*((curr->start_address)), old(_dryad_S6#25, *((curr->start_address))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S6#25, mem_reg.start_address, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, curr)), ==(*((curr->size)), old(_dryad_S6#25, *((curr->size))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg)) == $rd_inv(_dryad_S6#25, mem_reg.size, $phys_ptr_cast(P#curr, ^mem_reg));
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, curr)), @_vcc_ptr_eq_pure(*((curr->prev)), old(_dryad_S6#25, *((curr->prev))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#25, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(!(@_vcc_ptr_eq_pure(old_next, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S6#25, *((curr->next))))); 
        assume !($phys_ptr_cast(L#old_next, ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#25, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg);
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
        assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll(next), &&(&&(dll(*((next->next))), ==>(@_vcc_ptr_neq_null(*((next->next))), @_vcc_ptr_eq_pure(*((*((next->next))->prev)), next))), unchecked!(@_vcc_oset_in(next, dll_reach(*((next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll_reach(next), @_vcc_oset_union(dll_reach(*((next->next))), @_vcc_oset_singleton(next)))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#next, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
        assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll(next), &&(&&(dll(*((next->next))), ==>(@_vcc_ptr_neq_null(*((next->next))), @_vcc_ptr_eq_pure(*((*((next->next))->prev)), next))), unchecked!(@_vcc_oset_in(next, dll_reach(*((next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))));
        // assume ==>(@_vcc_ptr_neq_null(next), ==(dll_reach(next), @_vcc_oset_union(dll_reach(*((next->next))), @_vcc_oset_singleton(next)))); 
        assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#next, ^mem_reg)));
    }
    else
    {
      anon12:
        // assert @_vcc_possibly_unreachable; 
        assert {:PossiblyUnreachable true} true;
    }

  anon16:
    // _math \state _dryad_S6#27; 
    // _dryad_S6#27 := @_vcc_current_state(@state); 
    _dryad_S6#27 := $current_state($s);
    // _math \state stmtexpr9#51; 
    // stmtexpr9#51 := _dryad_S6#27; 
    stmtexpr9#51 := _dryad_S6#27;
    // assert @prim_writes_check((curr->next)); 
    assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(P#curr, ^mem_reg), mem_reg.next));
    // *(curr->next) := next; 
    call $write_int(mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), $ptr_to_int($phys_ptr_cast(L#next, ^mem_reg)));
    assume $full_stop_ext(#tok$3^61.3, $s);
    // _math \state _dryad_S7#28; 
    // _dryad_S7#28 := @_vcc_current_state(@state); 
    _dryad_S7#28 := $current_state($s);
    // _math \state stmtexpr10#52; 
    // stmtexpr10#52 := _dryad_S7#28; 
    stmtexpr10#52 := _dryad_S7#28;
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S6#27, dll_reach(*((curr->prev)))))), ==(old(_dryad_S6#27, dll(*((curr->prev)))), old(_dryad_S7#28, dll(*((curr->prev)))))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S6#27, $rd_phys_ptr(_dryad_S6#27, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))) ==> F#dll(_dryad_S6#27, $rd_phys_ptr(_dryad_S6#27, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) == F#dll(_dryad_S7#28, $rd_phys_ptr(_dryad_S7#28, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S6#27, dll_reach(*((curr->prev)))))), ==(old(_dryad_S6#27, dll_reach(*((curr->prev)))), old(_dryad_S7#28, dll_reach(*((curr->prev)))))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S6#27, $rd_phys_ptr(_dryad_S6#27, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))) ==> F#dll_reach(_dryad_S6#27, $rd_phys_ptr(_dryad_S6#27, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) == F#dll_reach(_dryad_S7#28, $rd_phys_ptr(_dryad_S7#28, mem_reg.prev, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S6#27, dll_reach(curr0)))), ==(old(_dryad_S6#27, dll(curr0)), old(_dryad_S7#28, dll(curr0)))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S6#27, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll(_dryad_S6#27, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll(_dryad_S7#28, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S6#27, dll_reach(curr0)))), ==(old(_dryad_S6#27, dll_reach(curr0)), old(_dryad_S7#28, dll_reach(curr0)))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S6#27, $phys_ptr_cast(SL#curr0, ^mem_reg))) ==> F#dll_reach(_dryad_S6#27, $phys_ptr_cast(SL#curr0, ^mem_reg)) == F#dll_reach(_dryad_S7#28, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S6#27, dll_reach(old_next)))), ==(old(_dryad_S6#27, dll(old_next)), old(_dryad_S7#28, dll(old_next)))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S6#27, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll(_dryad_S6#27, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll(_dryad_S7#28, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S6#27, dll_reach(old_next)))), ==(old(_dryad_S6#27, dll_reach(old_next)), old(_dryad_S7#28, dll_reach(old_next)))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S6#27, $phys_ptr_cast(L#old_next, ^mem_reg))) ==> F#dll_reach(_dryad_S6#27, $phys_ptr_cast(L#old_next, ^mem_reg)) == F#dll_reach(_dryad_S7#28, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S6#27, dll_reach(next)))), ==(old(_dryad_S6#27, dll(next)), old(_dryad_S7#28, dll(next)))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S6#27, $phys_ptr_cast(L#next, ^mem_reg))) ==> F#dll(_dryad_S6#27, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll(_dryad_S7#28, $phys_ptr_cast(L#next, ^mem_reg));
    // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S6#27, dll_reach(next)))), ==(old(_dryad_S6#27, dll_reach(next)), old(_dryad_S7#28, dll_reach(next)))); 
    assume !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach(_dryad_S6#27, $phys_ptr_cast(L#next, ^mem_reg))) ==> F#dll_reach(_dryad_S6#27, $phys_ptr_cast(L#next, ^mem_reg)) == F#dll_reach(_dryad_S7#28, $phys_ptr_cast(L#next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), @_vcc_ptr_eq_pure(*((curr0->file)), old(_dryad_S6#27, *((curr0->file))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S6#27, mem_reg.file, $phys_ptr_cast(SL#curr0, ^mem_reg), ^backing_file);
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), ==(*((curr0->file_offset)), old(_dryad_S6#27, *((curr0->file_offset))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S6#27, mem_reg.file_offset, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), ==(*((curr0->file_size)), old(_dryad_S6#27, *((curr0->file_size))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S6#27, mem_reg.file_size, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), ==(*((curr0->start_address)), old(_dryad_S6#27, *((curr0->start_address))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S6#27, mem_reg.start_address, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), ==(*((curr0->size)), old(_dryad_S6#27, *((curr0->size))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $rd_inv(_dryad_S6#27, mem_reg.size, $phys_ptr_cast(SL#curr0, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), @_vcc_ptr_eq_pure(*((curr0->prev)), old(_dryad_S6#27, *((curr0->prev))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#27, mem_reg.prev, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr0)), @_vcc_ptr_eq_pure(*((curr0->next)), old(_dryad_S6#27, *((curr0->next))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#27, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), @_vcc_ptr_eq_pure(*((old_next->file)), old(_dryad_S6#27, *((old_next->file))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S6#27, mem_reg.file, $phys_ptr_cast(L#old_next, ^mem_reg), ^backing_file);
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), ==(*((old_next->file_offset)), old(_dryad_S6#27, *((old_next->file_offset))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S6#27, mem_reg.file_offset, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), ==(*((old_next->file_size)), old(_dryad_S6#27, *((old_next->file_size))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S6#27, mem_reg.file_size, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), ==(*((old_next->start_address)), old(_dryad_S6#27, *((old_next->start_address))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S6#27, mem_reg.start_address, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), ==(*((old_next->size)), old(_dryad_S6#27, *((old_next->size))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg)) == $rd_inv(_dryad_S6#27, mem_reg.size, $phys_ptr_cast(L#old_next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), @_vcc_ptr_eq_pure(*((old_next->prev)), old(_dryad_S6#27, *((old_next->prev))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#27, mem_reg.prev, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, old_next)), @_vcc_ptr_eq_pure(*((old_next->next)), old(_dryad_S6#27, *((old_next->next))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#27, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), @_vcc_ptr_eq_pure(*((next->file)), old(_dryad_S6#27, *((next->file))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.file, $phys_ptr_cast(L#next, ^mem_reg), ^backing_file) == $rd_phys_ptr(_dryad_S6#27, mem_reg.file, $phys_ptr_cast(L#next, ^mem_reg), ^backing_file);
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), ==(*((next->file_offset)), old(_dryad_S6#27, *((next->file_offset))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_offset, $phys_ptr_cast(L#next, ^mem_reg)) == $rd_inv(_dryad_S6#27, mem_reg.file_offset, $phys_ptr_cast(L#next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), ==(*((next->file_size)), old(_dryad_S6#27, *((next->file_size))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_inv($s, mem_reg.file_size, $phys_ptr_cast(L#next, ^mem_reg)) == $rd_inv(_dryad_S6#27, mem_reg.file_size, $phys_ptr_cast(L#next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), ==(*((next->start_address)), old(_dryad_S6#27, *((next->start_address))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_inv($s, mem_reg.start_address, $phys_ptr_cast(L#next, ^mem_reg)) == $rd_inv(_dryad_S6#27, mem_reg.start_address, $phys_ptr_cast(L#next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), ==(*((next->size)), old(_dryad_S6#27, *((next->size))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_inv($s, mem_reg.size, $phys_ptr_cast(L#next, ^mem_reg)) == $rd_inv(_dryad_S6#27, mem_reg.size, $phys_ptr_cast(L#next, ^mem_reg));
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), @_vcc_ptr_eq_pure(*((next->prev)), old(_dryad_S6#27, *((next->prev))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#27, mem_reg.prev, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg);
    // assume ==>(!(@_vcc_ptr_eq_pure(curr, next)), @_vcc_ptr_eq_pure(*((next->next)), old(_dryad_S6#27, *((next->next))))); 
    assume !($phys_ptr_cast(P#curr, ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg) == $rd_phys_ptr(_dryad_S6#27, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg);
    // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll(curr0), &&(&&(dll(*((curr0->next))), ==>(@_vcc_ptr_neq_null(*((curr0->next))), @_vcc_ptr_eq_pure(*((*((curr0->next))->prev)), curr0))), unchecked!(@_vcc_oset_in(curr0, dll_reach(*((curr0->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(SL#curr0, ^mem_reg)) && !$oset_in($phys_ptr_cast(SL#curr0, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(curr0), ==(dll_reach(curr0), @_vcc_oset_union(dll_reach(*((curr0->next))), @_vcc_oset_singleton(curr0)))); 
    assume $non_null($phys_ptr_cast(SL#curr0, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(SL#curr0, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(SL#curr0, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(SL#curr0, ^mem_reg)));
    // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll(old_next), &&(&&(dll(*((old_next->next))), ==>(@_vcc_ptr_neq_null(*((old_next->next))), @_vcc_ptr_eq_pure(*((*((old_next->next))->prev)), old_next))), unchecked!(@_vcc_oset_in(old_next, dll_reach(*((old_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#old_next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#old_next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(old_next), ==(dll_reach(old_next), @_vcc_oset_union(dll_reach(*((old_next->next))), @_vcc_oset_singleton(old_next)))); 
    assume $non_null($phys_ptr_cast(L#old_next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#old_next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#old_next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#old_next, ^mem_reg)));
    // assume ==>(@_vcc_ptr_neq_null(next), ==(dll(next), &&(&&(dll(*((next->next))), ==>(@_vcc_ptr_neq_null(*((next->next))), @_vcc_ptr_eq_pure(*((*((next->next))->prev)), next))), unchecked!(@_vcc_oset_in(next, dll_reach(*((next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(next), ==(dll_reach(next), @_vcc_oset_union(dll_reach(*((next->next))), @_vcc_oset_singleton(next)))); 
    assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#next, ^mem_reg)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll(curr), &&(&&(dll(*((curr->next))), ==>(@_vcc_ptr_neq_null(*((curr->next))), @_vcc_ptr_eq_pure(*((*((curr->next))->prev)), curr))), unchecked!(@_vcc_oset_in(curr, dll_reach(*((curr->next)))))))); 
    assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(P#curr, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(P#curr, ^mem_reg)) && !$oset_in($phys_ptr_cast(P#curr, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(dll_reach(curr), @_vcc_oset_union(dll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(P#curr, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(P#curr, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(P#curr, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(P#curr, ^mem_reg)));
    // assume ==>(@_vcc_ptr_neq_null(next), ==(dll(next), &&(&&(dll(*((next->next))), ==>(@_vcc_ptr_neq_null(*((next->next))), @_vcc_ptr_eq_pure(*((*((next->next))->prev)), next))), unchecked!(@_vcc_oset_in(next, dll_reach(*((next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll($s, $phys_ptr_cast(L#next, ^mem_reg)) == (F#dll($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) && ($non_null($rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)) ==> $rd_phys_ptr($s, mem_reg.prev, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg), ^mem_reg) == $phys_ptr_cast(L#next, ^mem_reg)) && !$oset_in($phys_ptr_cast(L#next, ^mem_reg), F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg))));
    // assume ==>(@_vcc_ptr_neq_null(next), ==(dll_reach(next), @_vcc_oset_union(dll_reach(*((next->next))), @_vcc_oset_singleton(next)))); 
    assume $non_null($phys_ptr_cast(L#next, ^mem_reg)) ==> F#dll_reach($s, $phys_ptr_cast(L#next, ^mem_reg)) == $oset_union(F#dll_reach($s, $rd_phys_ptr($s, mem_reg.next, $phys_ptr_cast(L#next, ^mem_reg), ^mem_reg)), $oset_singleton($phys_ptr_cast(L#next, ^mem_reg)));
    // return next; 
    $result := $phys_ptr_cast(L#next, ^mem_reg);
    assume true;
    assert $position_marker();
    goto #exit;

  anon17:
    // skip

  #exit:
}



const unique l#public: $label;

const unique #tok$3^61.3: $token;

const unique #tok$3^59.5: $token;

const unique #tok$3^55.3: $token;

const unique #tok$3^54.3: $token;

const unique #tok$3^53.3: $token;

const unique #tok$3^50.5: $token;

const unique #tok$3^49.5: $token;

const unique #tok$3^48.5: $token;

const unique #tok$3^47.5: $token;

const unique #tok$3^45.5: $token;

const unique #tok$3^42.5: $token;

const unique #tok$3^41.5: $token;

const unique #tok$3^40.5: $token;

const unique #tok$3^37.12: $token;

const unique #tok$3^35.5: $token;

const unique #tok$3^34.5: $token;

const unique #tok$3^33.5: $token;

const unique #tok$3^31.5: $token;

const unique #tok$3^28.5: $token;

const unique #tok$3^27.5: $token;

const unique #tok$3^26.5: $token;

const unique #tok$3^24.12: $token;

const unique #tok$4^0.0: $token;

const unique #file^?3Cno?20file?3E: $token;

axiom $file_name_is(4, #file^?3Cno?20file?3E);

const unique #tok$3^5.3: $token;

const unique #file^Z?3A?5CInvariantSynthesis?5Csubmit?5Cos?5Cexpressos?5Csplit_memory_region.c: $token;

axiom $file_name_is(3, #file^Z?3A?5CInvariantSynthesis?5Csubmit?5Cos?5Cexpressos?5Csplit_memory_region.c);

const unique #file^Z?3A?5CInvariantSynthesis?5CDownloads?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h: $token;

axiom $file_name_is(2, #file^Z?3A?5CInvariantSynthesis?5CDownloads?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h);

const unique #tok$1^15.1: $token;

const unique #file^z?3A?5Cinvariantsynthesis?5Csubmit?5Cos?5Cexpressos?5Cdryad_dll_mem_reg_defs.h: $token;

axiom $file_name_is(1, #file^z?3A?5Cinvariantsynthesis?5Csubmit?5Cos?5Cexpressos?5Cdryad_dll_mem_reg_defs.h);

const unique #distTp2: $ctype;

axiom #distTp2 == $ptr_to(^mem_reg);

const unique #distTp1: $ctype;

axiom #distTp1 == $ptr_to(^backing_file);
