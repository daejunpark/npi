
const {:existential true} b0000 : bool;
const {:existential true} b0001 : bool;
const {:existential true} b0002 : bool;
const {:existential true} b0003 : bool;
const {:existential true} b0004 : bool;
const {:existential true} b0005 : bool;
const {:existential true} b0006 : bool;
const {:existential true} b0007 : bool;
const {:existential true} b0008 : bool;
const {:existential true} b0009 : bool;
const {:existential true} b0010 : bool;
const {:existential true} b0011 : bool;
const {:existential true} b0012 : bool;
const {:existential true} b0013 : bool;
const {:existential true} b0014 : bool;
const {:existential true} b0015 : bool;
const {:existential true} b0016 : bool;
const {:existential true} b0017 : bool;
const {:existential true} b0018 : bool;
const {:existential true} b0019 : bool;
const {:existential true} b0020 : bool;
const {:existential true} b0021 : bool;
const {:existential true} b0022 : bool;
const {:existential true} b0023 : bool;
const {:existential true} b0024 : bool;
const {:existential true} b0025 : bool;
const {:existential true} b0026 : bool;
const {:existential true} b0027 : bool;
const {:existential true} b0028 : bool;
const {:existential true} b0029 : bool;
const {:existential true} b0030 : bool;
const {:existential true} b0031 : bool;
const {:existential true} b0032 : bool;
const {:existential true} b0033 : bool;
const {:existential true} b0034 : bool;
const {:existential true} b0035 : bool;
const {:existential true} b0036 : bool;
const {:existential true} b0037 : bool;
const {:existential true} b0038 : bool;
const {:existential true} b0039 : bool;
const {:existential true} b0040 : bool;
const {:existential true} b0041 : bool;
const {:existential true} b0042 : bool;
const {:existential true} b0043 : bool;
const {:existential true} b0044 : bool;
const {:existential true} b0045 : bool;
const {:existential true} b0046 : bool;
const {:existential true} b0047 : bool;
const {:existential true} b0048 : bool;
const {:existential true} b0049 : bool;
const {:existential true} b0050 : bool;
const {:existential true} b0051 : bool;
const {:existential true} b0052 : bool;
const {:existential true} b0053 : bool;
const {:existential true} b0054 : bool;
const {:existential true} b0055 : bool;
const {:existential true} b0056 : bool;
const {:existential true} b0057 : bool;
const {:existential true} b0058 : bool;
const {:existential true} b0059 : bool;
const {:existential true} b0060 : bool;
const {:existential true} b0061 : bool;
const {:existential true} b0062 : bool;
const {:existential true} b0063 : bool;
const {:existential true} b0064 : bool;
const {:existential true} b0065 : bool;
const {:existential true} b0066 : bool;
const {:existential true} b0067 : bool;
const {:existential true} b0068 : bool;
const {:existential true} b0069 : bool;
const {:existential true} b0070 : bool;
const {:existential true} b0071 : bool;

axiom $arch_ptr_size == 8;

axiom $arch_spec_ptr_start == $max.u8;

const unique ^$##thread_id: $ctype;

axiom $def_math_type(^$##thread_id);

type $##thread_id;

const unique ^$##club: $ctype;

axiom $def_math_type(^$##club);

type $##club;

const unique ^a_node: $ctype;

axiom $is_span_sequential(^a_node);

axiom $def_struct_type(^a_node, 24, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^a_node) } $inv2(#s1, #s2, #p, ^a_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^a_node) } $inv2_without_lemmas(#s1, #s2, #p, ^a_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^a_node)) } $in(q, $composite_extent(s, p, ^a_node)) == (q == p));

const unique a_node.left: $field;

axiom $def_phys_field(^a_node, a_node.left, $ptr_to(^a_node), false, 0);

const unique a_node.right: $field;

axiom $def_phys_field(^a_node, a_node.right, $ptr_to(^a_node), false, 8);

const unique a_node.key: $field;

axiom $def_phys_field(^a_node, a_node.key, ^^i4, false, 16);

const unique a_node.height: $field;

axiom $def_phys_field(^a_node, a_node.height, ^^i4, false, 20);

function F#glob_reach() : $oset;

const unique cf#glob_reach: $pure_function;

axiom $function_arg_type(cf#glob_reach, 0, ^$#oset);

procedure glob_reach() returns ($result: $oset);
  free ensures $result == F#glob_reach();
  free ensures $call_transition(old($s), $s);



const unique ^$#_purecall_handler#1: $ctype;

axiom $def_fnptr_type(^$#_purecall_handler#1);

type $#_purecall_handler#1;

const unique ^$#_invalid_parameter_handler#2: $ctype;

axiom $def_fnptr_type(^$#_invalid_parameter_handler#2);

type $#_invalid_parameter_handler#2;

const unique ^$#avl_insert_rec.c..36261#3: $ctype;

axiom $def_fnptr_type(^$#avl_insert_rec.c..36261#3);

type $#avl_insert_rec.c..36261#3;

const unique ^$#_PtFuncCompare#4: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#4);

type $#_PtFuncCompare#4;

const unique ^$#_PtFuncCompare#5: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#5);

type $#_PtFuncCompare#5;

const unique ^$#_PtFuncCompare#6: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#6);

type $#_PtFuncCompare#6;

const unique ^$#_PtFuncCompare#7: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#7);

type $#_PtFuncCompare#7;

const unique ^$#_onexit_t#8: $ctype;

axiom $def_fnptr_type(^$#_onexit_t#8);

type $#_onexit_t#8;

function F##int_max(SP#x: int, SP#y: int) : int;

const unique cf##int_max: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_max(SP#x, SP#y) } $in_range_i4(F##int_max(SP#x, SP#y)));

axiom $function_arg_type(cf##int_max, 0, ^^i4);

axiom $function_arg_type(cf##int_max, 1, ^^i4);

axiom $function_arg_type(cf##int_max, 2, ^^i4);

procedure #int_max(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_max(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F##int_min(SP#x: int, SP#y: int) : int;

const unique cf##int_min: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_min(SP#x, SP#y) } $in_range_i4(F##int_min(SP#x, SP#y)));

axiom $function_arg_type(cf##int_min, 0, ^^i4);

axiom $function_arg_type(cf##int_min, 1, ^^i4);

axiom $function_arg_type(cf##int_min, 2, ^^i4);

procedure #int_min(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_min(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F#avl(#s: $state, SP#root: $ptr) : bool;

const unique cf#avl: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#avl(#s, SP#root) } 1 < $decreases_level ==> $is_null($phys_ptr_cast(SP#root, ^a_node)) ==> F#avl(#s, SP#root));

axiom $function_arg_type(cf#avl, 0, ^^bool);

axiom $function_arg_type(cf#avl, 1, $ptr_to(^a_node));

procedure avl(SP#root: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#root, ^a_node)) ==> $result;
  free ensures $result == F#avl($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#avl_reach(#s: $state, SP#root: $ptr) : $oset;

const unique cf#avl_reach: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#avl_reach(#s, SP#root) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#root, ^a_node)) ==> $oset_in($phys_ptr_cast(SP#root, ^a_node), F#avl_reach(#s, SP#root))) && ($is_null($phys_ptr_cast(SP#root, ^a_node)) ==> F#avl_reach(#s, SP#root) == $oset_empty()));

axiom $function_arg_type(cf#avl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#avl_reach, 1, $ptr_to(^a_node));

procedure avl_reach(SP#root: $ptr) returns ($result: $oset);
  ensures $non_null($phys_ptr_cast(SP#root, ^a_node)) ==> $oset_in($phys_ptr_cast(SP#root, ^a_node), $result);
  ensures $is_null($phys_ptr_cast(SP#root, ^a_node)) ==> $result == $oset_empty();
  free ensures $result == F#avl_reach($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#avl_keys(#s: $state, SP#root: $ptr) : $intset;

const unique cf#avl_keys: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#avl_keys(#s, SP#root) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#root, ^a_node)) ==> $intset_in($rd_inv(#s, a_node.key, $phys_ptr_cast(SP#root, ^a_node)), F#avl_keys(#s, SP#root))) && ($is_null($phys_ptr_cast(SP#root, ^a_node)) ==> F#avl_keys(#s, SP#root) == $intset_empty()));

axiom $function_arg_type(cf#avl_keys, 0, ^$#intset);

axiom $function_arg_type(cf#avl_keys, 1, $ptr_to(^a_node));

procedure avl_keys(SP#root: $ptr) returns ($result: $intset);
  ensures $non_null($phys_ptr_cast(SP#root, ^a_node)) ==> $intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SP#root, ^a_node)), $result);
  ensures $is_null($phys_ptr_cast(SP#root, ^a_node)) ==> $result == $intset_empty();
  free ensures $result == F#avl_keys($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#avl_height(#s: $state, SP#root: $ptr) : int;

const unique cf#avl_height: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#avl_height(#s, SP#root) } 1 < $decreases_level ==> -1 == $unchk_sub(^^i4, 0, 1) ==> ($is_null($phys_ptr_cast(SP#root, ^a_node)) ==> F#avl_height(#s, SP#root) == -1) && ($non_null($phys_ptr_cast(SP#root, ^a_node)) ==> F#avl_height(#s, SP#root) >= 0) && -1 == $unchk_sub(^^i4, 0, 1));

axiom $function_arg_type(cf#avl_height, 0, ^^mathint);

axiom $function_arg_type(cf#avl_height, 1, $ptr_to(^a_node));

procedure avl_height(SP#root: $ptr) returns ($result: int);
  free requires -1 == $unchk_sub(^^i4, 0, 1);
  ensures $is_null($phys_ptr_cast(SP#root, ^a_node)) ==> $result == -1;
  ensures $non_null($phys_ptr_cast(SP#root, ^a_node)) ==> $result >= 0;
  free ensures -1 == $unchk_sub(^^i4, 0, 1);
  free ensures $result == F#avl_height($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#avl_min_key(#s: $state, SP#root: $ptr) : int;

const unique cf#avl_min_key: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#avl_min_key(#s, SP#root) } 1 < $decreases_level ==> $in_range_i4(F#avl_min_key(#s, SP#root)) && ($non_null($phys_ptr_cast(SP#root, ^a_node)) && $is_null($rd_phys_ptr(#s, a_node.left, $phys_ptr_cast(SP#root, ^a_node), ^a_node)) && $is_null($rd_phys_ptr(#s, a_node.right, $phys_ptr_cast(SP#root, ^a_node), ^a_node)) ==> F#avl_min_key(#s, SP#root) == $rd_inv(#s, a_node.key, $phys_ptr_cast(SP#root, ^a_node))));

axiom $function_arg_type(cf#avl_min_key, 0, ^^i4);

axiom $function_arg_type(cf#avl_min_key, 1, $ptr_to(^a_node));

procedure avl_min_key(SP#root: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#root, ^a_node)) && $is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SP#root, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SP#root, ^a_node), ^a_node)) ==> $result == $rd_inv($s, a_node.key, $phys_ptr_cast(SP#root, ^a_node));
  free ensures $result == F#avl_min_key($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#avl_max_key(#s: $state, SP#root: $ptr) : int;

const unique cf#avl_max_key: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#avl_max_key(#s, SP#root) } 1 < $decreases_level ==> $in_range_i4(F#avl_max_key(#s, SP#root)) && ($non_null($phys_ptr_cast(SP#root, ^a_node)) && $is_null($rd_phys_ptr(#s, a_node.left, $phys_ptr_cast(SP#root, ^a_node), ^a_node)) && $is_null($rd_phys_ptr(#s, a_node.right, $phys_ptr_cast(SP#root, ^a_node), ^a_node)) ==> F#avl_max_key(#s, SP#root) == $rd_inv(#s, a_node.key, $phys_ptr_cast(SP#root, ^a_node))));

axiom $function_arg_type(cf#avl_max_key, 0, ^^i4);

axiom $function_arg_type(cf#avl_max_key, 1, $ptr_to(^a_node));

procedure avl_max_key(SP#root: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#root, ^a_node)) && $is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SP#root, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SP#root, ^a_node), ^a_node)) ==> $result == $rd_inv($s, a_node.key, $phys_ptr_cast(SP#root, ^a_node));
  free ensures $result == F#avl_max_key($s, SP#root);
  free ensures $call_transition(old($s), $s);



procedure avl_balance(P#x: $ptr) returns ($result: $ptr);
  requires $non_null($phys_ptr_cast(P#x, ^a_node));
  requires !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)));
  requires !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)));
  requires F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
  requires $non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node));
  requires !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)));
  requires !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)));
  requires F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
  requires $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
  requires $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)));
  requires F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) <= F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 2;
  requires F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) <= F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 2;
  modifies $s, $cev_pc;
  ensures F#avl_max_key($s, $phys_ptr_cast($result, ^a_node)) == F#avl_max_key(old($s), $phys_ptr_cast(P#x, ^a_node));
  ensures F#avl_min_key($s, $phys_ptr_cast($result, ^a_node)) == F#avl_min_key(old($s), $phys_ptr_cast(P#x, ^a_node));
  ensures F#avl($s, $phys_ptr_cast($result, ^a_node));
  ensures F#avl_keys($s, $phys_ptr_cast($result, ^a_node)) == $intset_union_one1($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
  ensures (F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 2 && F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node), ^a_node)) && F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 2 && F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node), ^a_node)) != F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node), ^a_node)) && F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) || ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 2 && F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node), ^a_node)) && F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 2 && F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node), ^a_node)) != F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node), ^a_node)) && F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



procedure avl_insert(P#x: $ptr, P#k: int) returns ($result: $ptr);
  requires F#avl($s, $phys_ptr_cast(P#x, ^a_node));
  requires !$intset_in(P#k, F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)));
  requires $is_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == -1;
  requires $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) >= 0;
  free requires -1 == $unchk_sub(^^i4, 0, 1);
  modifies $s, $cev_pc;
  ensures F#avl($s, $phys_ptr_cast($result, ^a_node));
  ensures F#avl_keys($s, $phys_ptr_cast($result, ^a_node)) == $intset_union_one1(P#k, F#avl_keys(old($s), $phys_ptr_cast(P#x, ^a_node)));
  ensures F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $phys_ptr_cast(P#x, ^a_node)) || F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $phys_ptr_cast(P#x, ^a_node)) + 1;
ensures b0000 ==> (F#avl($s,$phys_ptr_cast(P#x,^a_node)));
ensures b0001 ==> (F#avl($s,$phys_ptr_cast($result,^a_node)));
ensures b0002 ==> ((F#avl_reach($s,$phys_ptr_cast(P#x,^a_node)) == F#avl_reach($s,$phys_ptr_cast($result,^a_node))));
ensures b0003 ==> ((F#avl_reach($s,$phys_ptr_cast($result,^a_node)) == F#avl_reach($s,$phys_ptr_cast(P#x,^a_node))));
ensures b0004 ==> ((F#avl_reach($s,$phys_ptr_cast(P#x,^a_node)) == F#avl_reach(old($s),$phys_ptr_cast(P#x,^a_node))));
ensures b0005 ==> ((F#avl_reach($s,$phys_ptr_cast($result,^a_node)) == F#avl_reach(old($s),$phys_ptr_cast($result,^a_node))));
ensures b0006 ==> ($non_null($phys_ptr_cast(P#x,^a_node)));
ensures b0007 ==> ($non_null($phys_ptr_cast($result,^a_node)));
ensures b0008 ==> ($is_null($phys_ptr_cast(P#x,^a_node)));
ensures b0009 ==> ($is_null($phys_ptr_cast($result,^a_node)));
ensures b0010 ==> (($phys_ptr_cast(P#x,^a_node) == $phys_ptr_cast($result,^a_node)));
ensures b0011 ==> (($phys_ptr_cast($result,^a_node) == $phys_ptr_cast(P#x,^a_node)));
ensures b0012 ==> (($non_null($phys_ptr_cast(P#x,^a_node)) ==> $non_null($rd_phys_ptr($s,a_node.left,$phys_ptr_cast(P#x,^a_node),^a_node))));
ensures b0013 ==> (($non_null($phys_ptr_cast($result,^a_node)) ==> $non_null($rd_phys_ptr($s,a_node.left,$phys_ptr_cast($result,^a_node),^a_node))));
ensures b0014 ==> (($non_null($phys_ptr_cast(P#x,^a_node)) ==> $is_null($rd_phys_ptr($s,a_node.left,$phys_ptr_cast(P#x,^a_node),^a_node))));
ensures b0015 ==> (($non_null($phys_ptr_cast($result,^a_node)) ==> $is_null($rd_phys_ptr($s,a_node.left,$phys_ptr_cast($result,^a_node),^a_node))));
ensures b0016 ==> (($non_null($phys_ptr_cast(P#x,^a_node)) ==> ($rd_phys_ptr($s,a_node.left,$phys_ptr_cast(P#x,^a_node),^a_node) == $phys_ptr_cast($result,^a_node))));
ensures b0017 ==> (($non_null($phys_ptr_cast($result,^a_node)) ==> ($rd_phys_ptr($s,a_node.left,$phys_ptr_cast($result,^a_node),^a_node) == $phys_ptr_cast(P#x,^a_node))));
ensures b0018 ==> (($non_null($phys_ptr_cast(P#x,^a_node)) ==> $non_null($rd_phys_ptr($s,a_node.right,$phys_ptr_cast(P#x,^a_node),^a_node))));
ensures b0019 ==> (($non_null($phys_ptr_cast($result,^a_node)) ==> $non_null($rd_phys_ptr($s,a_node.right,$phys_ptr_cast($result,^a_node),^a_node))));
ensures b0020 ==> (($non_null($phys_ptr_cast(P#x,^a_node)) ==> $is_null($rd_phys_ptr($s,a_node.right,$phys_ptr_cast(P#x,^a_node),^a_node))));
ensures b0021 ==> (($non_null($phys_ptr_cast($result,^a_node)) ==> $is_null($rd_phys_ptr($s,a_node.right,$phys_ptr_cast($result,^a_node),^a_node))));
ensures b0022 ==> (($non_null($phys_ptr_cast(P#x,^a_node)) ==> ($rd_phys_ptr($s,a_node.right,$phys_ptr_cast(P#x,^a_node),^a_node) == $phys_ptr_cast($result,^a_node))));
ensures b0023 ==> (($non_null($phys_ptr_cast($result,^a_node)) ==> ($rd_phys_ptr($s,a_node.right,$phys_ptr_cast($result,^a_node),^a_node) == $phys_ptr_cast(P#x,^a_node))));
ensures b0024 ==> ((F#avl_keys($s,$phys_ptr_cast(P#x,^a_node)) == F#avl_keys($s,$phys_ptr_cast($result,^a_node))));
ensures b0025 ==> ((F#avl_keys($s,$phys_ptr_cast($result,^a_node)) == F#avl_keys($s,$phys_ptr_cast(P#x,^a_node))));
ensures b0026 ==> ((F#avl_keys($s,$phys_ptr_cast(P#x,^a_node)) == F#avl_keys(old($s),$phys_ptr_cast(P#x,^a_node))));
ensures b0027 ==> ((F#avl_keys($s,$phys_ptr_cast($result,^a_node)) == F#avl_keys(old($s),$phys_ptr_cast($result,^a_node))));
ensures b0028 ==> ((F#avl_keys($s,$phys_ptr_cast(P#x,^a_node)) == $intset_union(F#avl_keys(old($s),$phys_ptr_cast(P#x,^a_node)),$intset_singleton(P#k))));
ensures b0029 ==> ((F#avl_keys($s,$phys_ptr_cast($result,^a_node)) == $intset_union(F#avl_keys(old($s),$phys_ptr_cast($result,^a_node)),$intset_singleton(P#k))));
ensures b0030 ==> ((F#avl_keys($s,$phys_ptr_cast(P#x,^a_node)) == $intset_union(F#avl_keys(old($s),$phys_ptr_cast($result,^a_node)),$intset_singleton(P#k))));
ensures b0031 ==> ((F#avl_keys($s,$phys_ptr_cast($result,^a_node)) == $intset_union(F#avl_keys(old($s),$phys_ptr_cast(P#x,^a_node)),$intset_singleton(P#k))));
ensures b0032 ==> ((F#avl_keys(old($s),$phys_ptr_cast(P#x,^a_node)) == $intset_union(F#avl_keys($s,$phys_ptr_cast(P#x,^a_node)),$intset_singleton(P#k))));
ensures b0033 ==> ((F#avl_keys(old($s),$phys_ptr_cast($result,^a_node)) == $intset_union(F#avl_keys($s,$phys_ptr_cast($result,^a_node)),$intset_singleton(P#k))));
ensures b0034 ==> ((F#avl_keys(old($s),$phys_ptr_cast(P#x,^a_node)) == $intset_union(F#avl_keys($s,$phys_ptr_cast($result,^a_node)),$intset_singleton(P#k))));
ensures b0035 ==> ((F#avl_keys(old($s),$phys_ptr_cast($result,^a_node)) == $intset_union(F#avl_keys($s,$phys_ptr_cast(P#x,^a_node)),$intset_singleton(P#k))));
ensures b0036 ==> ((P#k < 2147483647));
ensures b0037 ==> ((P#k < 2147483647));
ensures b0038 ==> ((P#k < 4294967295));
ensures b0039 ==> ((P#k < 4294967295));
ensures b0040 ==> ((P#k >= 0));
ensures b0041 ==> ((P#k >= 0));
ensures b0042 ==> (($rd_inv($s,a_node.key,$phys_ptr_cast(P#x,^a_node)) < P#k));
ensures b0043 ==> (($rd_inv($s,a_node.key,$phys_ptr_cast($result,^a_node)) < P#k));
ensures b0044 ==> (($rd_inv($s,a_node.key,$phys_ptr_cast(P#x,^a_node)) <= $rd_inv($s,a_node.key,$phys_ptr_cast($result,^a_node))));
ensures b0045 ==> (($rd_inv($s,a_node.key,$phys_ptr_cast($result,^a_node)) <= $rd_inv($s,a_node.key,$phys_ptr_cast(P#x,^a_node))));
ensures b0046 ==> (($rd_inv($s,a_node.key,$phys_ptr_cast(P#x,^a_node)) == $rd_inv($s,a_node.key,$phys_ptr_cast($result,^a_node))));
ensures b0047 ==> (($rd_inv($s,a_node.key,$phys_ptr_cast($result,^a_node)) == $rd_inv($s,a_node.key,$phys_ptr_cast(P#x,^a_node))));
ensures b0048 ==> (($non_null($phys_ptr_cast(P#x,^a_node)) ==> (F#avl_min_key($s,$phys_ptr_cast($result,^a_node)) == $int_min(F#avl_min_key(old($s),$phys_ptr_cast(P#x,^a_node)),P#k))));
ensures b0049 ==> (($non_null($phys_ptr_cast($result,^a_node)) ==> (F#avl_min_key($s,$phys_ptr_cast(P#x,^a_node)) == $int_min(F#avl_min_key(old($s),$phys_ptr_cast($result,^a_node)),P#k))));
ensures b0050 ==> (($non_null($phys_ptr_cast(P#x,^a_node)) ==> (F#avl_max_key($s,$phys_ptr_cast($result,^a_node)) == $int_max(F#avl_max_key(old($s),$phys_ptr_cast(P#x,^a_node)),P#k))));
ensures b0051 ==> (($non_null($phys_ptr_cast($result,^a_node)) ==> (F#avl_max_key($s,$phys_ptr_cast(P#x,^a_node)) == $int_max(F#avl_max_key(old($s),$phys_ptr_cast($result,^a_node)),P#k))));
ensures b0052 ==> (($is_null($phys_ptr_cast(P#x,^a_node)) ==> (F#avl_min_key($s,$phys_ptr_cast($result,^a_node)) == P#k)));
ensures b0053 ==> (($is_null($phys_ptr_cast($result,^a_node)) ==> (F#avl_min_key($s,$phys_ptr_cast(P#x,^a_node)) == P#k)));
ensures b0054 ==> (($is_null($phys_ptr_cast(P#x,^a_node)) ==> (F#avl_max_key($s,$phys_ptr_cast($result,^a_node)) == P#k)));
ensures b0055 ==> (($is_null($phys_ptr_cast($result,^a_node)) ==> (F#avl_max_key($s,$phys_ptr_cast(P#x,^a_node)) == P#k)));
ensures b0056 ==> ((F#avl_min_key($s,$phys_ptr_cast(P#x,^a_node)) == F#avl_min_key(old($s),$phys_ptr_cast(P#x,^a_node))));
ensures b0057 ==> ((F#avl_min_key($s,$phys_ptr_cast($result,^a_node)) == F#avl_min_key(old($s),$phys_ptr_cast($result,^a_node))));
ensures b0058 ==> ((F#avl_max_key($s,$phys_ptr_cast(P#x,^a_node)) == F#avl_max_key(old($s),$phys_ptr_cast(P#x,^a_node))));
ensures b0059 ==> ((F#avl_max_key($s,$phys_ptr_cast($result,^a_node)) == F#avl_max_key(old($s),$phys_ptr_cast($result,^a_node))));
ensures b0060 ==> ((($non_null($phys_ptr_cast(P#x,^a_node)) && $non_null($phys_ptr_cast($result,^a_node))) ==> (F#avl_min_key($s,$phys_ptr_cast($result,^a_node)) <= F#avl_min_key(old($s),$phys_ptr_cast(P#x,^a_node)))));
ensures b0061 ==> ((($non_null($phys_ptr_cast($result,^a_node)) && $non_null($phys_ptr_cast(P#x,^a_node))) ==> (F#avl_min_key($s,$phys_ptr_cast(P#x,^a_node)) <= F#avl_min_key(old($s),$phys_ptr_cast($result,^a_node)))));
ensures b0062 ==> ((($non_null($phys_ptr_cast(P#x,^a_node)) && $non_null($phys_ptr_cast($result,^a_node))) ==> (F#avl_max_key($s,$phys_ptr_cast($result,^a_node)) <= F#avl_max_key(old($s),$phys_ptr_cast(P#x,^a_node)))));
ensures b0063 ==> ((($non_null($phys_ptr_cast($result,^a_node)) && $non_null($phys_ptr_cast(P#x,^a_node))) ==> (F#avl_max_key($s,$phys_ptr_cast(P#x,^a_node)) <= F#avl_max_key(old($s),$phys_ptr_cast($result,^a_node)))));
ensures b0064 ==> ((($non_null($phys_ptr_cast(P#x,^a_node)) && $non_null($phys_ptr_cast($result,^a_node))) ==> (F#avl_min_key(old($s),$phys_ptr_cast($result,^a_node)) <= F#avl_min_key($s,$phys_ptr_cast(P#x,^a_node)))));
ensures b0065 ==> ((($non_null($phys_ptr_cast($result,^a_node)) && $non_null($phys_ptr_cast(P#x,^a_node))) ==> (F#avl_min_key(old($s),$phys_ptr_cast(P#x,^a_node)) <= F#avl_min_key($s,$phys_ptr_cast($result,^a_node)))));
ensures b0066 ==> ((($non_null($phys_ptr_cast(P#x,^a_node)) && $non_null($phys_ptr_cast($result,^a_node))) ==> (F#avl_max_key(old($s),$phys_ptr_cast($result,^a_node)) <= F#avl_max_key($s,$phys_ptr_cast(P#x,^a_node)))));
ensures b0067 ==> ((($non_null($phys_ptr_cast($result,^a_node)) && $non_null($phys_ptr_cast(P#x,^a_node))) ==> (F#avl_max_key(old($s),$phys_ptr_cast(P#x,^a_node)) <= F#avl_max_key($s,$phys_ptr_cast($result,^a_node)))));
ensures b0068 ==> ((F#avl_height($s,$phys_ptr_cast(P#x,^a_node)) == F#avl_height(old($s),$phys_ptr_cast(P#x,^a_node))));
ensures b0069 ==> ((F#avl_height($s,$phys_ptr_cast($result,^a_node)) == F#avl_height(old($s),$phys_ptr_cast($result,^a_node))));
ensures b0070 ==> ((F#avl_height($s,$phys_ptr_cast(P#x,^a_node)) >= 0));
ensures b0071 ==> ((F#avl_height($s,$phys_ptr_cast($result,^a_node)) >= 0));

  free ensures -1 == $unchk_sub(^^i4, 0, 1);
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);

// INV:PTR: P#x, $result
// INV:INT: P#k
// INV:LST: avl


implementation avl_insert(P#x: $ptr, P#k: int) returns ($result: $ptr)
{
  var res_avl_balance#4: $ptr;
  var stmtexpr4#27: $state;
  var _dryad_S3#7: $state;
  var stmtexpr3#26: $state;
  var _dryad_S2#6: $state;
  var stmtexpr2#25: $oset;
  var res_avl_reach#3: $oset;
  var stmtexpr1#24: $state;
  var _dryad_S1#5: $state;
  var stmtexpr0#23: $state;
  var _dryad_S0#4: $state;
  var L#new_right: $ptr;
  var res_avl_balance#2: $ptr;
  var stmtexpr4#22: $state;
  var _dryad_S3#3: $state;
  var stmtexpr3#21: $state;
  var _dryad_S2#2: $state;
  var stmtexpr2#20: $oset;
  var res_avl_reach#1: $oset;
  var stmtexpr1#19: $state;
  var _dryad_S1#1: $state;
  var stmtexpr0#18: $state;
  var _dryad_S0#0: $state;
  var L#new_left: $ptr;
  var stmtexpr1#17: $ptr;
  var SL#x1: $ptr;
  var stmtexpr0#16: $ptr;
  var SL#x0: $ptr;
  var L#xl: $ptr;
  var L#xr: $ptr;
  var stmtexpr10#15: $state;
  var SL#_dryad_S9: $state;
  var stmtexpr9#14: $state;
  var SL#_dryad_S8: $state;
  var stmtexpr8#13: $state;
  var SL#_dryad_S7: $state;
  var stmtexpr7#12: $state;
  var SL#_dryad_S6: $state;
  var stmtexpr6#11: $state;
  var SL#_dryad_S5: $state;
  var stmtexpr5#10: $state;
  var SL#_dryad_S4: $state;
  var stmtexpr4#9: $state;
  var SL#_dryad_S3: $state;
  var stmtexpr3#8: $state;
  var SL#_dryad_S2: $state;
  var stmtexpr2#7: $state;
  var SL#_dryad_S1: $state;
  var stmtexpr1#6: $oset;
  var stmtexpr0#5: $state;
  var SL#_dryad_S0: $state;
  var L#leaf: $ptr;
  var stmtexpr1#29: $oset;
  var stmtexpr0#28: $oset;
  var SL#_dryad_G1: $oset;
  var SL#_dryad_G0: $oset;
  var #wrTime$3^78.3: int;
  var #stackframe: int;

  anon5:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$3^78.3, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$3^78.3 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$3^78.3, (lambda #p: $ptr :: false));
    // assume true
    // assume @in_range_i4(k); 
    assume $in_range_i4(P#k);
    // assume @decreases_level_is(2147483647); 
    assume 2147483647 == $decreases_level;
    // assume true
    //  --- Dryad annotated function --- 
    // _math \oset _dryad_G0; 
    // _math \oset _dryad_G1; 
    // _dryad_G0 := avl_reach(x); 
    call SL#_dryad_G0 := avl_reach($phys_ptr_cast(P#x, ^a_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset stmtexpr0#28; 
    // stmtexpr0#28 := _dryad_G0; 
    stmtexpr0#28 := SL#_dryad_G0;
    // _dryad_G1 := _dryad_G0; 
    SL#_dryad_G1 := SL#_dryad_G0;
    // _math \oset stmtexpr1#29; 
    // stmtexpr1#29 := _dryad_G1; 
    stmtexpr1#29 := SL#_dryad_G1;
    // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
    // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), &&(@_vcc_mutable(@state, x), @writes_check(x))); 
    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> $mutable($s, $phys_ptr_cast(P#x, ^a_node)) && $top_writable($s, #wrTime$3^78.3, $phys_ptr_cast(P#x, ^a_node));
    assume true;
    // if (@_vcc_ptr_eq_null(x)) ...
    if ($is_null($phys_ptr_cast(P#x, ^a_node)))
    {
      anon1:
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // struct a_node* leaf; 
        // _math \state _dryad_S0; 
        // _dryad_S0 := @_vcc_current_state(@state); 
        SL#_dryad_S0 := $current_state($s);
        // _math \state stmtexpr0#5; 
        // stmtexpr0#5 := _dryad_S0; 
        stmtexpr0#5 := SL#_dryad_S0;
        // leaf := _vcc_alloc(@_vcc_typeof((struct a_node*)@null)); 
        call L#leaf := $alloc(^a_node);
        assume $full_stop_ext(#tok$3^101.20, $s);
        // assume !(@_vcc_oset_in(leaf, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
        // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(leaf)); 
        SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#leaf, ^a_node)));
        // _math \oset stmtexpr1#6; 
        // stmtexpr1#6 := _dryad_G1; 
        stmtexpr1#6 := SL#_dryad_G1;
        // assume ==(glob_reach(), _dryad_G1); 
        assume F#glob_reach() == SL#_dryad_G1;
        // _math \state _dryad_S1; 
        // _dryad_S1 := @_vcc_current_state(@state); 
        SL#_dryad_S1 := $current_state($s);
        // _math \state stmtexpr2#7; 
        // stmtexpr2#7 := _dryad_S1; 
        stmtexpr2#7 := SL#_dryad_S1;
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(avl(leaf), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((leaf->left))), avl(*((leaf->right)))), unchecked!(@_vcc_oset_in(leaf, @_vcc_oset_union(avl_reach(*((leaf->left))), avl_reach(*((leaf->right))))))), unchecked!(@_vcc_intset_in(*((leaf->key)), @_vcc_intset_union(avl_keys(*((leaf->left))), avl_keys(*((leaf->right))))))), @_vcc_oset_disjoint(avl_reach(*((leaf->left))), avl_reach(*((leaf->right))))), @_vcc_intset_disjoint(avl_keys(*((leaf->left))), avl_keys(*((leaf->right))))), ==>(@_vcc_ptr_neq_null(*((leaf->left))), <(avl_max_key(*((leaf->left))), *((leaf->key))))), ==>(@_vcc_ptr_neq_null(*((leaf->right))), <(*((leaf->key)), avl_min_key(*((leaf->right)))))), ||(||(&&(==(avl_height(*((leaf->left))), avl_height(*((leaf->right)))), ==(*((leaf->height)), +(avl_height(*((leaf->left))), 1))), &&(==(avl_height(*((leaf->left))), +(avl_height(*((leaf->right))), 1)), ==(*((leaf->height)), +(avl_height(*((leaf->left))), 1)))), &&(==(avl_height(*((leaf->right))), +(avl_height(*((leaf->left))), 1)), ==(*((leaf->height)), +(avl_height(*((leaf->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#leaf, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#leaf, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(avl_reach(leaf), @_vcc_oset_union_one1(leaf, @_vcc_oset_union(avl_reach(*((leaf->left))), avl_reach(*((leaf->right))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#leaf, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#leaf, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(avl_height(leaf), @ite(>(avl_height(*((leaf->left))), avl_height(*((leaf->right)))), +(avl_height(*((leaf->left))), 1), +(avl_height(*((leaf->right))), 1)))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#leaf, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(avl_keys(leaf), @_vcc_intset_union(@_vcc_intset_singleton(*((leaf->key))), @_vcc_intset_union(avl_keys(*((leaf->left))), avl_keys(*((leaf->right))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#leaf, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(avl_max_key(leaf), @\int_max(*((leaf->key)), @\int_max(avl_max_key(*((leaf->left))), avl_max_key(*((leaf->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_eq_null(*((leaf->right)))), ==(avl_max_key(leaf), @\int_max(*((leaf->key)), avl_max_key(*((leaf->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(avl_max_key(leaf), @\int_max(*((leaf->key)), avl_max_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(avl_min_key(leaf), @\int_min(*((leaf->key)), @\int_min(avl_min_key(*((leaf->left))), avl_min_key(*((leaf->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_eq_null(*((leaf->right)))), ==(avl_min_key(leaf), @\int_min(*((leaf->key)), avl_min_key(*((leaf->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(avl_min_key(leaf), @\int_min(*((leaf->key)), avl_min_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S0, avl_reach(x)))), ==(old(_dryad_S0, avl(x)), old(_dryad_S1, avl(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl(SL#_dryad_S0, $phys_ptr_cast(P#x, ^a_node)) == F#avl(SL#_dryad_S1, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S0, avl_reach(x)))), ==(old(_dryad_S0, avl_reach(x)), old(_dryad_S1, avl_reach(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^a_node)) == F#avl_reach(SL#_dryad_S1, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S0, avl_reach(x)))), ==(old(_dryad_S0, avl_height(x)), old(_dryad_S1, avl_height(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_height(SL#_dryad_S0, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height(SL#_dryad_S1, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S0, avl_reach(x)))), ==(old(_dryad_S0, avl_keys(x)), old(_dryad_S1, avl_keys(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_keys(SL#_dryad_S0, $phys_ptr_cast(P#x, ^a_node)) == F#avl_keys(SL#_dryad_S1, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S0, avl_reach(x)))), ==(old(_dryad_S0, avl_max_key(x)), old(_dryad_S1, avl_max_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_max_key(SL#_dryad_S0, $phys_ptr_cast(P#x, ^a_node)) == F#avl_max_key(SL#_dryad_S1, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S0, avl_reach(x)))), ==(old(_dryad_S0, avl_min_key(x)), old(_dryad_S1, avl_min_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_min_key(SL#_dryad_S0, $phys_ptr_cast(P#x, ^a_node)) == F#avl_min_key(SL#_dryad_S1, $phys_ptr_cast(P#x, ^a_node));
        // assume @_vcc_ptr_neq_null(leaf); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node));
        // _math \state _dryad_S2; 
        // _dryad_S2 := @_vcc_current_state(@state); 
        SL#_dryad_S2 := $current_state($s);
        // _math \state stmtexpr3#8; 
        // stmtexpr3#8 := _dryad_S2; 
        stmtexpr3#8 := SL#_dryad_S2;
        // assert @prim_writes_check((leaf->key)); 
        assert $writable_prim($s, #wrTime$3^78.3, $dot($phys_ptr_cast(L#leaf, ^a_node), a_node.key));
        // *(leaf->key) := k; 
        call $write_int(a_node.key, $phys_ptr_cast(L#leaf, ^a_node), P#k);
        assume $full_stop_ext(#tok$3^104.3, $s);
        // _math \state _dryad_S3; 
        // _dryad_S3 := @_vcc_current_state(@state); 
        SL#_dryad_S3 := $current_state($s);
        // _math \state stmtexpr4#9; 
        // stmtexpr4#9 := _dryad_S3; 
        stmtexpr4#9 := SL#_dryad_S3;
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(*((leaf->left)))))), ==(old(_dryad_S2, avl(*((leaf->left)))), old(_dryad_S3, avl(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(*((leaf->left)))))), ==(old(_dryad_S2, avl_reach(*((leaf->left)))), old(_dryad_S3, avl_reach(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(*((leaf->left)))))), ==(old(_dryad_S2, avl_height(*((leaf->left)))), old(_dryad_S3, avl_height(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_height(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(*((leaf->left)))))), ==(old(_dryad_S2, avl_keys(*((leaf->left)))), old(_dryad_S3, avl_keys(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_keys(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_keys(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(*((leaf->left)))))), ==(old(_dryad_S2, avl_max_key(*((leaf->left)))), old(_dryad_S3, avl_max_key(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_max_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_max_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(*((leaf->left)))))), ==(old(_dryad_S2, avl_min_key(*((leaf->left)))), old(_dryad_S3, avl_min_key(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_min_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_min_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(*((leaf->right)))))), ==(old(_dryad_S2, avl(*((leaf->right)))), old(_dryad_S3, avl(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(*((leaf->right)))))), ==(old(_dryad_S2, avl_reach(*((leaf->right)))), old(_dryad_S3, avl_reach(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(*((leaf->right)))))), ==(old(_dryad_S2, avl_height(*((leaf->right)))), old(_dryad_S3, avl_height(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_height(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(*((leaf->right)))))), ==(old(_dryad_S2, avl_keys(*((leaf->right)))), old(_dryad_S3, avl_keys(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_keys(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_keys(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(*((leaf->right)))))), ==(old(_dryad_S2, avl_max_key(*((leaf->right)))), old(_dryad_S3, avl_max_key(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_max_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_max_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(*((leaf->right)))))), ==(old(_dryad_S2, avl_min_key(*((leaf->right)))), old(_dryad_S3, avl_min_key(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_min_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_min_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==(old(_dryad_S2, avl_reach(leaf)), old(_dryad_S3, avl_reach(leaf))); 
        assume F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_reach(SL#_dryad_S3, $phys_ptr_cast(L#leaf, ^a_node));
        // assume ==(old(_dryad_S2, avl_height(leaf)), old(_dryad_S3, avl_height(leaf))); 
        assume F#avl_height(SL#_dryad_S2, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_height(SL#_dryad_S3, $phys_ptr_cast(L#leaf, ^a_node));
        // assume ==(old(_dryad_S2, avl_reach(x)), old(_dryad_S3, avl_reach(x))); 
        assume F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node)) == F#avl_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^a_node));
        // assume ==(old(_dryad_S2, avl_height(x)), old(_dryad_S3, avl_height(x))); 
        assume F#avl_height(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height(SL#_dryad_S3, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(x)))), ==(old(_dryad_S2, avl(x)), old(_dryad_S3, avl(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node)) == F#avl(SL#_dryad_S3, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(x)))), ==(old(_dryad_S2, avl_reach(x)), old(_dryad_S3, avl_reach(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node)) == F#avl_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(x)))), ==(old(_dryad_S2, avl_height(x)), old(_dryad_S3, avl_height(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_height(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height(SL#_dryad_S3, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(x)))), ==(old(_dryad_S2, avl_keys(x)), old(_dryad_S3, avl_keys(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_keys(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node)) == F#avl_keys(SL#_dryad_S3, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(x)))), ==(old(_dryad_S2, avl_max_key(x)), old(_dryad_S3, avl_max_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_max_key(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node)) == F#avl_max_key(SL#_dryad_S3, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, avl_reach(x)))), ==(old(_dryad_S2, avl_min_key(x)), old(_dryad_S3, avl_min_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_min_key(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node)) == F#avl_min_key(SL#_dryad_S3, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), @_vcc_ptr_eq_pure(*((x->left)), old(_dryad_S2, *((x->left))))); 
        assume !($phys_ptr_cast(L#leaf, ^a_node) == $phys_ptr_cast(P#x, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), @_vcc_ptr_eq_pure(*((x->right)), old(_dryad_S2, *((x->right))))); 
        assume !($phys_ptr_cast(L#leaf, ^a_node) == $phys_ptr_cast(P#x, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), ==(*((x->key)), old(_dryad_S2, *((x->key))))); 
        assume !($phys_ptr_cast(L#leaf, ^a_node) == $phys_ptr_cast(P#x, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(SL#_dryad_S2, a_node.key, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), ==(*((x->height)), old(_dryad_S2, *((x->height))))); 
        assume !($phys_ptr_cast(L#leaf, ^a_node) == $phys_ptr_cast(P#x, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(SL#_dryad_S2, a_node.height, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(avl(leaf), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((leaf->left))), avl(*((leaf->right)))), unchecked!(@_vcc_oset_in(leaf, @_vcc_oset_union(avl_reach(*((leaf->left))), avl_reach(*((leaf->right))))))), unchecked!(@_vcc_intset_in(*((leaf->key)), @_vcc_intset_union(avl_keys(*((leaf->left))), avl_keys(*((leaf->right))))))), @_vcc_oset_disjoint(avl_reach(*((leaf->left))), avl_reach(*((leaf->right))))), @_vcc_intset_disjoint(avl_keys(*((leaf->left))), avl_keys(*((leaf->right))))), ==>(@_vcc_ptr_neq_null(*((leaf->left))), <(avl_max_key(*((leaf->left))), *((leaf->key))))), ==>(@_vcc_ptr_neq_null(*((leaf->right))), <(*((leaf->key)), avl_min_key(*((leaf->right)))))), ||(||(&&(==(avl_height(*((leaf->left))), avl_height(*((leaf->right)))), ==(*((leaf->height)), +(avl_height(*((leaf->left))), 1))), &&(==(avl_height(*((leaf->left))), +(avl_height(*((leaf->right))), 1)), ==(*((leaf->height)), +(avl_height(*((leaf->left))), 1)))), &&(==(avl_height(*((leaf->right))), +(avl_height(*((leaf->left))), 1)), ==(*((leaf->height)), +(avl_height(*((leaf->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#leaf, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#leaf, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(avl_keys(leaf), @_vcc_intset_union(@_vcc_intset_singleton(*((leaf->key))), @_vcc_intset_union(avl_keys(*((leaf->left))), avl_keys(*((leaf->right))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#leaf, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(avl_max_key(leaf), @\int_max(*((leaf->key)), @\int_max(avl_max_key(*((leaf->left))), avl_max_key(*((leaf->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_eq_null(*((leaf->right)))), ==(avl_max_key(leaf), @\int_max(*((leaf->key)), avl_max_key(*((leaf->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(avl_max_key(leaf), @\int_max(*((leaf->key)), avl_max_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(avl_min_key(leaf), @\int_min(*((leaf->key)), @\int_min(avl_min_key(*((leaf->left))), avl_min_key(*((leaf->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_eq_null(*((leaf->right)))), ==(avl_min_key(leaf), @\int_min(*((leaf->key)), avl_min_key(*((leaf->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(avl_min_key(leaf), @\int_min(*((leaf->key)), avl_min_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))));
        // _math \state _dryad_S4; 
        // _dryad_S4 := @_vcc_current_state(@state); 
        SL#_dryad_S4 := $current_state($s);
        // _math \state stmtexpr5#10; 
        // stmtexpr5#10 := _dryad_S4; 
        stmtexpr5#10 := SL#_dryad_S4;
        // assert @prim_writes_check((leaf->height)); 
        assert $writable_prim($s, #wrTime$3^78.3, $dot($phys_ptr_cast(L#leaf, ^a_node), a_node.height));
        // *(leaf->height) := 0; 
        call $write_int(a_node.height, $phys_ptr_cast(L#leaf, ^a_node), 0);
        assume $full_stop_ext(#tok$3^106.3, $s);
        // _math \state _dryad_S5; 
        // _dryad_S5 := @_vcc_current_state(@state); 
        SL#_dryad_S5 := $current_state($s);
        // _math \state stmtexpr6#11; 
        // stmtexpr6#11 := _dryad_S5; 
        stmtexpr6#11 := SL#_dryad_S5;
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(*((leaf->left)))))), ==(old(_dryad_S4, avl(*((leaf->left)))), old(_dryad_S5, avl(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(*((leaf->left)))))), ==(old(_dryad_S4, avl_reach(*((leaf->left)))), old(_dryad_S5, avl_reach(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_reach(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(*((leaf->left)))))), ==(old(_dryad_S4, avl_height(*((leaf->left)))), old(_dryad_S5, avl_height(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_height(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(*((leaf->left)))))), ==(old(_dryad_S4, avl_keys(*((leaf->left)))), old(_dryad_S5, avl_keys(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_keys(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_keys(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(*((leaf->left)))))), ==(old(_dryad_S4, avl_max_key(*((leaf->left)))), old(_dryad_S5, avl_max_key(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_max_key(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_max_key(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(*((leaf->left)))))), ==(old(_dryad_S4, avl_min_key(*((leaf->left)))), old(_dryad_S5, avl_min_key(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_min_key(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_min_key(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(*((leaf->right)))))), ==(old(_dryad_S4, avl(*((leaf->right)))), old(_dryad_S5, avl(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(*((leaf->right)))))), ==(old(_dryad_S4, avl_reach(*((leaf->right)))), old(_dryad_S5, avl_reach(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_reach(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(*((leaf->right)))))), ==(old(_dryad_S4, avl_height(*((leaf->right)))), old(_dryad_S5, avl_height(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_height(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(*((leaf->right)))))), ==(old(_dryad_S4, avl_keys(*((leaf->right)))), old(_dryad_S5, avl_keys(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_keys(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_keys(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(*((leaf->right)))))), ==(old(_dryad_S4, avl_max_key(*((leaf->right)))), old(_dryad_S5, avl_max_key(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_max_key(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_max_key(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(*((leaf->right)))))), ==(old(_dryad_S4, avl_min_key(*((leaf->right)))), old(_dryad_S5, avl_min_key(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_min_key(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_min_key(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==(old(_dryad_S4, avl_reach(leaf)), old(_dryad_S5, avl_reach(leaf))); 
        assume F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_reach(SL#_dryad_S5, $phys_ptr_cast(L#leaf, ^a_node));
        // assume ==(old(_dryad_S4, avl_height(leaf)), old(_dryad_S5, avl_height(leaf))); 
        assume F#avl_height(SL#_dryad_S4, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_height(SL#_dryad_S5, $phys_ptr_cast(L#leaf, ^a_node));
        // assume ==(old(_dryad_S4, avl_keys(leaf)), old(_dryad_S5, avl_keys(leaf))); 
        assume F#avl_keys(SL#_dryad_S4, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_keys(SL#_dryad_S5, $phys_ptr_cast(L#leaf, ^a_node));
        // assume ==(old(_dryad_S4, avl_max_key(leaf)), old(_dryad_S5, avl_max_key(leaf))); 
        assume F#avl_max_key(SL#_dryad_S4, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_max_key(SL#_dryad_S5, $phys_ptr_cast(L#leaf, ^a_node));
        // assume ==(old(_dryad_S4, avl_min_key(leaf)), old(_dryad_S5, avl_min_key(leaf))); 
        assume F#avl_min_key(SL#_dryad_S4, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_min_key(SL#_dryad_S5, $phys_ptr_cast(L#leaf, ^a_node));
        // assume ==(old(_dryad_S4, avl_reach(x)), old(_dryad_S5, avl_reach(x))); 
        assume F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_reach(SL#_dryad_S5, $phys_ptr_cast(P#x, ^a_node));
        // assume ==(old(_dryad_S4, avl_height(x)), old(_dryad_S5, avl_height(x))); 
        assume F#avl_height(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height(SL#_dryad_S5, $phys_ptr_cast(P#x, ^a_node));
        // assume ==(old(_dryad_S4, avl_keys(x)), old(_dryad_S5, avl_keys(x))); 
        assume F#avl_keys(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_keys(SL#_dryad_S5, $phys_ptr_cast(P#x, ^a_node));
        // assume ==(old(_dryad_S4, avl_max_key(x)), old(_dryad_S5, avl_max_key(x))); 
        assume F#avl_max_key(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_max_key(SL#_dryad_S5, $phys_ptr_cast(P#x, ^a_node));
        // assume ==(old(_dryad_S4, avl_min_key(x)), old(_dryad_S5, avl_min_key(x))); 
        assume F#avl_min_key(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_min_key(SL#_dryad_S5, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(x)))), ==(old(_dryad_S4, avl(x)), old(_dryad_S5, avl(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node)) == F#avl(SL#_dryad_S5, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(x)))), ==(old(_dryad_S4, avl_reach(x)), old(_dryad_S5, avl_reach(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_reach(SL#_dryad_S5, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(x)))), ==(old(_dryad_S4, avl_height(x)), old(_dryad_S5, avl_height(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_height(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height(SL#_dryad_S5, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(x)))), ==(old(_dryad_S4, avl_keys(x)), old(_dryad_S5, avl_keys(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_keys(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_keys(SL#_dryad_S5, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(x)))), ==(old(_dryad_S4, avl_max_key(x)), old(_dryad_S5, avl_max_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_max_key(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_max_key(SL#_dryad_S5, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, avl_reach(x)))), ==(old(_dryad_S4, avl_min_key(x)), old(_dryad_S5, avl_min_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_min_key(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_min_key(SL#_dryad_S5, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), @_vcc_ptr_eq_pure(*((x->left)), old(_dryad_S4, *((x->left))))); 
        assume !($phys_ptr_cast(L#leaf, ^a_node) == $phys_ptr_cast(P#x, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), @_vcc_ptr_eq_pure(*((x->right)), old(_dryad_S4, *((x->right))))); 
        assume !($phys_ptr_cast(L#leaf, ^a_node) == $phys_ptr_cast(P#x, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), ==(*((x->key)), old(_dryad_S4, *((x->key))))); 
        assume !($phys_ptr_cast(L#leaf, ^a_node) == $phys_ptr_cast(P#x, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(SL#_dryad_S4, a_node.key, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), ==(*((x->height)), old(_dryad_S4, *((x->height))))); 
        assume !($phys_ptr_cast(L#leaf, ^a_node) == $phys_ptr_cast(P#x, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(SL#_dryad_S4, a_node.height, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(avl(leaf), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((leaf->left))), avl(*((leaf->right)))), unchecked!(@_vcc_oset_in(leaf, @_vcc_oset_union(avl_reach(*((leaf->left))), avl_reach(*((leaf->right))))))), unchecked!(@_vcc_intset_in(*((leaf->key)), @_vcc_intset_union(avl_keys(*((leaf->left))), avl_keys(*((leaf->right))))))), @_vcc_oset_disjoint(avl_reach(*((leaf->left))), avl_reach(*((leaf->right))))), @_vcc_intset_disjoint(avl_keys(*((leaf->left))), avl_keys(*((leaf->right))))), ==>(@_vcc_ptr_neq_null(*((leaf->left))), <(avl_max_key(*((leaf->left))), *((leaf->key))))), ==>(@_vcc_ptr_neq_null(*((leaf->right))), <(*((leaf->key)), avl_min_key(*((leaf->right)))))), ||(||(&&(==(avl_height(*((leaf->left))), avl_height(*((leaf->right)))), ==(*((leaf->height)), +(avl_height(*((leaf->left))), 1))), &&(==(avl_height(*((leaf->left))), +(avl_height(*((leaf->right))), 1)), ==(*((leaf->height)), +(avl_height(*((leaf->left))), 1)))), &&(==(avl_height(*((leaf->right))), +(avl_height(*((leaf->left))), 1)), ==(*((leaf->height)), +(avl_height(*((leaf->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#leaf, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#leaf, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1)));
        // _math \state _dryad_S6; 
        // _dryad_S6 := @_vcc_current_state(@state); 
        SL#_dryad_S6 := $current_state($s);
        // _math \state stmtexpr7#12; 
        // stmtexpr7#12 := _dryad_S6; 
        stmtexpr7#12 := SL#_dryad_S6;
        // assert @prim_writes_check((leaf->left)); 
        assert $writable_prim($s, #wrTime$3^78.3, $dot($phys_ptr_cast(L#leaf, ^a_node), a_node.left));
        // *(leaf->left) := (struct a_node*)@null; 
        call $write_int(a_node.left, $phys_ptr_cast(L#leaf, ^a_node), $ptr_to_int($phys_ptr_cast($null, ^a_node)));
        assume $full_stop_ext(#tok$3^108.3, $s);
        // _math \state _dryad_S7; 
        // _dryad_S7 := @_vcc_current_state(@state); 
        SL#_dryad_S7 := $current_state($s);
        // _math \state stmtexpr8#13; 
        // stmtexpr8#13 := _dryad_S7; 
        stmtexpr8#13 := SL#_dryad_S7;
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, avl_reach(*((leaf->right)))))), ==(old(_dryad_S6, avl(*((leaf->right)))), old(_dryad_S7, avl(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, avl_reach(*((leaf->right)))))), ==(old(_dryad_S6, avl_reach(*((leaf->right)))), old(_dryad_S7, avl_reach(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_reach(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, avl_reach(*((leaf->right)))))), ==(old(_dryad_S6, avl_height(*((leaf->right)))), old(_dryad_S7, avl_height(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_height(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, avl_reach(*((leaf->right)))))), ==(old(_dryad_S6, avl_keys(*((leaf->right)))), old(_dryad_S7, avl_keys(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_keys(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_keys(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, avl_reach(*((leaf->right)))))), ==(old(_dryad_S6, avl_max_key(*((leaf->right)))), old(_dryad_S7, avl_max_key(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_max_key(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_max_key(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, avl_reach(*((leaf->right)))))), ==(old(_dryad_S6, avl_min_key(*((leaf->right)))), old(_dryad_S7, avl_min_key(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_min_key(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_min_key(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, avl_reach(x)))), ==(old(_dryad_S6, avl(x)), old(_dryad_S7, avl(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl(SL#_dryad_S6, $phys_ptr_cast(P#x, ^a_node)) == F#avl(SL#_dryad_S7, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, avl_reach(x)))), ==(old(_dryad_S6, avl_reach(x)), old(_dryad_S7, avl_reach(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^a_node)) == F#avl_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, avl_reach(x)))), ==(old(_dryad_S6, avl_height(x)), old(_dryad_S7, avl_height(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_height(SL#_dryad_S6, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height(SL#_dryad_S7, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, avl_reach(x)))), ==(old(_dryad_S6, avl_keys(x)), old(_dryad_S7, avl_keys(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_keys(SL#_dryad_S6, $phys_ptr_cast(P#x, ^a_node)) == F#avl_keys(SL#_dryad_S7, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, avl_reach(x)))), ==(old(_dryad_S6, avl_max_key(x)), old(_dryad_S7, avl_max_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_max_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^a_node)) == F#avl_max_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, avl_reach(x)))), ==(old(_dryad_S6, avl_min_key(x)), old(_dryad_S7, avl_min_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_min_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^a_node)) == F#avl_min_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), @_vcc_ptr_eq_pure(*((x->left)), old(_dryad_S6, *((x->left))))); 
        assume !($phys_ptr_cast(L#leaf, ^a_node) == $phys_ptr_cast(P#x, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), @_vcc_ptr_eq_pure(*((x->right)), old(_dryad_S6, *((x->right))))); 
        assume !($phys_ptr_cast(L#leaf, ^a_node) == $phys_ptr_cast(P#x, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), ==(*((x->key)), old(_dryad_S6, *((x->key))))); 
        assume !($phys_ptr_cast(L#leaf, ^a_node) == $phys_ptr_cast(P#x, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(SL#_dryad_S6, a_node.key, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), ==(*((x->height)), old(_dryad_S6, *((x->height))))); 
        assume !($phys_ptr_cast(L#leaf, ^a_node) == $phys_ptr_cast(P#x, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(SL#_dryad_S6, a_node.height, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(avl(leaf), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((leaf->left))), avl(*((leaf->right)))), unchecked!(@_vcc_oset_in(leaf, @_vcc_oset_union(avl_reach(*((leaf->left))), avl_reach(*((leaf->right))))))), unchecked!(@_vcc_intset_in(*((leaf->key)), @_vcc_intset_union(avl_keys(*((leaf->left))), avl_keys(*((leaf->right))))))), @_vcc_oset_disjoint(avl_reach(*((leaf->left))), avl_reach(*((leaf->right))))), @_vcc_intset_disjoint(avl_keys(*((leaf->left))), avl_keys(*((leaf->right))))), ==>(@_vcc_ptr_neq_null(*((leaf->left))), <(avl_max_key(*((leaf->left))), *((leaf->key))))), ==>(@_vcc_ptr_neq_null(*((leaf->right))), <(*((leaf->key)), avl_min_key(*((leaf->right)))))), ||(||(&&(==(avl_height(*((leaf->left))), avl_height(*((leaf->right)))), ==(*((leaf->height)), +(avl_height(*((leaf->left))), 1))), &&(==(avl_height(*((leaf->left))), +(avl_height(*((leaf->right))), 1)), ==(*((leaf->height)), +(avl_height(*((leaf->left))), 1)))), &&(==(avl_height(*((leaf->right))), +(avl_height(*((leaf->left))), 1)), ==(*((leaf->height)), +(avl_height(*((leaf->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#leaf, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#leaf, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(avl_reach(leaf), @_vcc_oset_union_one1(leaf, @_vcc_oset_union(avl_reach(*((leaf->left))), avl_reach(*((leaf->right))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#leaf, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#leaf, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(avl_height(leaf), @ite(>(avl_height(*((leaf->left))), avl_height(*((leaf->right)))), +(avl_height(*((leaf->left))), 1), +(avl_height(*((leaf->right))), 1)))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#leaf, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(avl_keys(leaf), @_vcc_intset_union(@_vcc_intset_singleton(*((leaf->key))), @_vcc_intset_union(avl_keys(*((leaf->left))), avl_keys(*((leaf->right))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#leaf, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(avl_max_key(leaf), @\int_max(*((leaf->key)), @\int_max(avl_max_key(*((leaf->left))), avl_max_key(*((leaf->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_eq_null(*((leaf->right)))), ==(avl_max_key(leaf), @\int_max(*((leaf->key)), avl_max_key(*((leaf->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(avl_max_key(leaf), @\int_max(*((leaf->key)), avl_max_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(avl_min_key(leaf), @\int_min(*((leaf->key)), @\int_min(avl_min_key(*((leaf->left))), avl_min_key(*((leaf->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_eq_null(*((leaf->right)))), ==(avl_min_key(leaf), @\int_min(*((leaf->key)), avl_min_key(*((leaf->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(avl_min_key(leaf), @\int_min(*((leaf->key)), avl_min_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))));
        // _math \state _dryad_S8; 
        // _dryad_S8 := @_vcc_current_state(@state); 
        SL#_dryad_S8 := $current_state($s);
        // _math \state stmtexpr9#14; 
        // stmtexpr9#14 := _dryad_S8; 
        stmtexpr9#14 := SL#_dryad_S8;
        // assert @prim_writes_check((leaf->right)); 
        assert $writable_prim($s, #wrTime$3^78.3, $dot($phys_ptr_cast(L#leaf, ^a_node), a_node.right));
        // *(leaf->right) := (struct a_node*)@null; 
        call $write_int(a_node.right, $phys_ptr_cast(L#leaf, ^a_node), $ptr_to_int($phys_ptr_cast($null, ^a_node)));
        assume $full_stop_ext(#tok$3^110.3, $s);
        // _math \state _dryad_S9; 
        // _dryad_S9 := @_vcc_current_state(@state); 
        SL#_dryad_S9 := $current_state($s);
        // _math \state stmtexpr10#15; 
        // stmtexpr10#15 := _dryad_S9; 
        stmtexpr10#15 := SL#_dryad_S9;
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S8, avl_reach(*((leaf->left)))))), ==(old(_dryad_S8, avl(*((leaf->left)))), old(_dryad_S9, avl(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl(SL#_dryad_S9, $rd_phys_ptr(SL#_dryad_S9, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S8, avl_reach(*((leaf->left)))))), ==(old(_dryad_S8, avl_reach(*((leaf->left)))), old(_dryad_S9, avl_reach(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_reach(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_reach(SL#_dryad_S9, $rd_phys_ptr(SL#_dryad_S9, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S8, avl_reach(*((leaf->left)))))), ==(old(_dryad_S8, avl_height(*((leaf->left)))), old(_dryad_S9, avl_height(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_height(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height(SL#_dryad_S9, $rd_phys_ptr(SL#_dryad_S9, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S8, avl_reach(*((leaf->left)))))), ==(old(_dryad_S8, avl_keys(*((leaf->left)))), old(_dryad_S9, avl_keys(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_keys(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_keys(SL#_dryad_S9, $rd_phys_ptr(SL#_dryad_S9, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S8, avl_reach(*((leaf->left)))))), ==(old(_dryad_S8, avl_max_key(*((leaf->left)))), old(_dryad_S9, avl_max_key(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_max_key(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_max_key(SL#_dryad_S9, $rd_phys_ptr(SL#_dryad_S9, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S8, avl_reach(*((leaf->left)))))), ==(old(_dryad_S8, avl_min_key(*((leaf->left)))), old(_dryad_S9, avl_min_key(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) ==> F#avl_min_key(SL#_dryad_S8, $rd_phys_ptr(SL#_dryad_S8, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_min_key(SL#_dryad_S9, $rd_phys_ptr(SL#_dryad_S9, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S8, avl_reach(x)))), ==(old(_dryad_S8, avl(x)), old(_dryad_S9, avl(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl(SL#_dryad_S8, $phys_ptr_cast(P#x, ^a_node)) == F#avl(SL#_dryad_S9, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S8, avl_reach(x)))), ==(old(_dryad_S8, avl_reach(x)), old(_dryad_S9, avl_reach(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^a_node)) == F#avl_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S8, avl_reach(x)))), ==(old(_dryad_S8, avl_height(x)), old(_dryad_S9, avl_height(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_height(SL#_dryad_S8, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height(SL#_dryad_S9, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S8, avl_reach(x)))), ==(old(_dryad_S8, avl_keys(x)), old(_dryad_S9, avl_keys(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_keys(SL#_dryad_S8, $phys_ptr_cast(P#x, ^a_node)) == F#avl_keys(SL#_dryad_S9, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S8, avl_reach(x)))), ==(old(_dryad_S8, avl_max_key(x)), old(_dryad_S9, avl_max_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_max_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^a_node)) == F#avl_max_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S8, avl_reach(x)))), ==(old(_dryad_S8, avl_min_key(x)), old(_dryad_S9, avl_min_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^a_node), F#avl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_min_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^a_node)) == F#avl_min_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), @_vcc_ptr_eq_pure(*((x->left)), old(_dryad_S8, *((x->left))))); 
        assume !($phys_ptr_cast(L#leaf, ^a_node) == $phys_ptr_cast(P#x, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S8, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), @_vcc_ptr_eq_pure(*((x->right)), old(_dryad_S8, *((x->right))))); 
        assume !($phys_ptr_cast(L#leaf, ^a_node) == $phys_ptr_cast(P#x, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S8, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), ==(*((x->key)), old(_dryad_S8, *((x->key))))); 
        assume !($phys_ptr_cast(L#leaf, ^a_node) == $phys_ptr_cast(P#x, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(SL#_dryad_S8, a_node.key, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), ==(*((x->height)), old(_dryad_S8, *((x->height))))); 
        assume !($phys_ptr_cast(L#leaf, ^a_node) == $phys_ptr_cast(P#x, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(SL#_dryad_S8, a_node.height, $phys_ptr_cast(P#x, ^a_node));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(avl(leaf), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((leaf->left))), avl(*((leaf->right)))), unchecked!(@_vcc_oset_in(leaf, @_vcc_oset_union(avl_reach(*((leaf->left))), avl_reach(*((leaf->right))))))), unchecked!(@_vcc_intset_in(*((leaf->key)), @_vcc_intset_union(avl_keys(*((leaf->left))), avl_keys(*((leaf->right))))))), @_vcc_oset_disjoint(avl_reach(*((leaf->left))), avl_reach(*((leaf->right))))), @_vcc_intset_disjoint(avl_keys(*((leaf->left))), avl_keys(*((leaf->right))))), ==>(@_vcc_ptr_neq_null(*((leaf->left))), <(avl_max_key(*((leaf->left))), *((leaf->key))))), ==>(@_vcc_ptr_neq_null(*((leaf->right))), <(*((leaf->key)), avl_min_key(*((leaf->right)))))), ||(||(&&(==(avl_height(*((leaf->left))), avl_height(*((leaf->right)))), ==(*((leaf->height)), +(avl_height(*((leaf->left))), 1))), &&(==(avl_height(*((leaf->left))), +(avl_height(*((leaf->right))), 1)), ==(*((leaf->height)), +(avl_height(*((leaf->left))), 1)))), &&(==(avl_height(*((leaf->right))), +(avl_height(*((leaf->left))), 1)), ==(*((leaf->height)), +(avl_height(*((leaf->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#leaf, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#leaf, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#leaf, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(avl_reach(leaf), @_vcc_oset_union_one1(leaf, @_vcc_oset_union(avl_reach(*((leaf->left))), avl_reach(*((leaf->right))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#leaf, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#leaf, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(avl_height(leaf), @ite(>(avl_height(*((leaf->left))), avl_height(*((leaf->right)))), +(avl_height(*((leaf->left))), 1), +(avl_height(*((leaf->right))), 1)))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#leaf, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(avl_keys(leaf), @_vcc_intset_union(@_vcc_intset_singleton(*((leaf->key))), @_vcc_intset_union(avl_keys(*((leaf->left))), avl_keys(*((leaf->right))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#leaf, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(avl_max_key(leaf), @\int_max(*((leaf->key)), @\int_max(avl_max_key(*((leaf->left))), avl_max_key(*((leaf->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_eq_null(*((leaf->right)))), ==(avl_max_key(leaf), @\int_max(*((leaf->key)), avl_max_key(*((leaf->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(avl_max_key(leaf), @\int_max(*((leaf->key)), avl_max_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(avl_min_key(leaf), @\int_min(*((leaf->key)), @\int_min(avl_min_key(*((leaf->left))), avl_min_key(*((leaf->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_eq_null(*((leaf->right)))), ==(avl_min_key(leaf), @\int_min(*((leaf->key)), avl_min_key(*((leaf->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(avl_min_key(leaf), @\int_min(*((leaf->key)), avl_min_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#leaf, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#leaf, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#leaf, ^a_node), ^a_node))));
        // return leaf; 
        $result := $phys_ptr_cast(L#leaf, ^a_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon4:
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // struct a_node* xr; 
        // struct a_node* xl; 
        // struct a_node* x0; 
        // x0 := x; 
        SL#x0 := $phys_ptr_cast(P#x, ^a_node);
        // struct a_node* stmtexpr0#16; 
        // stmtexpr0#16 := x0; 
        stmtexpr0#16 := $phys_ptr_cast(SL#x0, ^a_node);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assert @reads_check_normal((x->left)); 
        assert $thread_local($s, $phys_ptr_cast(P#x, ^a_node));
        // xl := *((x->left)); 
        L#xl := $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node);
        // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl(xl), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((xl->left))), avl(*((xl->right)))), unchecked!(@_vcc_oset_in(xl, @_vcc_oset_union(avl_reach(*((xl->left))), avl_reach(*((xl->right))))))), unchecked!(@_vcc_intset_in(*((xl->key)), @_vcc_intset_union(avl_keys(*((xl->left))), avl_keys(*((xl->right))))))), @_vcc_oset_disjoint(avl_reach(*((xl->left))), avl_reach(*((xl->right))))), @_vcc_intset_disjoint(avl_keys(*((xl->left))), avl_keys(*((xl->right))))), ==>(@_vcc_ptr_neq_null(*((xl->left))), <(avl_max_key(*((xl->left))), *((xl->key))))), ==>(@_vcc_ptr_neq_null(*((xl->right))), <(*((xl->key)), avl_min_key(*((xl->right)))))), ||(||(&&(==(avl_height(*((xl->left))), avl_height(*((xl->right)))), ==(*((xl->height)), +(avl_height(*((xl->left))), 1))), &&(==(avl_height(*((xl->left))), +(avl_height(*((xl->right))), 1)), ==(*((xl->height)), +(avl_height(*((xl->left))), 1)))), &&(==(avl_height(*((xl->right))), +(avl_height(*((xl->left))), 1)), ==(*((xl->height)), +(avl_height(*((xl->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#xl, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#xl, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_reach(xl), @_vcc_oset_union_one1(xl, @_vcc_oset_union(avl_reach(*((xl->left))), avl_reach(*((xl->right))))))); 
        assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#xl, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#xl, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_height(xl), @ite(>(avl_height(*((xl->left))), avl_height(*((xl->right)))), +(avl_height(*((xl->left))), 1), +(avl_height(*((xl->right))), 1)))); 
        assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#xl, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_keys(xl), @_vcc_intset_union(@_vcc_intset_singleton(*((xl->key))), @_vcc_intset_union(avl_keys(*((xl->left))), avl_keys(*((xl->right))))))); 
        assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#xl, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(xl), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), @\int_max(avl_max_key(*((xl->left))), avl_max_key(*((xl->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_eq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), avl_max_key(*((xl->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), avl_max_key(*((xl->right)))))))); 
        assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(xl), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), @\int_min(avl_min_key(*((xl->left))), avl_min_key(*((xl->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_eq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), avl_min_key(*((xl->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), avl_min_key(*((xl->right)))))))); 
        assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // struct a_node* x1; 
        // x1 := x; 
        SL#x1 := $phys_ptr_cast(P#x, ^a_node);
        // struct a_node* stmtexpr1#17; 
        // stmtexpr1#17 := x1; 
        stmtexpr1#17 := $phys_ptr_cast(SL#x1, ^a_node);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assert @reads_check_normal((x->right)); 
        assert $thread_local($s, $phys_ptr_cast(P#x, ^a_node));
        // xr := *((x->right)); 
        L#xr := $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node);
        // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl(xr), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((xr->left))), avl(*((xr->right)))), unchecked!(@_vcc_oset_in(xr, @_vcc_oset_union(avl_reach(*((xr->left))), avl_reach(*((xr->right))))))), unchecked!(@_vcc_intset_in(*((xr->key)), @_vcc_intset_union(avl_keys(*((xr->left))), avl_keys(*((xr->right))))))), @_vcc_oset_disjoint(avl_reach(*((xr->left))), avl_reach(*((xr->right))))), @_vcc_intset_disjoint(avl_keys(*((xr->left))), avl_keys(*((xr->right))))), ==>(@_vcc_ptr_neq_null(*((xr->left))), <(avl_max_key(*((xr->left))), *((xr->key))))), ==>(@_vcc_ptr_neq_null(*((xr->right))), <(*((xr->key)), avl_min_key(*((xr->right)))))), ||(||(&&(==(avl_height(*((xr->left))), avl_height(*((xr->right)))), ==(*((xr->height)), +(avl_height(*((xr->left))), 1))), &&(==(avl_height(*((xr->left))), +(avl_height(*((xr->right))), 1)), ==(*((xr->height)), +(avl_height(*((xr->left))), 1)))), &&(==(avl_height(*((xr->right))), +(avl_height(*((xr->left))), 1)), ==(*((xr->height)), +(avl_height(*((xr->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#xr, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#xr, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_reach(xr), @_vcc_oset_union_one1(xr, @_vcc_oset_union(avl_reach(*((xr->left))), avl_reach(*((xr->right))))))); 
        assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#xr, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#xr, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_height(xr), @ite(>(avl_height(*((xr->left))), avl_height(*((xr->right)))), +(avl_height(*((xr->left))), 1), +(avl_height(*((xr->right))), 1)))); 
        assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#xr, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_keys(xr), @_vcc_intset_union(@_vcc_intset_singleton(*((xr->key))), @_vcc_intset_union(avl_keys(*((xr->left))), avl_keys(*((xr->right))))))); 
        assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#xr, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(xr), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), @\int_max(avl_max_key(*((xr->left))), avl_max_key(*((xr->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_eq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), avl_max_key(*((xr->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), avl_max_key(*((xr->right)))))))); 
        assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(xr), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), @\int_min(avl_min_key(*((xr->left))), avl_min_key(*((xr->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_eq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), avl_min_key(*((xr->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), avl_min_key(*((xr->right)))))))); 
        assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assert @reads_check_normal((x->key)); 
        assert $thread_local($s, $phys_ptr_cast(P#x, ^a_node));
        assume true;
        // if (<(k, *((x->key)))) ...
        if (P#k < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)))
        {
          anon2:
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl(xl), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((xl->left))), avl(*((xl->right)))), unchecked!(@_vcc_oset_in(xl, @_vcc_oset_union(avl_reach(*((xl->left))), avl_reach(*((xl->right))))))), unchecked!(@_vcc_intset_in(*((xl->key)), @_vcc_intset_union(avl_keys(*((xl->left))), avl_keys(*((xl->right))))))), @_vcc_oset_disjoint(avl_reach(*((xl->left))), avl_reach(*((xl->right))))), @_vcc_intset_disjoint(avl_keys(*((xl->left))), avl_keys(*((xl->right))))), ==>(@_vcc_ptr_neq_null(*((xl->left))), <(avl_max_key(*((xl->left))), *((xl->key))))), ==>(@_vcc_ptr_neq_null(*((xl->right))), <(*((xl->key)), avl_min_key(*((xl->right)))))), ||(||(&&(==(avl_height(*((xl->left))), avl_height(*((xl->right)))), ==(*((xl->height)), +(avl_height(*((xl->left))), 1))), &&(==(avl_height(*((xl->left))), +(avl_height(*((xl->right))), 1)), ==(*((xl->height)), +(avl_height(*((xl->left))), 1)))), &&(==(avl_height(*((xl->right))), +(avl_height(*((xl->left))), 1)), ==(*((xl->height)), +(avl_height(*((xl->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#xl, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#xl, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_reach(xl), @_vcc_oset_union_one1(xl, @_vcc_oset_union(avl_reach(*((xl->left))), avl_reach(*((xl->right))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#xl, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#xl, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_height(xl), @ite(>(avl_height(*((xl->left))), avl_height(*((xl->right)))), +(avl_height(*((xl->left))), 1), +(avl_height(*((xl->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#xl, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_keys(xl), @_vcc_intset_union(@_vcc_intset_singleton(*((xl->key))), @_vcc_intset_union(avl_keys(*((xl->left))), avl_keys(*((xl->right))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#xl, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), @\int_max(avl_max_key(*((xl->left))), avl_max_key(*((xl->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_eq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), avl_max_key(*((xl->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), avl_max_key(*((xl->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), @\int_min(avl_min_key(*((xl->left))), avl_min_key(*((xl->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_eq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), avl_min_key(*((xl->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), avl_min_key(*((xl->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl(xr), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((xr->left))), avl(*((xr->right)))), unchecked!(@_vcc_oset_in(xr, @_vcc_oset_union(avl_reach(*((xr->left))), avl_reach(*((xr->right))))))), unchecked!(@_vcc_intset_in(*((xr->key)), @_vcc_intset_union(avl_keys(*((xr->left))), avl_keys(*((xr->right))))))), @_vcc_oset_disjoint(avl_reach(*((xr->left))), avl_reach(*((xr->right))))), @_vcc_intset_disjoint(avl_keys(*((xr->left))), avl_keys(*((xr->right))))), ==>(@_vcc_ptr_neq_null(*((xr->left))), <(avl_max_key(*((xr->left))), *((xr->key))))), ==>(@_vcc_ptr_neq_null(*((xr->right))), <(*((xr->key)), avl_min_key(*((xr->right)))))), ||(||(&&(==(avl_height(*((xr->left))), avl_height(*((xr->right)))), ==(*((xr->height)), +(avl_height(*((xr->left))), 1))), &&(==(avl_height(*((xr->left))), +(avl_height(*((xr->right))), 1)), ==(*((xr->height)), +(avl_height(*((xr->left))), 1)))), &&(==(avl_height(*((xr->right))), +(avl_height(*((xr->left))), 1)), ==(*((xr->height)), +(avl_height(*((xr->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#xr, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#xr, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_reach(xr), @_vcc_oset_union_one1(xr, @_vcc_oset_union(avl_reach(*((xr->left))), avl_reach(*((xr->right))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#xr, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#xr, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_height(xr), @ite(>(avl_height(*((xr->left))), avl_height(*((xr->right)))), +(avl_height(*((xr->left))), 1), +(avl_height(*((xr->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#xr, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_keys(xr), @_vcc_intset_union(@_vcc_intset_singleton(*((xr->key))), @_vcc_intset_union(avl_keys(*((xr->left))), avl_keys(*((xr->right))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#xr, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), @\int_max(avl_max_key(*((xr->left))), avl_max_key(*((xr->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_eq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), avl_max_key(*((xr->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), avl_max_key(*((xr->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), @\int_min(avl_min_key(*((xr->left))), avl_min_key(*((xr->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_eq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), avl_min_key(*((xr->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), avl_min_key(*((xr->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // struct a_node* new_left; 
            // _math \state _dryad_S0#0; 
            // _dryad_S0#0 := @_vcc_current_state(@state); 
            _dryad_S0#0 := $current_state($s);
            // _math \state stmtexpr0#18; 
            // stmtexpr0#18 := _dryad_S0#0; 
            stmtexpr0#18 := _dryad_S0#0;
            // non-pure function
            // new_left := avl_insert(xl, k); 
            call L#new_left := avl_insert($phys_ptr_cast(L#xl, ^a_node), P#k);
            assume $full_stop_ext(#tok$3^118.25, $s);
            // _math \state _dryad_S1#1; 
            // _dryad_S1#1 := @_vcc_current_state(@state); 
            _dryad_S1#1 := $current_state($s);
            // _math \state stmtexpr1#19; 
            // stmtexpr1#19 := _dryad_S1#1; 
            stmtexpr1#19 := _dryad_S1#1;
            // assume @_vcc_oset_disjoint(avl_reach(new_left), @_vcc_oset_diff(_dryad_G1, old(_dryad_S0#0, avl_reach(xl)))); 
            assume $oset_disjoint(F#avl_reach($s, $phys_ptr_cast(L#new_left, ^a_node)), $oset_diff(SL#_dryad_G1, F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))));
            // _math \oset res_avl_reach#1; 
            // res_avl_reach#1 := avl_reach(new_left); 
            call res_avl_reach#1 := avl_reach($phys_ptr_cast(L#new_left, ^a_node));
            assume $full_stop_ext(#tok$4^0.0, $s);
            // _dryad_G1 := @_vcc_oset_union(res_avl_reach#1, @_vcc_oset_diff(_dryad_G1, pure(old(_dryad_S0#0, avl_reach(xl))))); 
            SL#_dryad_G1 := $oset_union(res_avl_reach#1, $oset_diff(SL#_dryad_G1, F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))));
            // _math \oset stmtexpr2#20; 
            // stmtexpr2#20 := _dryad_G1; 
            stmtexpr2#20 := SL#_dryad_G1;
            // assume ==(glob_reach(), _dryad_G1); 
            assume F#glob_reach() == SL#_dryad_G1;
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x1))), ==(old(_dryad_S0#0, avl(x1)), old(_dryad_S1#1, avl(x1)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl(_dryad_S1#1, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x1))), ==(old(_dryad_S0#0, avl_reach(x1)), old(_dryad_S1#1, avl_reach(x1)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_reach(_dryad_S1#1, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x1))), ==(old(_dryad_S0#0, avl_height(x1)), old(_dryad_S1#1, avl_height(x1)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_height(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height(_dryad_S1#1, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x1))), ==(old(_dryad_S0#0, avl_keys(x1)), old(_dryad_S1#1, avl_keys(x1)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_keys(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_keys(_dryad_S1#1, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x1))), ==(old(_dryad_S0#0, avl_max_key(x1)), old(_dryad_S1#1, avl_max_key(x1)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_max_key(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_max_key(_dryad_S1#1, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x1))), ==(old(_dryad_S0#0, avl_min_key(x1)), old(_dryad_S1#1, avl_min_key(x1)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_min_key(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_min_key(_dryad_S1#1, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x0))), ==(old(_dryad_S0#0, avl(x0)), old(_dryad_S1#1, avl(x0)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x0))), ==(old(_dryad_S0#0, avl_reach(x0)), old(_dryad_S1#1, avl_reach(x0)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_reach(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x0))), ==(old(_dryad_S0#0, avl_height(x0)), old(_dryad_S1#1, avl_height(x0)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_height(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x0))), ==(old(_dryad_S0#0, avl_keys(x0)), old(_dryad_S1#1, avl_keys(x0)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_keys(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_keys(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x0))), ==(old(_dryad_S0#0, avl_max_key(x0)), old(_dryad_S1#1, avl_max_key(x0)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_max_key(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_max_key(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x0))), ==(old(_dryad_S0#0, avl_min_key(x0)), old(_dryad_S1#1, avl_min_key(x0)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_min_key(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_min_key(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(xl))), ==(old(_dryad_S0#0, avl(xl)), old(_dryad_S1#1, avl(xl)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)) == F#avl(_dryad_S1#1, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(xl))), ==(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S1#1, avl_reach(xl)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_reach(_dryad_S1#1, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(xl))), ==(old(_dryad_S0#0, avl_height(xl)), old(_dryad_S1#1, avl_height(xl)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_height(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height(_dryad_S1#1, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(xl))), ==(old(_dryad_S0#0, avl_keys(xl)), old(_dryad_S1#1, avl_keys(xl)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_keys(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_keys(_dryad_S1#1, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(xl))), ==(old(_dryad_S0#0, avl_max_key(xl)), old(_dryad_S1#1, avl_max_key(xl)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_max_key(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_max_key(_dryad_S1#1, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(xl))), ==(old(_dryad_S0#0, avl_min_key(xl)), old(_dryad_S1#1, avl_min_key(xl)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_min_key(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_min_key(_dryad_S1#1, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(xr))), ==(old(_dryad_S0#0, avl(xr)), old(_dryad_S1#1, avl(xr)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl(_dryad_S0#0, $phys_ptr_cast(L#xr, ^a_node)) == F#avl(_dryad_S1#1, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(xr))), ==(old(_dryad_S0#0, avl_reach(xr)), old(_dryad_S1#1, avl_reach(xr)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_reach(_dryad_S1#1, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(xr))), ==(old(_dryad_S0#0, avl_height(xr)), old(_dryad_S1#1, avl_height(xr)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_height(_dryad_S0#0, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height(_dryad_S1#1, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(xr))), ==(old(_dryad_S0#0, avl_keys(xr)), old(_dryad_S1#1, avl_keys(xr)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_keys(_dryad_S0#0, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_keys(_dryad_S1#1, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(xr))), ==(old(_dryad_S0#0, avl_max_key(xr)), old(_dryad_S1#1, avl_max_key(xr)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_max_key(_dryad_S0#0, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_max_key(_dryad_S1#1, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(xr))), ==(old(_dryad_S0#0, avl_min_key(xr)), old(_dryad_S1#1, avl_min_key(xr)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_min_key(_dryad_S0#0, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_min_key(_dryad_S1#1, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x))), ==(old(_dryad_S0#0, avl(x)), old(_dryad_S1#1, avl(x)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl(_dryad_S0#0, $phys_ptr_cast(P#x, ^a_node)) == F#avl(_dryad_S1#1, $phys_ptr_cast(P#x, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x))), ==(old(_dryad_S0#0, avl_reach(x)), old(_dryad_S1#1, avl_reach(x)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_reach(_dryad_S0#0, $phys_ptr_cast(P#x, ^a_node)) == F#avl_reach(_dryad_S1#1, $phys_ptr_cast(P#x, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x))), ==(old(_dryad_S0#0, avl_height(x)), old(_dryad_S1#1, avl_height(x)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_height(_dryad_S0#0, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height(_dryad_S1#1, $phys_ptr_cast(P#x, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x))), ==(old(_dryad_S0#0, avl_keys(x)), old(_dryad_S1#1, avl_keys(x)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_keys(_dryad_S0#0, $phys_ptr_cast(P#x, ^a_node)) == F#avl_keys(_dryad_S1#1, $phys_ptr_cast(P#x, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x))), ==(old(_dryad_S0#0, avl_max_key(x)), old(_dryad_S1#1, avl_max_key(x)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_max_key(_dryad_S0#0, $phys_ptr_cast(P#x, ^a_node)) == F#avl_max_key(_dryad_S1#1, $phys_ptr_cast(P#x, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, avl_reach(xl)), old(_dryad_S0#0, avl_reach(x))), ==(old(_dryad_S0#0, avl_min_key(x)), old(_dryad_S1#1, avl_min_key(x)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node)), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_min_key(_dryad_S0#0, $phys_ptr_cast(P#x, ^a_node)) == F#avl_min_key(_dryad_S1#1, $phys_ptr_cast(P#x, ^a_node));
            // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl(new_left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((new_left->left))), avl(*((new_left->right)))), unchecked!(@_vcc_oset_in(new_left, @_vcc_oset_union(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))))), unchecked!(@_vcc_intset_in(*((new_left->key)), @_vcc_intset_union(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))))), @_vcc_oset_disjoint(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))), @_vcc_intset_disjoint(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))), ==>(@_vcc_ptr_neq_null(*((new_left->left))), <(avl_max_key(*((new_left->left))), *((new_left->key))))), ==>(@_vcc_ptr_neq_null(*((new_left->right))), <(*((new_left->key)), avl_min_key(*((new_left->right)))))), ||(||(&&(==(avl_height(*((new_left->left))), avl_height(*((new_left->right)))), ==(*((new_left->height)), +(avl_height(*((new_left->left))), 1))), &&(==(avl_height(*((new_left->left))), +(avl_height(*((new_left->right))), 1)), ==(*((new_left->height)), +(avl_height(*((new_left->left))), 1)))), &&(==(avl_height(*((new_left->right))), +(avl_height(*((new_left->left))), 1)), ==(*((new_left->height)), +(avl_height(*((new_left->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#new_left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#new_left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_reach(new_left), @_vcc_oset_union_one1(new_left, @_vcc_oset_union(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#new_left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#new_left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_height(new_left), @ite(>(avl_height(*((new_left->left))), avl_height(*((new_left->right)))), +(avl_height(*((new_left->left))), 1), +(avl_height(*((new_left->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#new_left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_keys(new_left), @_vcc_intset_union(@_vcc_intset_singleton(*((new_left->key))), @_vcc_intset_union(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#new_left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), @\int_max(avl_max_key(*((new_left->left))), avl_max_key(*((new_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_eq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), avl_max_key(*((new_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), avl_max_key(*((new_left->right)))))))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), @\int_min(avl_min_key(*((new_left->left))), avl_min_key(*((new_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_eq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), avl_min_key(*((new_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), avl_min_key(*((new_left->right)))))))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl(xl), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((xl->left))), avl(*((xl->right)))), unchecked!(@_vcc_oset_in(xl, @_vcc_oset_union(avl_reach(*((xl->left))), avl_reach(*((xl->right))))))), unchecked!(@_vcc_intset_in(*((xl->key)), @_vcc_intset_union(avl_keys(*((xl->left))), avl_keys(*((xl->right))))))), @_vcc_oset_disjoint(avl_reach(*((xl->left))), avl_reach(*((xl->right))))), @_vcc_intset_disjoint(avl_keys(*((xl->left))), avl_keys(*((xl->right))))), ==>(@_vcc_ptr_neq_null(*((xl->left))), <(avl_max_key(*((xl->left))), *((xl->key))))), ==>(@_vcc_ptr_neq_null(*((xl->right))), <(*((xl->key)), avl_min_key(*((xl->right)))))), ||(||(&&(==(avl_height(*((xl->left))), avl_height(*((xl->right)))), ==(*((xl->height)), +(avl_height(*((xl->left))), 1))), &&(==(avl_height(*((xl->left))), +(avl_height(*((xl->right))), 1)), ==(*((xl->height)), +(avl_height(*((xl->left))), 1)))), &&(==(avl_height(*((xl->right))), +(avl_height(*((xl->left))), 1)), ==(*((xl->height)), +(avl_height(*((xl->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#xl, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#xl, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_reach(xl), @_vcc_oset_union_one1(xl, @_vcc_oset_union(avl_reach(*((xl->left))), avl_reach(*((xl->right))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#xl, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#xl, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_height(xl), @ite(>(avl_height(*((xl->left))), avl_height(*((xl->right)))), +(avl_height(*((xl->left))), 1), +(avl_height(*((xl->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#xl, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_keys(xl), @_vcc_intset_union(@_vcc_intset_singleton(*((xl->key))), @_vcc_intset_union(avl_keys(*((xl->left))), avl_keys(*((xl->right))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#xl, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), @\int_max(avl_max_key(*((xl->left))), avl_max_key(*((xl->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_eq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), avl_max_key(*((xl->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), avl_max_key(*((xl->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), @\int_min(avl_min_key(*((xl->left))), avl_min_key(*((xl->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_eq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), avl_min_key(*((xl->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), avl_min_key(*((xl->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl(xr), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((xr->left))), avl(*((xr->right)))), unchecked!(@_vcc_oset_in(xr, @_vcc_oset_union(avl_reach(*((xr->left))), avl_reach(*((xr->right))))))), unchecked!(@_vcc_intset_in(*((xr->key)), @_vcc_intset_union(avl_keys(*((xr->left))), avl_keys(*((xr->right))))))), @_vcc_oset_disjoint(avl_reach(*((xr->left))), avl_reach(*((xr->right))))), @_vcc_intset_disjoint(avl_keys(*((xr->left))), avl_keys(*((xr->right))))), ==>(@_vcc_ptr_neq_null(*((xr->left))), <(avl_max_key(*((xr->left))), *((xr->key))))), ==>(@_vcc_ptr_neq_null(*((xr->right))), <(*((xr->key)), avl_min_key(*((xr->right)))))), ||(||(&&(==(avl_height(*((xr->left))), avl_height(*((xr->right)))), ==(*((xr->height)), +(avl_height(*((xr->left))), 1))), &&(==(avl_height(*((xr->left))), +(avl_height(*((xr->right))), 1)), ==(*((xr->height)), +(avl_height(*((xr->left))), 1)))), &&(==(avl_height(*((xr->right))), +(avl_height(*((xr->left))), 1)), ==(*((xr->height)), +(avl_height(*((xr->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#xr, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#xr, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_reach(xr), @_vcc_oset_union_one1(xr, @_vcc_oset_union(avl_reach(*((xr->left))), avl_reach(*((xr->right))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#xr, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#xr, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_height(xr), @ite(>(avl_height(*((xr->left))), avl_height(*((xr->right)))), +(avl_height(*((xr->left))), 1), +(avl_height(*((xr->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#xr, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_keys(xr), @_vcc_intset_union(@_vcc_intset_singleton(*((xr->key))), @_vcc_intset_union(avl_keys(*((xr->left))), avl_keys(*((xr->right))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#xr, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), @\int_max(avl_max_key(*((xr->left))), avl_max_key(*((xr->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_eq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), avl_max_key(*((xr->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), avl_max_key(*((xr->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), @\int_min(avl_min_key(*((xr->left))), avl_min_key(*((xr->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_eq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), avl_min_key(*((xr->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), avl_min_key(*((xr->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#0, avl_reach(xl)))), @_vcc_ptr_eq_pure(*((x1->left)), old(_dryad_S0#0, *((x1->left))))); 
            assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#0, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#0, avl_reach(xl)))), @_vcc_ptr_eq_pure(*((x1->right)), old(_dryad_S0#0, *((x1->right))))); 
            assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#0, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#0, avl_reach(xl)))), ==(*((x1->key)), old(_dryad_S0#0, *((x1->key))))); 
            assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(_dryad_S0#0, a_node.key, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#0, avl_reach(xl)))), ==(*((x1->height)), old(_dryad_S0#0, *((x1->height))))); 
            assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(_dryad_S0#0, a_node.height, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#0, avl_reach(xl)))), @_vcc_ptr_eq_pure(*((x0->left)), old(_dryad_S0#0, *((x0->left))))); 
            assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#0, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#0, avl_reach(xl)))), @_vcc_ptr_eq_pure(*((x0->right)), old(_dryad_S0#0, *((x0->right))))); 
            assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#0, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#0, avl_reach(xl)))), ==(*((x0->key)), old(_dryad_S0#0, *((x0->key))))); 
            assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(_dryad_S0#0, a_node.key, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#0, avl_reach(xl)))), ==(*((x0->height)), old(_dryad_S0#0, *((x0->height))))); 
            assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(_dryad_S0#0, a_node.height, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(!(@_vcc_oset_in(xl, old(_dryad_S0#0, avl_reach(xl)))), @_vcc_ptr_eq_pure(*((xl->left)), old(_dryad_S0#0, *((xl->left))))); 
            assume !$oset_in($phys_ptr_cast(L#xl, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#0, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(xl, old(_dryad_S0#0, avl_reach(xl)))), @_vcc_ptr_eq_pure(*((xl->right)), old(_dryad_S0#0, *((xl->right))))); 
            assume !$oset_in($phys_ptr_cast(L#xl, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#0, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(xl, old(_dryad_S0#0, avl_reach(xl)))), ==(*((xl->key)), old(_dryad_S0#0, *((xl->key))))); 
            assume !$oset_in($phys_ptr_cast(L#xl, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)) == $rd_inv(_dryad_S0#0, a_node.key, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(!(@_vcc_oset_in(xl, old(_dryad_S0#0, avl_reach(xl)))), ==(*((xl->height)), old(_dryad_S0#0, *((xl->height))))); 
            assume !$oset_in($phys_ptr_cast(L#xl, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == $rd_inv(_dryad_S0#0, a_node.height, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(!(@_vcc_oset_in(xr, old(_dryad_S0#0, avl_reach(xl)))), @_vcc_ptr_eq_pure(*((xr->left)), old(_dryad_S0#0, *((xr->left))))); 
            assume !$oset_in($phys_ptr_cast(L#xr, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#0, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(xr, old(_dryad_S0#0, avl_reach(xl)))), @_vcc_ptr_eq_pure(*((xr->right)), old(_dryad_S0#0, *((xr->right))))); 
            assume !$oset_in($phys_ptr_cast(L#xr, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#0, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(xr, old(_dryad_S0#0, avl_reach(xl)))), ==(*((xr->key)), old(_dryad_S0#0, *((xr->key))))); 
            assume !$oset_in($phys_ptr_cast(L#xr, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)) == $rd_inv(_dryad_S0#0, a_node.key, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(!(@_vcc_oset_in(xr, old(_dryad_S0#0, avl_reach(xl)))), ==(*((xr->height)), old(_dryad_S0#0, *((xr->height))))); 
            assume !$oset_in($phys_ptr_cast(L#xr, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == $rd_inv(_dryad_S0#0, a_node.height, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(xl)))), @_vcc_ptr_eq_pure(*((x->left)), old(_dryad_S0#0, *((x->left))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#0, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(xl)))), @_vcc_ptr_eq_pure(*((x->right)), old(_dryad_S0#0, *((x->right))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#0, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(xl)))), ==(*((x->key)), old(_dryad_S0#0, *((x->key))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(_dryad_S0#0, a_node.key, $phys_ptr_cast(P#x, ^a_node));
            // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(xl)))), ==(*((x->height)), old(_dryad_S0#0, *((x->height))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#xl, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(_dryad_S0#0, a_node.height, $phys_ptr_cast(P#x, ^a_node));
            // _math \state _dryad_S2#2; 
            // _dryad_S2#2 := @_vcc_current_state(@state); 
            _dryad_S2#2 := $current_state($s);
            // _math \state stmtexpr3#21; 
            // stmtexpr3#21 := _dryad_S2#2; 
            stmtexpr3#21 := _dryad_S2#2;
            // assert @prim_writes_check((x->left)); 
            assert $writable_prim($s, #wrTime$3^78.3, $dot($phys_ptr_cast(P#x, ^a_node), a_node.left));
            // *(x->left) := new_left; 
            call $write_int(a_node.left, $phys_ptr_cast(P#x, ^a_node), $ptr_to_int($phys_ptr_cast(L#new_left, ^a_node)));
            assume $full_stop_ext(#tok$3^120.4, $s);
            // _math \state _dryad_S3#3; 
            // _dryad_S3#3 := @_vcc_current_state(@state); 
            _dryad_S3#3 := $current_state($s);
            // _math \state stmtexpr4#22; 
            // stmtexpr4#22 := _dryad_S3#3; 
            stmtexpr4#22 := _dryad_S3#3;
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(*((x->right)))))), ==(old(_dryad_S2#2, avl(*((x->right)))), old(_dryad_S3#3, avl(*((x->right)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(*((x->right)))))), ==(old(_dryad_S2#2, avl_reach(*((x->right)))), old(_dryad_S3#3, avl_reach(*((x->right)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_reach(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(*((x->right)))))), ==(old(_dryad_S2#2, avl_height(*((x->right)))), old(_dryad_S3#3, avl_height(*((x->right)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_height(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(*((x->right)))))), ==(old(_dryad_S2#2, avl_keys(*((x->right)))), old(_dryad_S3#3, avl_keys(*((x->right)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_keys(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_keys(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(*((x->right)))))), ==(old(_dryad_S2#2, avl_max_key(*((x->right)))), old(_dryad_S3#3, avl_max_key(*((x->right)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_max_key(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_max_key(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(*((x->right)))))), ==(old(_dryad_S2#2, avl_min_key(*((x->right)))), old(_dryad_S3#3, avl_min_key(*((x->right)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_min_key(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_min_key(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(new_left)))), ==(old(_dryad_S2#2, avl(new_left)), old(_dryad_S3#3, avl(new_left)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#new_left, ^a_node))) ==> F#avl(_dryad_S2#2, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl(_dryad_S3#3, $phys_ptr_cast(L#new_left, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(new_left)))), ==(old(_dryad_S2#2, avl_reach(new_left)), old(_dryad_S3#3, avl_reach(new_left)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#new_left, ^a_node))) ==> F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_reach(_dryad_S3#3, $phys_ptr_cast(L#new_left, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(new_left)))), ==(old(_dryad_S2#2, avl_height(new_left)), old(_dryad_S3#3, avl_height(new_left)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#new_left, ^a_node))) ==> F#avl_height(_dryad_S2#2, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height(_dryad_S3#3, $phys_ptr_cast(L#new_left, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(new_left)))), ==(old(_dryad_S2#2, avl_keys(new_left)), old(_dryad_S3#3, avl_keys(new_left)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#new_left, ^a_node))) ==> F#avl_keys(_dryad_S2#2, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_keys(_dryad_S3#3, $phys_ptr_cast(L#new_left, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(new_left)))), ==(old(_dryad_S2#2, avl_max_key(new_left)), old(_dryad_S3#3, avl_max_key(new_left)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#new_left, ^a_node))) ==> F#avl_max_key(_dryad_S2#2, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_max_key(_dryad_S3#3, $phys_ptr_cast(L#new_left, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(new_left)))), ==(old(_dryad_S2#2, avl_min_key(new_left)), old(_dryad_S3#3, avl_min_key(new_left)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#new_left, ^a_node))) ==> F#avl_min_key(_dryad_S2#2, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_min_key(_dryad_S3#3, $phys_ptr_cast(L#new_left, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(x1)))), ==(old(_dryad_S2#2, avl(x1)), old(_dryad_S3#3, avl(x1)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl(_dryad_S3#3, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(x1)))), ==(old(_dryad_S2#2, avl_reach(x1)), old(_dryad_S3#3, avl_reach(x1)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_reach(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_reach(_dryad_S3#3, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(x1)))), ==(old(_dryad_S2#2, avl_height(x1)), old(_dryad_S3#3, avl_height(x1)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_height(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height(_dryad_S3#3, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(x1)))), ==(old(_dryad_S2#2, avl_keys(x1)), old(_dryad_S3#3, avl_keys(x1)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_keys(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_keys(_dryad_S3#3, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(x1)))), ==(old(_dryad_S2#2, avl_max_key(x1)), old(_dryad_S3#3, avl_max_key(x1)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_max_key(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_max_key(_dryad_S3#3, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(x1)))), ==(old(_dryad_S2#2, avl_min_key(x1)), old(_dryad_S3#3, avl_min_key(x1)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_min_key(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_min_key(_dryad_S3#3, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(x0)))), ==(old(_dryad_S2#2, avl(x0)), old(_dryad_S3#3, avl(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl(_dryad_S3#3, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(x0)))), ==(old(_dryad_S2#2, avl_reach(x0)), old(_dryad_S3#3, avl_reach(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_reach(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_reach(_dryad_S3#3, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(x0)))), ==(old(_dryad_S2#2, avl_height(x0)), old(_dryad_S3#3, avl_height(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_height(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height(_dryad_S3#3, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(x0)))), ==(old(_dryad_S2#2, avl_keys(x0)), old(_dryad_S3#3, avl_keys(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_keys(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_keys(_dryad_S3#3, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(x0)))), ==(old(_dryad_S2#2, avl_max_key(x0)), old(_dryad_S3#3, avl_max_key(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_max_key(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_max_key(_dryad_S3#3, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(x0)))), ==(old(_dryad_S2#2, avl_min_key(x0)), old(_dryad_S3#3, avl_min_key(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_min_key(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_min_key(_dryad_S3#3, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(xl)))), ==(old(_dryad_S2#2, avl(xl)), old(_dryad_S3#3, avl(xl)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl(_dryad_S2#2, $phys_ptr_cast(L#xl, ^a_node)) == F#avl(_dryad_S3#3, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(xl)))), ==(old(_dryad_S2#2, avl_reach(xl)), old(_dryad_S3#3, avl_reach(xl)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_reach(_dryad_S3#3, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(xl)))), ==(old(_dryad_S2#2, avl_height(xl)), old(_dryad_S3#3, avl_height(xl)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_height(_dryad_S2#2, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height(_dryad_S3#3, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(xl)))), ==(old(_dryad_S2#2, avl_keys(xl)), old(_dryad_S3#3, avl_keys(xl)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_keys(_dryad_S2#2, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_keys(_dryad_S3#3, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(xl)))), ==(old(_dryad_S2#2, avl_max_key(xl)), old(_dryad_S3#3, avl_max_key(xl)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_max_key(_dryad_S2#2, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_max_key(_dryad_S3#3, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(xl)))), ==(old(_dryad_S2#2, avl_min_key(xl)), old(_dryad_S3#3, avl_min_key(xl)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_min_key(_dryad_S2#2, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_min_key(_dryad_S3#3, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(xr)))), ==(old(_dryad_S2#2, avl(xr)), old(_dryad_S3#3, avl(xr)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl(_dryad_S2#2, $phys_ptr_cast(L#xr, ^a_node)) == F#avl(_dryad_S3#3, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(xr)))), ==(old(_dryad_S2#2, avl_reach(xr)), old(_dryad_S3#3, avl_reach(xr)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_reach(_dryad_S3#3, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(xr)))), ==(old(_dryad_S2#2, avl_height(xr)), old(_dryad_S3#3, avl_height(xr)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_height(_dryad_S2#2, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height(_dryad_S3#3, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(xr)))), ==(old(_dryad_S2#2, avl_keys(xr)), old(_dryad_S3#3, avl_keys(xr)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_keys(_dryad_S2#2, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_keys(_dryad_S3#3, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(xr)))), ==(old(_dryad_S2#2, avl_max_key(xr)), old(_dryad_S3#3, avl_max_key(xr)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_max_key(_dryad_S2#2, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_max_key(_dryad_S3#3, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, avl_reach(xr)))), ==(old(_dryad_S2#2, avl_min_key(xr)), old(_dryad_S3#3, avl_min_key(xr)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#2, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_min_key(_dryad_S2#2, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_min_key(_dryad_S3#3, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, new_left)), @_vcc_ptr_eq_pure(*((new_left->left)), old(_dryad_S2#2, *((new_left->left))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_left, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#2, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, new_left)), @_vcc_ptr_eq_pure(*((new_left->right)), old(_dryad_S2#2, *((new_left->right))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_left, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#2, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, new_left)), ==(*((new_left->key)), old(_dryad_S2#2, *((new_left->key))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_left, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)) == $rd_inv(_dryad_S2#2, a_node.key, $phys_ptr_cast(L#new_left, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, new_left)), ==(*((new_left->height)), old(_dryad_S2#2, *((new_left->height))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_left, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == $rd_inv(_dryad_S2#2, a_node.height, $phys_ptr_cast(L#new_left, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), @_vcc_ptr_eq_pure(*((x1->left)), old(_dryad_S2#2, *((x1->left))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#2, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), @_vcc_ptr_eq_pure(*((x1->right)), old(_dryad_S2#2, *((x1->right))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#2, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), ==(*((x1->key)), old(_dryad_S2#2, *((x1->key))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(_dryad_S2#2, a_node.key, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), ==(*((x1->height)), old(_dryad_S2#2, *((x1->height))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(_dryad_S2#2, a_node.height, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), @_vcc_ptr_eq_pure(*((x0->left)), old(_dryad_S2#2, *((x0->left))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#2, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), @_vcc_ptr_eq_pure(*((x0->right)), old(_dryad_S2#2, *((x0->right))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#2, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), ==(*((x0->key)), old(_dryad_S2#2, *((x0->key))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(_dryad_S2#2, a_node.key, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), ==(*((x0->height)), old(_dryad_S2#2, *((x0->height))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(_dryad_S2#2, a_node.height, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, xl)), @_vcc_ptr_eq_pure(*((xl->left)), old(_dryad_S2#2, *((xl->left))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#xl, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#2, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, xl)), @_vcc_ptr_eq_pure(*((xl->right)), old(_dryad_S2#2, *((xl->right))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#xl, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#2, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, xl)), ==(*((xl->key)), old(_dryad_S2#2, *((xl->key))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#xl, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)) == $rd_inv(_dryad_S2#2, a_node.key, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, xl)), ==(*((xl->height)), old(_dryad_S2#2, *((xl->height))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#xl, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == $rd_inv(_dryad_S2#2, a_node.height, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, xr)), @_vcc_ptr_eq_pure(*((xr->left)), old(_dryad_S2#2, *((xr->left))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#xr, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#2, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, xr)), @_vcc_ptr_eq_pure(*((xr->right)), old(_dryad_S2#2, *((xr->right))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#xr, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#2, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, xr)), ==(*((xr->key)), old(_dryad_S2#2, *((xr->key))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#xr, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)) == $rd_inv(_dryad_S2#2, a_node.key, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, xr)), ==(*((xr->height)), old(_dryad_S2#2, *((xr->height))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#xr, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == $rd_inv(_dryad_S2#2, a_node.height, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl(new_left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((new_left->left))), avl(*((new_left->right)))), unchecked!(@_vcc_oset_in(new_left, @_vcc_oset_union(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))))), unchecked!(@_vcc_intset_in(*((new_left->key)), @_vcc_intset_union(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))))), @_vcc_oset_disjoint(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))), @_vcc_intset_disjoint(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))), ==>(@_vcc_ptr_neq_null(*((new_left->left))), <(avl_max_key(*((new_left->left))), *((new_left->key))))), ==>(@_vcc_ptr_neq_null(*((new_left->right))), <(*((new_left->key)), avl_min_key(*((new_left->right)))))), ||(||(&&(==(avl_height(*((new_left->left))), avl_height(*((new_left->right)))), ==(*((new_left->height)), +(avl_height(*((new_left->left))), 1))), &&(==(avl_height(*((new_left->left))), +(avl_height(*((new_left->right))), 1)), ==(*((new_left->height)), +(avl_height(*((new_left->left))), 1)))), &&(==(avl_height(*((new_left->right))), +(avl_height(*((new_left->left))), 1)), ==(*((new_left->height)), +(avl_height(*((new_left->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#new_left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#new_left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_reach(new_left), @_vcc_oset_union_one1(new_left, @_vcc_oset_union(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#new_left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#new_left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_height(new_left), @ite(>(avl_height(*((new_left->left))), avl_height(*((new_left->right)))), +(avl_height(*((new_left->left))), 1), +(avl_height(*((new_left->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#new_left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_keys(new_left), @_vcc_intset_union(@_vcc_intset_singleton(*((new_left->key))), @_vcc_intset_union(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#new_left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), @\int_max(avl_max_key(*((new_left->left))), avl_max_key(*((new_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_eq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), avl_max_key(*((new_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), avl_max_key(*((new_left->right)))))))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), @\int_min(avl_min_key(*((new_left->left))), avl_min_key(*((new_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_eq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), avl_min_key(*((new_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), avl_min_key(*((new_left->right)))))))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl(xl), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((xl->left))), avl(*((xl->right)))), unchecked!(@_vcc_oset_in(xl, @_vcc_oset_union(avl_reach(*((xl->left))), avl_reach(*((xl->right))))))), unchecked!(@_vcc_intset_in(*((xl->key)), @_vcc_intset_union(avl_keys(*((xl->left))), avl_keys(*((xl->right))))))), @_vcc_oset_disjoint(avl_reach(*((xl->left))), avl_reach(*((xl->right))))), @_vcc_intset_disjoint(avl_keys(*((xl->left))), avl_keys(*((xl->right))))), ==>(@_vcc_ptr_neq_null(*((xl->left))), <(avl_max_key(*((xl->left))), *((xl->key))))), ==>(@_vcc_ptr_neq_null(*((xl->right))), <(*((xl->key)), avl_min_key(*((xl->right)))))), ||(||(&&(==(avl_height(*((xl->left))), avl_height(*((xl->right)))), ==(*((xl->height)), +(avl_height(*((xl->left))), 1))), &&(==(avl_height(*((xl->left))), +(avl_height(*((xl->right))), 1)), ==(*((xl->height)), +(avl_height(*((xl->left))), 1)))), &&(==(avl_height(*((xl->right))), +(avl_height(*((xl->left))), 1)), ==(*((xl->height)), +(avl_height(*((xl->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#xl, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#xl, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_reach(xl), @_vcc_oset_union_one1(xl, @_vcc_oset_union(avl_reach(*((xl->left))), avl_reach(*((xl->right))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#xl, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#xl, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_height(xl), @ite(>(avl_height(*((xl->left))), avl_height(*((xl->right)))), +(avl_height(*((xl->left))), 1), +(avl_height(*((xl->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#xl, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_keys(xl), @_vcc_intset_union(@_vcc_intset_singleton(*((xl->key))), @_vcc_intset_union(avl_keys(*((xl->left))), avl_keys(*((xl->right))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#xl, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), @\int_max(avl_max_key(*((xl->left))), avl_max_key(*((xl->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_eq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), avl_max_key(*((xl->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), avl_max_key(*((xl->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), @\int_min(avl_min_key(*((xl->left))), avl_min_key(*((xl->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_eq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), avl_min_key(*((xl->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), avl_min_key(*((xl->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl(xr), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((xr->left))), avl(*((xr->right)))), unchecked!(@_vcc_oset_in(xr, @_vcc_oset_union(avl_reach(*((xr->left))), avl_reach(*((xr->right))))))), unchecked!(@_vcc_intset_in(*((xr->key)), @_vcc_intset_union(avl_keys(*((xr->left))), avl_keys(*((xr->right))))))), @_vcc_oset_disjoint(avl_reach(*((xr->left))), avl_reach(*((xr->right))))), @_vcc_intset_disjoint(avl_keys(*((xr->left))), avl_keys(*((xr->right))))), ==>(@_vcc_ptr_neq_null(*((xr->left))), <(avl_max_key(*((xr->left))), *((xr->key))))), ==>(@_vcc_ptr_neq_null(*((xr->right))), <(*((xr->key)), avl_min_key(*((xr->right)))))), ||(||(&&(==(avl_height(*((xr->left))), avl_height(*((xr->right)))), ==(*((xr->height)), +(avl_height(*((xr->left))), 1))), &&(==(avl_height(*((xr->left))), +(avl_height(*((xr->right))), 1)), ==(*((xr->height)), +(avl_height(*((xr->left))), 1)))), &&(==(avl_height(*((xr->right))), +(avl_height(*((xr->left))), 1)), ==(*((xr->height)), +(avl_height(*((xr->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#xr, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#xr, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_reach(xr), @_vcc_oset_union_one1(xr, @_vcc_oset_union(avl_reach(*((xr->left))), avl_reach(*((xr->right))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#xr, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#xr, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_height(xr), @ite(>(avl_height(*((xr->left))), avl_height(*((xr->right)))), +(avl_height(*((xr->left))), 1), +(avl_height(*((xr->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#xr, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_keys(xr), @_vcc_intset_union(@_vcc_intset_singleton(*((xr->key))), @_vcc_intset_union(avl_keys(*((xr->left))), avl_keys(*((xr->right))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#xr, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), @\int_max(avl_max_key(*((xr->left))), avl_max_key(*((xr->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_eq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), avl_max_key(*((xr->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), avl_max_key(*((xr->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), @\int_min(avl_min_key(*((xr->left))), avl_min_key(*((xr->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_eq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), avl_min_key(*((xr->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), avl_min_key(*((xr->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl(new_left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((new_left->left))), avl(*((new_left->right)))), unchecked!(@_vcc_oset_in(new_left, @_vcc_oset_union(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))))), unchecked!(@_vcc_intset_in(*((new_left->key)), @_vcc_intset_union(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))))), @_vcc_oset_disjoint(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))), @_vcc_intset_disjoint(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))), ==>(@_vcc_ptr_neq_null(*((new_left->left))), <(avl_max_key(*((new_left->left))), *((new_left->key))))), ==>(@_vcc_ptr_neq_null(*((new_left->right))), <(*((new_left->key)), avl_min_key(*((new_left->right)))))), ||(||(&&(==(avl_height(*((new_left->left))), avl_height(*((new_left->right)))), ==(*((new_left->height)), +(avl_height(*((new_left->left))), 1))), &&(==(avl_height(*((new_left->left))), +(avl_height(*((new_left->right))), 1)), ==(*((new_left->height)), +(avl_height(*((new_left->left))), 1)))), &&(==(avl_height(*((new_left->right))), +(avl_height(*((new_left->left))), 1)), ==(*((new_left->height)), +(avl_height(*((new_left->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#new_left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#new_left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_reach(new_left), @_vcc_oset_union_one1(new_left, @_vcc_oset_union(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#new_left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#new_left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_height(new_left), @ite(>(avl_height(*((new_left->left))), avl_height(*((new_left->right)))), +(avl_height(*((new_left->left))), 1), +(avl_height(*((new_left->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#new_left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_keys(new_left), @_vcc_intset_union(@_vcc_intset_singleton(*((new_left->key))), @_vcc_intset_union(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#new_left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), @\int_max(avl_max_key(*((new_left->left))), avl_max_key(*((new_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_eq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), avl_max_key(*((new_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), avl_max_key(*((new_left->right)))))))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), @\int_min(avl_min_key(*((new_left->left))), avl_min_key(*((new_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_eq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), avl_min_key(*((new_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), avl_min_key(*((new_left->right)))))))); 
            assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
            // struct a_node* res_avl_balance#2; 
            // res_avl_balance#2 := avl_balance(x); 
            call res_avl_balance#2 := avl_balance($phys_ptr_cast(P#x, ^a_node));
            assume $full_stop_ext(#tok$3^122.11, $s);
            // return res_avl_balance#2; 
            $result := $phys_ptr_cast(res_avl_balance#2, ^a_node);
            assume true;
            assert $position_marker();
            goto #exit;
        }
        else
        {
          anon3:
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl(xl), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((xl->left))), avl(*((xl->right)))), unchecked!(@_vcc_oset_in(xl, @_vcc_oset_union(avl_reach(*((xl->left))), avl_reach(*((xl->right))))))), unchecked!(@_vcc_intset_in(*((xl->key)), @_vcc_intset_union(avl_keys(*((xl->left))), avl_keys(*((xl->right))))))), @_vcc_oset_disjoint(avl_reach(*((xl->left))), avl_reach(*((xl->right))))), @_vcc_intset_disjoint(avl_keys(*((xl->left))), avl_keys(*((xl->right))))), ==>(@_vcc_ptr_neq_null(*((xl->left))), <(avl_max_key(*((xl->left))), *((xl->key))))), ==>(@_vcc_ptr_neq_null(*((xl->right))), <(*((xl->key)), avl_min_key(*((xl->right)))))), ||(||(&&(==(avl_height(*((xl->left))), avl_height(*((xl->right)))), ==(*((xl->height)), +(avl_height(*((xl->left))), 1))), &&(==(avl_height(*((xl->left))), +(avl_height(*((xl->right))), 1)), ==(*((xl->height)), +(avl_height(*((xl->left))), 1)))), &&(==(avl_height(*((xl->right))), +(avl_height(*((xl->left))), 1)), ==(*((xl->height)), +(avl_height(*((xl->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#xl, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#xl, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_reach(xl), @_vcc_oset_union_one1(xl, @_vcc_oset_union(avl_reach(*((xl->left))), avl_reach(*((xl->right))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#xl, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#xl, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_height(xl), @ite(>(avl_height(*((xl->left))), avl_height(*((xl->right)))), +(avl_height(*((xl->left))), 1), +(avl_height(*((xl->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#xl, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_keys(xl), @_vcc_intset_union(@_vcc_intset_singleton(*((xl->key))), @_vcc_intset_union(avl_keys(*((xl->left))), avl_keys(*((xl->right))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#xl, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), @\int_max(avl_max_key(*((xl->left))), avl_max_key(*((xl->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_eq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), avl_max_key(*((xl->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), avl_max_key(*((xl->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), @\int_min(avl_min_key(*((xl->left))), avl_min_key(*((xl->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_eq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), avl_min_key(*((xl->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), avl_min_key(*((xl->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl(xr), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((xr->left))), avl(*((xr->right)))), unchecked!(@_vcc_oset_in(xr, @_vcc_oset_union(avl_reach(*((xr->left))), avl_reach(*((xr->right))))))), unchecked!(@_vcc_intset_in(*((xr->key)), @_vcc_intset_union(avl_keys(*((xr->left))), avl_keys(*((xr->right))))))), @_vcc_oset_disjoint(avl_reach(*((xr->left))), avl_reach(*((xr->right))))), @_vcc_intset_disjoint(avl_keys(*((xr->left))), avl_keys(*((xr->right))))), ==>(@_vcc_ptr_neq_null(*((xr->left))), <(avl_max_key(*((xr->left))), *((xr->key))))), ==>(@_vcc_ptr_neq_null(*((xr->right))), <(*((xr->key)), avl_min_key(*((xr->right)))))), ||(||(&&(==(avl_height(*((xr->left))), avl_height(*((xr->right)))), ==(*((xr->height)), +(avl_height(*((xr->left))), 1))), &&(==(avl_height(*((xr->left))), +(avl_height(*((xr->right))), 1)), ==(*((xr->height)), +(avl_height(*((xr->left))), 1)))), &&(==(avl_height(*((xr->right))), +(avl_height(*((xr->left))), 1)), ==(*((xr->height)), +(avl_height(*((xr->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#xr, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#xr, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_reach(xr), @_vcc_oset_union_one1(xr, @_vcc_oset_union(avl_reach(*((xr->left))), avl_reach(*((xr->right))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#xr, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#xr, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_height(xr), @ite(>(avl_height(*((xr->left))), avl_height(*((xr->right)))), +(avl_height(*((xr->left))), 1), +(avl_height(*((xr->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#xr, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_keys(xr), @_vcc_intset_union(@_vcc_intset_singleton(*((xr->key))), @_vcc_intset_union(avl_keys(*((xr->left))), avl_keys(*((xr->right))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#xr, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), @\int_max(avl_max_key(*((xr->left))), avl_max_key(*((xr->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_eq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), avl_max_key(*((xr->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), avl_max_key(*((xr->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), @\int_min(avl_min_key(*((xr->left))), avl_min_key(*((xr->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_eq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), avl_min_key(*((xr->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), avl_min_key(*((xr->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // struct a_node* new_right; 
            // _math \state _dryad_S0#4; 
            // _dryad_S0#4 := @_vcc_current_state(@state); 
            _dryad_S0#4 := $current_state($s);
            // _math \state stmtexpr0#23; 
            // stmtexpr0#23 := _dryad_S0#4; 
            stmtexpr0#23 := _dryad_S0#4;
            // non-pure function
            // new_right := avl_insert(xr, k); 
            call L#new_right := avl_insert($phys_ptr_cast(L#xr, ^a_node), P#k);
            assume $full_stop_ext(#tok$3^124.26, $s);
            // _math \state _dryad_S1#5; 
            // _dryad_S1#5 := @_vcc_current_state(@state); 
            _dryad_S1#5 := $current_state($s);
            // _math \state stmtexpr1#24; 
            // stmtexpr1#24 := _dryad_S1#5; 
            stmtexpr1#24 := _dryad_S1#5;
            // assume @_vcc_oset_disjoint(avl_reach(new_right), @_vcc_oset_diff(_dryad_G1, old(_dryad_S0#4, avl_reach(xr)))); 
            assume $oset_disjoint(F#avl_reach($s, $phys_ptr_cast(L#new_right, ^a_node)), $oset_diff(SL#_dryad_G1, F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))));
            // _math \oset res_avl_reach#3; 
            // res_avl_reach#3 := avl_reach(new_right); 
            call res_avl_reach#3 := avl_reach($phys_ptr_cast(L#new_right, ^a_node));
            assume $full_stop_ext(#tok$4^0.0, $s);
            // _dryad_G1 := @_vcc_oset_union(res_avl_reach#3, @_vcc_oset_diff(_dryad_G1, pure(old(_dryad_S0#4, avl_reach(xr))))); 
            SL#_dryad_G1 := $oset_union(res_avl_reach#3, $oset_diff(SL#_dryad_G1, F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))));
            // _math \oset stmtexpr2#25; 
            // stmtexpr2#25 := _dryad_G1; 
            stmtexpr2#25 := SL#_dryad_G1;
            // assume ==(glob_reach(), _dryad_G1); 
            assume F#glob_reach() == SL#_dryad_G1;
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x1))), ==(old(_dryad_S0#4, avl(x1)), old(_dryad_S1#5, avl(x1)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl(_dryad_S1#5, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x1))), ==(old(_dryad_S0#4, avl_reach(x1)), old(_dryad_S1#5, avl_reach(x1)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_reach(_dryad_S1#5, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x1))), ==(old(_dryad_S0#4, avl_height(x1)), old(_dryad_S1#5, avl_height(x1)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_height(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height(_dryad_S1#5, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x1))), ==(old(_dryad_S0#4, avl_keys(x1)), old(_dryad_S1#5, avl_keys(x1)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_keys(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_keys(_dryad_S1#5, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x1))), ==(old(_dryad_S0#4, avl_max_key(x1)), old(_dryad_S1#5, avl_max_key(x1)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_max_key(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_max_key(_dryad_S1#5, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x1))), ==(old(_dryad_S0#4, avl_min_key(x1)), old(_dryad_S1#5, avl_min_key(x1)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_min_key(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_min_key(_dryad_S1#5, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x0))), ==(old(_dryad_S0#4, avl(x0)), old(_dryad_S1#5, avl(x0)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl(_dryad_S1#5, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x0))), ==(old(_dryad_S0#4, avl_reach(x0)), old(_dryad_S1#5, avl_reach(x0)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_reach(_dryad_S1#5, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x0))), ==(old(_dryad_S0#4, avl_height(x0)), old(_dryad_S1#5, avl_height(x0)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_height(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height(_dryad_S1#5, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x0))), ==(old(_dryad_S0#4, avl_keys(x0)), old(_dryad_S1#5, avl_keys(x0)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_keys(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_keys(_dryad_S1#5, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x0))), ==(old(_dryad_S0#4, avl_max_key(x0)), old(_dryad_S1#5, avl_max_key(x0)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_max_key(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_max_key(_dryad_S1#5, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x0))), ==(old(_dryad_S0#4, avl_min_key(x0)), old(_dryad_S1#5, avl_min_key(x0)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_min_key(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_min_key(_dryad_S1#5, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(xl))), ==(old(_dryad_S0#4, avl(xl)), old(_dryad_S1#5, avl(xl)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl(_dryad_S0#4, $phys_ptr_cast(L#xl, ^a_node)) == F#avl(_dryad_S1#5, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(xl))), ==(old(_dryad_S0#4, avl_reach(xl)), old(_dryad_S1#5, avl_reach(xl)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_reach(_dryad_S1#5, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(xl))), ==(old(_dryad_S0#4, avl_height(xl)), old(_dryad_S1#5, avl_height(xl)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_height(_dryad_S0#4, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height(_dryad_S1#5, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(xl))), ==(old(_dryad_S0#4, avl_keys(xl)), old(_dryad_S1#5, avl_keys(xl)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_keys(_dryad_S0#4, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_keys(_dryad_S1#5, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(xl))), ==(old(_dryad_S0#4, avl_max_key(xl)), old(_dryad_S1#5, avl_max_key(xl)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_max_key(_dryad_S0#4, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_max_key(_dryad_S1#5, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(xl))), ==(old(_dryad_S0#4, avl_min_key(xl)), old(_dryad_S1#5, avl_min_key(xl)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_min_key(_dryad_S0#4, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_min_key(_dryad_S1#5, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(xr))), ==(old(_dryad_S0#4, avl(xr)), old(_dryad_S1#5, avl(xr)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)) == F#avl(_dryad_S1#5, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(xr))), ==(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S1#5, avl_reach(xr)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_reach(_dryad_S1#5, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(xr))), ==(old(_dryad_S0#4, avl_height(xr)), old(_dryad_S1#5, avl_height(xr)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_height(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height(_dryad_S1#5, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(xr))), ==(old(_dryad_S0#4, avl_keys(xr)), old(_dryad_S1#5, avl_keys(xr)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_keys(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_keys(_dryad_S1#5, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(xr))), ==(old(_dryad_S0#4, avl_max_key(xr)), old(_dryad_S1#5, avl_max_key(xr)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_max_key(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_max_key(_dryad_S1#5, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(xr))), ==(old(_dryad_S0#4, avl_min_key(xr)), old(_dryad_S1#5, avl_min_key(xr)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_min_key(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_min_key(_dryad_S1#5, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x))), ==(old(_dryad_S0#4, avl(x)), old(_dryad_S1#5, avl(x)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node)) == F#avl(_dryad_S1#5, $phys_ptr_cast(P#x, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x))), ==(old(_dryad_S0#4, avl_reach(x)), old(_dryad_S1#5, avl_reach(x)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_reach(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_reach(_dryad_S1#5, $phys_ptr_cast(P#x, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x))), ==(old(_dryad_S0#4, avl_height(x)), old(_dryad_S1#5, avl_height(x)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_height(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height(_dryad_S1#5, $phys_ptr_cast(P#x, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x))), ==(old(_dryad_S0#4, avl_keys(x)), old(_dryad_S1#5, avl_keys(x)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_keys(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_keys(_dryad_S1#5, $phys_ptr_cast(P#x, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x))), ==(old(_dryad_S0#4, avl_max_key(x)), old(_dryad_S1#5, avl_max_key(x)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_max_key(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_max_key(_dryad_S1#5, $phys_ptr_cast(P#x, ^a_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#4, avl_reach(xr)), old(_dryad_S0#4, avl_reach(x))), ==(old(_dryad_S0#4, avl_min_key(x)), old(_dryad_S1#5, avl_min_key(x)))); 
            assume $oset_disjoint(F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node)), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_min_key(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_min_key(_dryad_S1#5, $phys_ptr_cast(P#x, ^a_node));
            // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl(new_right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((new_right->left))), avl(*((new_right->right)))), unchecked!(@_vcc_oset_in(new_right, @_vcc_oset_union(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))))), unchecked!(@_vcc_intset_in(*((new_right->key)), @_vcc_intset_union(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))))), @_vcc_oset_disjoint(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))), @_vcc_intset_disjoint(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))), ==>(@_vcc_ptr_neq_null(*((new_right->left))), <(avl_max_key(*((new_right->left))), *((new_right->key))))), ==>(@_vcc_ptr_neq_null(*((new_right->right))), <(*((new_right->key)), avl_min_key(*((new_right->right)))))), ||(||(&&(==(avl_height(*((new_right->left))), avl_height(*((new_right->right)))), ==(*((new_right->height)), +(avl_height(*((new_right->left))), 1))), &&(==(avl_height(*((new_right->left))), +(avl_height(*((new_right->right))), 1)), ==(*((new_right->height)), +(avl_height(*((new_right->left))), 1)))), &&(==(avl_height(*((new_right->right))), +(avl_height(*((new_right->left))), 1)), ==(*((new_right->height)), +(avl_height(*((new_right->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#new_right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#new_right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_reach(new_right), @_vcc_oset_union_one1(new_right, @_vcc_oset_union(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#new_right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#new_right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_height(new_right), @ite(>(avl_height(*((new_right->left))), avl_height(*((new_right->right)))), +(avl_height(*((new_right->left))), 1), +(avl_height(*((new_right->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#new_right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_keys(new_right), @_vcc_intset_union(@_vcc_intset_singleton(*((new_right->key))), @_vcc_intset_union(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#new_right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), @\int_max(avl_max_key(*((new_right->left))), avl_max_key(*((new_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_eq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), avl_max_key(*((new_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), avl_max_key(*((new_right->right)))))))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), @\int_min(avl_min_key(*((new_right->left))), avl_min_key(*((new_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_eq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), avl_min_key(*((new_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), avl_min_key(*((new_right->right)))))))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl(xl), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((xl->left))), avl(*((xl->right)))), unchecked!(@_vcc_oset_in(xl, @_vcc_oset_union(avl_reach(*((xl->left))), avl_reach(*((xl->right))))))), unchecked!(@_vcc_intset_in(*((xl->key)), @_vcc_intset_union(avl_keys(*((xl->left))), avl_keys(*((xl->right))))))), @_vcc_oset_disjoint(avl_reach(*((xl->left))), avl_reach(*((xl->right))))), @_vcc_intset_disjoint(avl_keys(*((xl->left))), avl_keys(*((xl->right))))), ==>(@_vcc_ptr_neq_null(*((xl->left))), <(avl_max_key(*((xl->left))), *((xl->key))))), ==>(@_vcc_ptr_neq_null(*((xl->right))), <(*((xl->key)), avl_min_key(*((xl->right)))))), ||(||(&&(==(avl_height(*((xl->left))), avl_height(*((xl->right)))), ==(*((xl->height)), +(avl_height(*((xl->left))), 1))), &&(==(avl_height(*((xl->left))), +(avl_height(*((xl->right))), 1)), ==(*((xl->height)), +(avl_height(*((xl->left))), 1)))), &&(==(avl_height(*((xl->right))), +(avl_height(*((xl->left))), 1)), ==(*((xl->height)), +(avl_height(*((xl->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#xl, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#xl, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_reach(xl), @_vcc_oset_union_one1(xl, @_vcc_oset_union(avl_reach(*((xl->left))), avl_reach(*((xl->right))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#xl, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#xl, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_height(xl), @ite(>(avl_height(*((xl->left))), avl_height(*((xl->right)))), +(avl_height(*((xl->left))), 1), +(avl_height(*((xl->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#xl, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_keys(xl), @_vcc_intset_union(@_vcc_intset_singleton(*((xl->key))), @_vcc_intset_union(avl_keys(*((xl->left))), avl_keys(*((xl->right))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#xl, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), @\int_max(avl_max_key(*((xl->left))), avl_max_key(*((xl->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_eq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), avl_max_key(*((xl->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), avl_max_key(*((xl->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), @\int_min(avl_min_key(*((xl->left))), avl_min_key(*((xl->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_eq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), avl_min_key(*((xl->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), avl_min_key(*((xl->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl(xr), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((xr->left))), avl(*((xr->right)))), unchecked!(@_vcc_oset_in(xr, @_vcc_oset_union(avl_reach(*((xr->left))), avl_reach(*((xr->right))))))), unchecked!(@_vcc_intset_in(*((xr->key)), @_vcc_intset_union(avl_keys(*((xr->left))), avl_keys(*((xr->right))))))), @_vcc_oset_disjoint(avl_reach(*((xr->left))), avl_reach(*((xr->right))))), @_vcc_intset_disjoint(avl_keys(*((xr->left))), avl_keys(*((xr->right))))), ==>(@_vcc_ptr_neq_null(*((xr->left))), <(avl_max_key(*((xr->left))), *((xr->key))))), ==>(@_vcc_ptr_neq_null(*((xr->right))), <(*((xr->key)), avl_min_key(*((xr->right)))))), ||(||(&&(==(avl_height(*((xr->left))), avl_height(*((xr->right)))), ==(*((xr->height)), +(avl_height(*((xr->left))), 1))), &&(==(avl_height(*((xr->left))), +(avl_height(*((xr->right))), 1)), ==(*((xr->height)), +(avl_height(*((xr->left))), 1)))), &&(==(avl_height(*((xr->right))), +(avl_height(*((xr->left))), 1)), ==(*((xr->height)), +(avl_height(*((xr->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#xr, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#xr, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_reach(xr), @_vcc_oset_union_one1(xr, @_vcc_oset_union(avl_reach(*((xr->left))), avl_reach(*((xr->right))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#xr, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#xr, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_height(xr), @ite(>(avl_height(*((xr->left))), avl_height(*((xr->right)))), +(avl_height(*((xr->left))), 1), +(avl_height(*((xr->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#xr, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_keys(xr), @_vcc_intset_union(@_vcc_intset_singleton(*((xr->key))), @_vcc_intset_union(avl_keys(*((xr->left))), avl_keys(*((xr->right))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#xr, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), @\int_max(avl_max_key(*((xr->left))), avl_max_key(*((xr->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_eq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), avl_max_key(*((xr->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), avl_max_key(*((xr->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), @\int_min(avl_min_key(*((xr->left))), avl_min_key(*((xr->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_eq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), avl_min_key(*((xr->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), avl_min_key(*((xr->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#4, avl_reach(xr)))), @_vcc_ptr_eq_pure(*((x1->left)), old(_dryad_S0#4, *((x1->left))))); 
            assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#4, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#4, avl_reach(xr)))), @_vcc_ptr_eq_pure(*((x1->right)), old(_dryad_S0#4, *((x1->right))))); 
            assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#4, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#4, avl_reach(xr)))), ==(*((x1->key)), old(_dryad_S0#4, *((x1->key))))); 
            assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(_dryad_S0#4, a_node.key, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#4, avl_reach(xr)))), ==(*((x1->height)), old(_dryad_S0#4, *((x1->height))))); 
            assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(_dryad_S0#4, a_node.height, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#4, avl_reach(xr)))), @_vcc_ptr_eq_pure(*((x0->left)), old(_dryad_S0#4, *((x0->left))))); 
            assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#4, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#4, avl_reach(xr)))), @_vcc_ptr_eq_pure(*((x0->right)), old(_dryad_S0#4, *((x0->right))))); 
            assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#4, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#4, avl_reach(xr)))), ==(*((x0->key)), old(_dryad_S0#4, *((x0->key))))); 
            assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(_dryad_S0#4, a_node.key, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#4, avl_reach(xr)))), ==(*((x0->height)), old(_dryad_S0#4, *((x0->height))))); 
            assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(_dryad_S0#4, a_node.height, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(!(@_vcc_oset_in(xl, old(_dryad_S0#4, avl_reach(xr)))), @_vcc_ptr_eq_pure(*((xl->left)), old(_dryad_S0#4, *((xl->left))))); 
            assume !$oset_in($phys_ptr_cast(L#xl, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#4, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(xl, old(_dryad_S0#4, avl_reach(xr)))), @_vcc_ptr_eq_pure(*((xl->right)), old(_dryad_S0#4, *((xl->right))))); 
            assume !$oset_in($phys_ptr_cast(L#xl, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#4, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(xl, old(_dryad_S0#4, avl_reach(xr)))), ==(*((xl->key)), old(_dryad_S0#4, *((xl->key))))); 
            assume !$oset_in($phys_ptr_cast(L#xl, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)) == $rd_inv(_dryad_S0#4, a_node.key, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(!(@_vcc_oset_in(xl, old(_dryad_S0#4, avl_reach(xr)))), ==(*((xl->height)), old(_dryad_S0#4, *((xl->height))))); 
            assume !$oset_in($phys_ptr_cast(L#xl, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == $rd_inv(_dryad_S0#4, a_node.height, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(!(@_vcc_oset_in(xr, old(_dryad_S0#4, avl_reach(xr)))), @_vcc_ptr_eq_pure(*((xr->left)), old(_dryad_S0#4, *((xr->left))))); 
            assume !$oset_in($phys_ptr_cast(L#xr, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#4, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(xr, old(_dryad_S0#4, avl_reach(xr)))), @_vcc_ptr_eq_pure(*((xr->right)), old(_dryad_S0#4, *((xr->right))))); 
            assume !$oset_in($phys_ptr_cast(L#xr, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#4, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(xr, old(_dryad_S0#4, avl_reach(xr)))), ==(*((xr->key)), old(_dryad_S0#4, *((xr->key))))); 
            assume !$oset_in($phys_ptr_cast(L#xr, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)) == $rd_inv(_dryad_S0#4, a_node.key, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(!(@_vcc_oset_in(xr, old(_dryad_S0#4, avl_reach(xr)))), ==(*((xr->height)), old(_dryad_S0#4, *((xr->height))))); 
            assume !$oset_in($phys_ptr_cast(L#xr, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == $rd_inv(_dryad_S0#4, a_node.height, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#4, avl_reach(xr)))), @_vcc_ptr_eq_pure(*((x->left)), old(_dryad_S0#4, *((x->left))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#4, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#4, avl_reach(xr)))), @_vcc_ptr_eq_pure(*((x->right)), old(_dryad_S0#4, *((x->right))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#4, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#4, avl_reach(xr)))), ==(*((x->key)), old(_dryad_S0#4, *((x->key))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(_dryad_S0#4, a_node.key, $phys_ptr_cast(P#x, ^a_node));
            // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#4, avl_reach(xr)))), ==(*((x->height)), old(_dryad_S0#4, *((x->height))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#xr, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(_dryad_S0#4, a_node.height, $phys_ptr_cast(P#x, ^a_node));
            // _math \state _dryad_S2#6; 
            // _dryad_S2#6 := @_vcc_current_state(@state); 
            _dryad_S2#6 := $current_state($s);
            // _math \state stmtexpr3#26; 
            // stmtexpr3#26 := _dryad_S2#6; 
            stmtexpr3#26 := _dryad_S2#6;
            // assert @prim_writes_check((x->right)); 
            assert $writable_prim($s, #wrTime$3^78.3, $dot($phys_ptr_cast(P#x, ^a_node), a_node.right));
            // *(x->right) := new_right; 
            call $write_int(a_node.right, $phys_ptr_cast(P#x, ^a_node), $ptr_to_int($phys_ptr_cast(L#new_right, ^a_node)));
            assume $full_stop_ext(#tok$3^126.4, $s);
            // _math \state _dryad_S3#7; 
            // _dryad_S3#7 := @_vcc_current_state(@state); 
            _dryad_S3#7 := $current_state($s);
            // _math \state stmtexpr4#27; 
            // stmtexpr4#27 := _dryad_S3#7; 
            stmtexpr4#27 := _dryad_S3#7;
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(*((x->left)))))), ==(old(_dryad_S2#6, avl(*((x->left)))), old(_dryad_S3#7, avl(*((x->left)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $rd_phys_ptr(_dryad_S2#6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl(_dryad_S2#6, $rd_phys_ptr(_dryad_S2#6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl(_dryad_S3#7, $rd_phys_ptr(_dryad_S3#7, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(*((x->left)))))), ==(old(_dryad_S2#6, avl_reach(*((x->left)))), old(_dryad_S3#7, avl_reach(*((x->left)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $rd_phys_ptr(_dryad_S2#6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_reach(_dryad_S2#6, $rd_phys_ptr(_dryad_S2#6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_reach(_dryad_S3#7, $rd_phys_ptr(_dryad_S3#7, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(*((x->left)))))), ==(old(_dryad_S2#6, avl_height(*((x->left)))), old(_dryad_S3#7, avl_height(*((x->left)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $rd_phys_ptr(_dryad_S2#6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_height(_dryad_S2#6, $rd_phys_ptr(_dryad_S2#6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(_dryad_S3#7, $rd_phys_ptr(_dryad_S3#7, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(*((x->left)))))), ==(old(_dryad_S2#6, avl_keys(*((x->left)))), old(_dryad_S3#7, avl_keys(*((x->left)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $rd_phys_ptr(_dryad_S2#6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_keys(_dryad_S2#6, $rd_phys_ptr(_dryad_S2#6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_keys(_dryad_S3#7, $rd_phys_ptr(_dryad_S3#7, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(*((x->left)))))), ==(old(_dryad_S2#6, avl_max_key(*((x->left)))), old(_dryad_S3#7, avl_max_key(*((x->left)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $rd_phys_ptr(_dryad_S2#6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_max_key(_dryad_S2#6, $rd_phys_ptr(_dryad_S2#6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_max_key(_dryad_S3#7, $rd_phys_ptr(_dryad_S3#7, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(*((x->left)))))), ==(old(_dryad_S2#6, avl_min_key(*((x->left)))), old(_dryad_S3#7, avl_min_key(*((x->left)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $rd_phys_ptr(_dryad_S2#6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_min_key(_dryad_S2#6, $rd_phys_ptr(_dryad_S2#6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_min_key(_dryad_S3#7, $rd_phys_ptr(_dryad_S3#7, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(new_right)))), ==(old(_dryad_S2#6, avl(new_right)), old(_dryad_S3#7, avl(new_right)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl(_dryad_S2#6, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl(_dryad_S3#7, $phys_ptr_cast(L#new_right, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(new_right)))), ==(old(_dryad_S2#6, avl_reach(new_right)), old(_dryad_S3#7, avl_reach(new_right)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_reach(_dryad_S3#7, $phys_ptr_cast(L#new_right, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(new_right)))), ==(old(_dryad_S2#6, avl_height(new_right)), old(_dryad_S3#7, avl_height(new_right)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_height(_dryad_S2#6, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height(_dryad_S3#7, $phys_ptr_cast(L#new_right, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(new_right)))), ==(old(_dryad_S2#6, avl_keys(new_right)), old(_dryad_S3#7, avl_keys(new_right)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_keys(_dryad_S2#6, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_keys(_dryad_S3#7, $phys_ptr_cast(L#new_right, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(new_right)))), ==(old(_dryad_S2#6, avl_max_key(new_right)), old(_dryad_S3#7, avl_max_key(new_right)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_max_key(_dryad_S2#6, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_max_key(_dryad_S3#7, $phys_ptr_cast(L#new_right, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(new_right)))), ==(old(_dryad_S2#6, avl_min_key(new_right)), old(_dryad_S3#7, avl_min_key(new_right)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_min_key(_dryad_S2#6, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_min_key(_dryad_S3#7, $phys_ptr_cast(L#new_right, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(x1)))), ==(old(_dryad_S2#6, avl(x1)), old(_dryad_S3#7, avl(x1)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl(_dryad_S2#6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl(_dryad_S3#7, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(x1)))), ==(old(_dryad_S2#6, avl_reach(x1)), old(_dryad_S3#7, avl_reach(x1)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_reach(_dryad_S2#6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_reach(_dryad_S3#7, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(x1)))), ==(old(_dryad_S2#6, avl_height(x1)), old(_dryad_S3#7, avl_height(x1)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_height(_dryad_S2#6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height(_dryad_S3#7, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(x1)))), ==(old(_dryad_S2#6, avl_keys(x1)), old(_dryad_S3#7, avl_keys(x1)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_keys(_dryad_S2#6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_keys(_dryad_S3#7, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(x1)))), ==(old(_dryad_S2#6, avl_max_key(x1)), old(_dryad_S3#7, avl_max_key(x1)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_max_key(_dryad_S2#6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_max_key(_dryad_S3#7, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(x1)))), ==(old(_dryad_S2#6, avl_min_key(x1)), old(_dryad_S3#7, avl_min_key(x1)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_min_key(_dryad_S2#6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_min_key(_dryad_S3#7, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(x0)))), ==(old(_dryad_S2#6, avl(x0)), old(_dryad_S3#7, avl(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl(_dryad_S2#6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl(_dryad_S3#7, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(x0)))), ==(old(_dryad_S2#6, avl_reach(x0)), old(_dryad_S3#7, avl_reach(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_reach(_dryad_S2#6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_reach(_dryad_S3#7, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(x0)))), ==(old(_dryad_S2#6, avl_height(x0)), old(_dryad_S3#7, avl_height(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_height(_dryad_S2#6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height(_dryad_S3#7, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(x0)))), ==(old(_dryad_S2#6, avl_keys(x0)), old(_dryad_S3#7, avl_keys(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_keys(_dryad_S2#6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_keys(_dryad_S3#7, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(x0)))), ==(old(_dryad_S2#6, avl_max_key(x0)), old(_dryad_S3#7, avl_max_key(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_max_key(_dryad_S2#6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_max_key(_dryad_S3#7, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(x0)))), ==(old(_dryad_S2#6, avl_min_key(x0)), old(_dryad_S3#7, avl_min_key(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_min_key(_dryad_S2#6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_min_key(_dryad_S3#7, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(xl)))), ==(old(_dryad_S2#6, avl(xl)), old(_dryad_S3#7, avl(xl)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl(_dryad_S2#6, $phys_ptr_cast(L#xl, ^a_node)) == F#avl(_dryad_S3#7, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(xl)))), ==(old(_dryad_S2#6, avl_reach(xl)), old(_dryad_S3#7, avl_reach(xl)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_reach(_dryad_S3#7, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(xl)))), ==(old(_dryad_S2#6, avl_height(xl)), old(_dryad_S3#7, avl_height(xl)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_height(_dryad_S2#6, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height(_dryad_S3#7, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(xl)))), ==(old(_dryad_S2#6, avl_keys(xl)), old(_dryad_S3#7, avl_keys(xl)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_keys(_dryad_S2#6, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_keys(_dryad_S3#7, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(xl)))), ==(old(_dryad_S2#6, avl_max_key(xl)), old(_dryad_S3#7, avl_max_key(xl)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_max_key(_dryad_S2#6, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_max_key(_dryad_S3#7, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(xl)))), ==(old(_dryad_S2#6, avl_min_key(xl)), old(_dryad_S3#7, avl_min_key(xl)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#xl, ^a_node))) ==> F#avl_min_key(_dryad_S2#6, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_min_key(_dryad_S3#7, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(xr)))), ==(old(_dryad_S2#6, avl(xr)), old(_dryad_S3#7, avl(xr)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl(_dryad_S2#6, $phys_ptr_cast(L#xr, ^a_node)) == F#avl(_dryad_S3#7, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(xr)))), ==(old(_dryad_S2#6, avl_reach(xr)), old(_dryad_S3#7, avl_reach(xr)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_reach(_dryad_S3#7, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(xr)))), ==(old(_dryad_S2#6, avl_height(xr)), old(_dryad_S3#7, avl_height(xr)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_height(_dryad_S2#6, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height(_dryad_S3#7, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(xr)))), ==(old(_dryad_S2#6, avl_keys(xr)), old(_dryad_S3#7, avl_keys(xr)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_keys(_dryad_S2#6, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_keys(_dryad_S3#7, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(xr)))), ==(old(_dryad_S2#6, avl_max_key(xr)), old(_dryad_S3#7, avl_max_key(xr)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_max_key(_dryad_S2#6, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_max_key(_dryad_S3#7, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#6, avl_reach(xr)))), ==(old(_dryad_S2#6, avl_min_key(xr)), old(_dryad_S3#7, avl_min_key(xr)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#6, $phys_ptr_cast(L#xr, ^a_node))) ==> F#avl_min_key(_dryad_S2#6, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_min_key(_dryad_S3#7, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, new_right)), @_vcc_ptr_eq_pure(*((new_right->left)), old(_dryad_S2#6, *((new_right->left))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_right, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#6, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, new_right)), @_vcc_ptr_eq_pure(*((new_right->right)), old(_dryad_S2#6, *((new_right->right))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_right, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#6, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, new_right)), ==(*((new_right->key)), old(_dryad_S2#6, *((new_right->key))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_right, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)) == $rd_inv(_dryad_S2#6, a_node.key, $phys_ptr_cast(L#new_right, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, new_right)), ==(*((new_right->height)), old(_dryad_S2#6, *((new_right->height))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_right, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == $rd_inv(_dryad_S2#6, a_node.height, $phys_ptr_cast(L#new_right, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), @_vcc_ptr_eq_pure(*((x1->left)), old(_dryad_S2#6, *((x1->left))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#6, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), @_vcc_ptr_eq_pure(*((x1->right)), old(_dryad_S2#6, *((x1->right))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#6, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), ==(*((x1->key)), old(_dryad_S2#6, *((x1->key))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(_dryad_S2#6, a_node.key, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), ==(*((x1->height)), old(_dryad_S2#6, *((x1->height))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(_dryad_S2#6, a_node.height, $phys_ptr_cast(SL#x1, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), @_vcc_ptr_eq_pure(*((x0->left)), old(_dryad_S2#6, *((x0->left))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#6, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), @_vcc_ptr_eq_pure(*((x0->right)), old(_dryad_S2#6, *((x0->right))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#6, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), ==(*((x0->key)), old(_dryad_S2#6, *((x0->key))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(_dryad_S2#6, a_node.key, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), ==(*((x0->height)), old(_dryad_S2#6, *((x0->height))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(_dryad_S2#6, a_node.height, $phys_ptr_cast(SL#x0, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, xl)), @_vcc_ptr_eq_pure(*((xl->left)), old(_dryad_S2#6, *((xl->left))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#xl, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#6, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, xl)), @_vcc_ptr_eq_pure(*((xl->right)), old(_dryad_S2#6, *((xl->right))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#xl, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#6, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, xl)), ==(*((xl->key)), old(_dryad_S2#6, *((xl->key))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#xl, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)) == $rd_inv(_dryad_S2#6, a_node.key, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, xl)), ==(*((xl->height)), old(_dryad_S2#6, *((xl->height))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#xl, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == $rd_inv(_dryad_S2#6, a_node.height, $phys_ptr_cast(L#xl, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, xr)), @_vcc_ptr_eq_pure(*((xr->left)), old(_dryad_S2#6, *((xr->left))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#xr, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#6, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, xr)), @_vcc_ptr_eq_pure(*((xr->right)), old(_dryad_S2#6, *((xr->right))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#xr, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#6, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, xr)), ==(*((xr->key)), old(_dryad_S2#6, *((xr->key))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#xr, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)) == $rd_inv(_dryad_S2#6, a_node.key, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, xr)), ==(*((xr->height)), old(_dryad_S2#6, *((xr->height))))); 
            assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#xr, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == $rd_inv(_dryad_S2#6, a_node.height, $phys_ptr_cast(L#xr, ^a_node));
            // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl(new_right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((new_right->left))), avl(*((new_right->right)))), unchecked!(@_vcc_oset_in(new_right, @_vcc_oset_union(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))))), unchecked!(@_vcc_intset_in(*((new_right->key)), @_vcc_intset_union(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))))), @_vcc_oset_disjoint(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))), @_vcc_intset_disjoint(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))), ==>(@_vcc_ptr_neq_null(*((new_right->left))), <(avl_max_key(*((new_right->left))), *((new_right->key))))), ==>(@_vcc_ptr_neq_null(*((new_right->right))), <(*((new_right->key)), avl_min_key(*((new_right->right)))))), ||(||(&&(==(avl_height(*((new_right->left))), avl_height(*((new_right->right)))), ==(*((new_right->height)), +(avl_height(*((new_right->left))), 1))), &&(==(avl_height(*((new_right->left))), +(avl_height(*((new_right->right))), 1)), ==(*((new_right->height)), +(avl_height(*((new_right->left))), 1)))), &&(==(avl_height(*((new_right->right))), +(avl_height(*((new_right->left))), 1)), ==(*((new_right->height)), +(avl_height(*((new_right->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#new_right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#new_right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_reach(new_right), @_vcc_oset_union_one1(new_right, @_vcc_oset_union(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#new_right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#new_right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_height(new_right), @ite(>(avl_height(*((new_right->left))), avl_height(*((new_right->right)))), +(avl_height(*((new_right->left))), 1), +(avl_height(*((new_right->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#new_right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_keys(new_right), @_vcc_intset_union(@_vcc_intset_singleton(*((new_right->key))), @_vcc_intset_union(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#new_right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), @\int_max(avl_max_key(*((new_right->left))), avl_max_key(*((new_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_eq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), avl_max_key(*((new_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), avl_max_key(*((new_right->right)))))))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), @\int_min(avl_min_key(*((new_right->left))), avl_min_key(*((new_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_eq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), avl_min_key(*((new_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), avl_min_key(*((new_right->right)))))))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl(xl), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((xl->left))), avl(*((xl->right)))), unchecked!(@_vcc_oset_in(xl, @_vcc_oset_union(avl_reach(*((xl->left))), avl_reach(*((xl->right))))))), unchecked!(@_vcc_intset_in(*((xl->key)), @_vcc_intset_union(avl_keys(*((xl->left))), avl_keys(*((xl->right))))))), @_vcc_oset_disjoint(avl_reach(*((xl->left))), avl_reach(*((xl->right))))), @_vcc_intset_disjoint(avl_keys(*((xl->left))), avl_keys(*((xl->right))))), ==>(@_vcc_ptr_neq_null(*((xl->left))), <(avl_max_key(*((xl->left))), *((xl->key))))), ==>(@_vcc_ptr_neq_null(*((xl->right))), <(*((xl->key)), avl_min_key(*((xl->right)))))), ||(||(&&(==(avl_height(*((xl->left))), avl_height(*((xl->right)))), ==(*((xl->height)), +(avl_height(*((xl->left))), 1))), &&(==(avl_height(*((xl->left))), +(avl_height(*((xl->right))), 1)), ==(*((xl->height)), +(avl_height(*((xl->left))), 1)))), &&(==(avl_height(*((xl->right))), +(avl_height(*((xl->left))), 1)), ==(*((xl->height)), +(avl_height(*((xl->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#xl, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#xl, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xl, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_reach(xl), @_vcc_oset_union_one1(xl, @_vcc_oset_union(avl_reach(*((xl->left))), avl_reach(*((xl->right))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#xl, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#xl, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_height(xl), @ite(>(avl_height(*((xl->left))), avl_height(*((xl->right)))), +(avl_height(*((xl->left))), 1), +(avl_height(*((xl->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#xl, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(xl), ==(avl_keys(xl), @_vcc_intset_union(@_vcc_intset_singleton(*((xl->key))), @_vcc_intset_union(avl_keys(*((xl->left))), avl_keys(*((xl->right))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#xl, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), @\int_max(avl_max_key(*((xl->left))), avl_max_key(*((xl->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_eq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), avl_max_key(*((xl->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_max_key(xl), @\int_max(*((xl->key)), avl_max_key(*((xl->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xl), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), @\int_min(avl_min_key(*((xl->left))), avl_min_key(*((xl->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xl->left))), @_vcc_ptr_eq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), avl_min_key(*((xl->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xl->left))), @_vcc_ptr_neq_null(*((xl->right)))), ==(avl_min_key(xl), @\int_min(*((xl->key)), avl_min_key(*((xl->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xl, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xl, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xl, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xl, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl(xr), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((xr->left))), avl(*((xr->right)))), unchecked!(@_vcc_oset_in(xr, @_vcc_oset_union(avl_reach(*((xr->left))), avl_reach(*((xr->right))))))), unchecked!(@_vcc_intset_in(*((xr->key)), @_vcc_intset_union(avl_keys(*((xr->left))), avl_keys(*((xr->right))))))), @_vcc_oset_disjoint(avl_reach(*((xr->left))), avl_reach(*((xr->right))))), @_vcc_intset_disjoint(avl_keys(*((xr->left))), avl_keys(*((xr->right))))), ==>(@_vcc_ptr_neq_null(*((xr->left))), <(avl_max_key(*((xr->left))), *((xr->key))))), ==>(@_vcc_ptr_neq_null(*((xr->right))), <(*((xr->key)), avl_min_key(*((xr->right)))))), ||(||(&&(==(avl_height(*((xr->left))), avl_height(*((xr->right)))), ==(*((xr->height)), +(avl_height(*((xr->left))), 1))), &&(==(avl_height(*((xr->left))), +(avl_height(*((xr->right))), 1)), ==(*((xr->height)), +(avl_height(*((xr->left))), 1)))), &&(==(avl_height(*((xr->right))), +(avl_height(*((xr->left))), 1)), ==(*((xr->height)), +(avl_height(*((xr->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#xr, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#xr, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#xr, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_reach(xr), @_vcc_oset_union_one1(xr, @_vcc_oset_union(avl_reach(*((xr->left))), avl_reach(*((xr->right))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#xr, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#xr, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_height(xr), @ite(>(avl_height(*((xr->left))), avl_height(*((xr->right)))), +(avl_height(*((xr->left))), 1), +(avl_height(*((xr->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#xr, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(xr), ==(avl_keys(xr), @_vcc_intset_union(@_vcc_intset_singleton(*((xr->key))), @_vcc_intset_union(avl_keys(*((xr->left))), avl_keys(*((xr->right))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#xr, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), @\int_max(avl_max_key(*((xr->left))), avl_max_key(*((xr->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_eq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), avl_max_key(*((xr->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_max_key(xr), @\int_max(*((xr->key)), avl_max_key(*((xr->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(xr), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), @\int_min(avl_min_key(*((xr->left))), avl_min_key(*((xr->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((xr->left))), @_vcc_ptr_eq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), avl_min_key(*((xr->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((xr->left))), @_vcc_ptr_neq_null(*((xr->right)))), ==(avl_min_key(xr), @\int_min(*((xr->key)), avl_min_key(*((xr->right)))))))); 
            assume $non_null($phys_ptr_cast(L#xr, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#xr, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#xr, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#xr, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl(new_right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((new_right->left))), avl(*((new_right->right)))), unchecked!(@_vcc_oset_in(new_right, @_vcc_oset_union(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))))), unchecked!(@_vcc_intset_in(*((new_right->key)), @_vcc_intset_union(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))))), @_vcc_oset_disjoint(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))), @_vcc_intset_disjoint(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))), ==>(@_vcc_ptr_neq_null(*((new_right->left))), <(avl_max_key(*((new_right->left))), *((new_right->key))))), ==>(@_vcc_ptr_neq_null(*((new_right->right))), <(*((new_right->key)), avl_min_key(*((new_right->right)))))), ||(||(&&(==(avl_height(*((new_right->left))), avl_height(*((new_right->right)))), ==(*((new_right->height)), +(avl_height(*((new_right->left))), 1))), &&(==(avl_height(*((new_right->left))), +(avl_height(*((new_right->right))), 1)), ==(*((new_right->height)), +(avl_height(*((new_right->left))), 1)))), &&(==(avl_height(*((new_right->right))), +(avl_height(*((new_right->left))), 1)), ==(*((new_right->height)), +(avl_height(*((new_right->right))), 1))))))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#new_right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#new_right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1)));
            // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_reach(new_right), @_vcc_oset_union_one1(new_right, @_vcc_oset_union(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#new_right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#new_right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_height(new_right), @ite(>(avl_height(*((new_right->left))), avl_height(*((new_right->right)))), +(avl_height(*((new_right->left))), 1), +(avl_height(*((new_right->right))), 1)))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#new_right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1);
            // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_keys(new_right), @_vcc_intset_union(@_vcc_intset_singleton(*((new_right->key))), @_vcc_intset_union(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#new_right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), @\int_max(avl_max_key(*((new_right->left))), avl_max_key(*((new_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_eq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), avl_max_key(*((new_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), avl_max_key(*((new_right->right)))))))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
            // assume ==>(@_vcc_ptr_neq_null(new_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), @\int_min(avl_min_key(*((new_right->left))), avl_min_key(*((new_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_eq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), avl_min_key(*((new_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), avl_min_key(*((new_right->right)))))))); 
            assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
            // struct a_node* res_avl_balance#4; 
            // res_avl_balance#4 := avl_balance(x); 
            call res_avl_balance#4 := avl_balance($phys_ptr_cast(P#x, ^a_node));
            assume $full_stop_ext(#tok$3^128.11, $s);
            // return res_avl_balance#4; 
            $result := $phys_ptr_cast(res_avl_balance#4, ^a_node);
            assume true;
            assert $position_marker();
            goto #exit;
        }
    }

  anon6:
    // skip

  #exit:
// INV:LOOPTAIL
}



axiom (forall Q#__vcc_state$2^206.9#tc3#1385: $state, Q#x$2^206.9#dt1#1314: $ptr, Q#i$2^206.9#tc1#1315: int :: {:weight 10} { $intset_in(Q#i$2^206.9#tc1#1315, F#avl_keys(Q#__vcc_state$2^206.9#tc3#1385, $phys_ptr_cast(Q#x$2^206.9#dt1#1314, ^a_node))) } $good_state(Q#__vcc_state$2^206.9#tc3#1385) && $in_range_i4(Q#i$2^206.9#tc1#1315) ==> Q#i$2^206.9#tc1#1315 < F#avl_min_key(Q#__vcc_state$2^206.9#tc3#1385, $phys_ptr_cast(Q#x$2^206.9#dt1#1314, ^a_node)) ==> !$intset_in(Q#i$2^206.9#tc1#1315, F#avl_keys(Q#__vcc_state$2^206.9#tc3#1385, $phys_ptr_cast(Q#x$2^206.9#dt1#1314, ^a_node))));

axiom (forall Q#__vcc_state$2^207.9#tc3#1386: $state, Q#x$2^207.9#dt1#1316: $ptr, Q#i$2^207.9#tc1#1317: int :: {:weight 10} { $intset_in(Q#i$2^207.9#tc1#1317, F#avl_keys(Q#__vcc_state$2^207.9#tc3#1386, $phys_ptr_cast(Q#x$2^207.9#dt1#1316, ^a_node))) } $good_state(Q#__vcc_state$2^207.9#tc3#1386) && $in_range_i4(Q#i$2^207.9#tc1#1317) ==> Q#i$2^207.9#tc1#1317 > F#avl_max_key(Q#__vcc_state$2^207.9#tc3#1386, $phys_ptr_cast(Q#x$2^207.9#dt1#1316, ^a_node)) ==> !$intset_in(Q#i$2^207.9#tc1#1317, F#avl_keys(Q#__vcc_state$2^207.9#tc3#1386, $phys_ptr_cast(Q#x$2^207.9#dt1#1316, ^a_node))));

const unique l#public: $label;

axiom $type_code_is(3, ^$#state_t);

axiom $type_code_is(1, ^^i4);

const unique #tok$3^128.11: $token;

const unique #tok$3^126.4: $token;

const unique #tok$3^124.26: $token;

const unique #tok$3^122.11: $token;

const unique #tok$3^120.4: $token;

const unique #tok$3^118.25: $token;

const unique #tok$3^110.3: $token;

const unique #tok$3^108.3: $token;

const unique #tok$3^106.3: $token;

const unique #tok$3^104.3: $token;

const unique #tok$3^101.20: $token;

const unique #tok$4^0.0: $token;

const unique #file^?3Cno?20file?3E: $token;

axiom $file_name_is(4, #file^?3Cno?20file?3E);

const unique #tok$3^78.3: $token;

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cavl?5Cavl?2Dinsert?2Drec.c: $token;

axiom $file_name_is(3, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cavl?5Cavl?2Dinsert?2Drec.c);

const unique #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cavl?5Cdryad_avl.h: $token;

axiom $file_name_is(2, #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cavl?5Cdryad_avl.h);

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h: $token;

axiom $file_name_is(1, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h);

const unique #distTp1: $ctype;

axiom #distTp1 == $ptr_to(^a_node);

