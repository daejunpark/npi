axiom $arch_ptr_size == 8;

axiom $arch_spec_ptr_start == $max.u8;

const unique ^$##thread_id: $ctype;

axiom $def_math_type(^$##thread_id);

type $##thread_id;

const unique ^$##club: $ctype;

axiom $def_math_type(^$##club);

type $##club;

const unique ^a_node: $ctype;

axiom $is_span_sequential(^a_node);

axiom $def_struct_type(^a_node, 24, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^a_node) } $inv2(#s1, #s2, #p, ^a_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^a_node) } $inv2_without_lemmas(#s1, #s2, #p, ^a_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^a_node)) } $in(q, $composite_extent(s, p, ^a_node)) == (q == p));

const unique a_node.left: $field;

axiom $def_phys_field(^a_node, a_node.left, $ptr_to(^a_node), false, 0);

const unique a_node.right: $field;

axiom $def_phys_field(^a_node, a_node.right, $ptr_to(^a_node), false, 8);

const unique a_node.key: $field;

axiom $def_phys_field(^a_node, a_node.key, ^^i4, false, 16);

const unique a_node.height: $field;

axiom $def_phys_field(^a_node, a_node.height, ^^i4, false, 20);

function F#glob_reach() : $oset;

const unique cf#glob_reach: $pure_function;

axiom $function_arg_type(cf#glob_reach, 0, ^$#oset);

procedure glob_reach() returns ($result: $oset);
  free ensures $result == F#glob_reach();
  free ensures $call_transition(old($s), $s);



const unique ^$#_purecall_handler#1: $ctype;

axiom $def_fnptr_type(^$#_purecall_handler#1);

type $#_purecall_handler#1;

const unique ^$#_invalid_parameter_handler#2: $ctype;

axiom $def_fnptr_type(^$#_invalid_parameter_handler#2);

type $#_invalid_parameter_handler#2;

const unique ^$#avl_delete_rec.c..36261#3: $ctype;

axiom $def_fnptr_type(^$#avl_delete_rec.c..36261#3);

type $#avl_delete_rec.c..36261#3;

const unique ^$#_PtFuncCompare#4: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#4);

type $#_PtFuncCompare#4;

const unique ^$#_PtFuncCompare#5: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#5);

type $#_PtFuncCompare#5;

const unique ^$#_PtFuncCompare#6: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#6);

type $#_PtFuncCompare#6;

const unique ^$#_PtFuncCompare#7: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#7);

type $#_PtFuncCompare#7;

const unique ^$#_onexit_t#8: $ctype;

axiom $def_fnptr_type(^$#_onexit_t#8);

type $#_onexit_t#8;

function F##int_max(SP#x: int, SP#y: int) : int;

const unique cf##int_max: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_max(SP#x, SP#y) } $in_range_i4(F##int_max(SP#x, SP#y)));

axiom $function_arg_type(cf##int_max, 0, ^^i4);

axiom $function_arg_type(cf##int_max, 1, ^^i4);

axiom $function_arg_type(cf##int_max, 2, ^^i4);

procedure #int_max(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_max(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F##int_min(SP#x: int, SP#y: int) : int;

const unique cf##int_min: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_min(SP#x, SP#y) } $in_range_i4(F##int_min(SP#x, SP#y)));

axiom $function_arg_type(cf##int_min, 0, ^^i4);

axiom $function_arg_type(cf##int_min, 1, ^^i4);

axiom $function_arg_type(cf##int_min, 2, ^^i4);

procedure #int_min(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_min(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F#avl(#s: $state, SP#root: $ptr) : bool;

const unique cf#avl: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#avl(#s, SP#root) } 1 < $decreases_level ==> $is_null($phys_ptr_cast(SP#root, ^a_node)) ==> F#avl(#s, SP#root));

axiom $function_arg_type(cf#avl, 0, ^^bool);

axiom $function_arg_type(cf#avl, 1, $ptr_to(^a_node));

procedure avl(SP#root: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#root, ^a_node)) ==> $result;
  free ensures $result == F#avl($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#avl_reach(#s: $state, SP#root: $ptr) : $oset;

const unique cf#avl_reach: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#avl_reach(#s, SP#root) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#root, ^a_node)) ==> $oset_in($phys_ptr_cast(SP#root, ^a_node), F#avl_reach(#s, SP#root))) && ($is_null($phys_ptr_cast(SP#root, ^a_node)) ==> F#avl_reach(#s, SP#root) == $oset_empty()));

axiom $function_arg_type(cf#avl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#avl_reach, 1, $ptr_to(^a_node));

procedure avl_reach(SP#root: $ptr) returns ($result: $oset);
  ensures $non_null($phys_ptr_cast(SP#root, ^a_node)) ==> $oset_in($phys_ptr_cast(SP#root, ^a_node), $result);
  ensures $is_null($phys_ptr_cast(SP#root, ^a_node)) ==> $result == $oset_empty();
  free ensures $result == F#avl_reach($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#avl_keys(#s: $state, SP#root: $ptr) : $intset;

const unique cf#avl_keys: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#avl_keys(#s, SP#root) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#root, ^a_node)) ==> $intset_in($rd_inv(#s, a_node.key, $phys_ptr_cast(SP#root, ^a_node)), F#avl_keys(#s, SP#root))) && ($is_null($phys_ptr_cast(SP#root, ^a_node)) ==> F#avl_keys(#s, SP#root) == $intset_empty()));

axiom $function_arg_type(cf#avl_keys, 0, ^$#intset);

axiom $function_arg_type(cf#avl_keys, 1, $ptr_to(^a_node));

procedure avl_keys(SP#root: $ptr) returns ($result: $intset);
  ensures $non_null($phys_ptr_cast(SP#root, ^a_node)) ==> $intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SP#root, ^a_node)), $result);
  ensures $is_null($phys_ptr_cast(SP#root, ^a_node)) ==> $result == $intset_empty();
  free ensures $result == F#avl_keys($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#avl_height(#s: $state, SP#root: $ptr) : int;

const unique cf#avl_height: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#avl_height(#s, SP#root) } 1 < $decreases_level ==> -1 == $unchk_sub(^^i4, 0, 1) ==> ($is_null($phys_ptr_cast(SP#root, ^a_node)) ==> F#avl_height(#s, SP#root) == -1) && ($non_null($phys_ptr_cast(SP#root, ^a_node)) ==> F#avl_height(#s, SP#root) >= 0) && -1 == $unchk_sub(^^i4, 0, 1));

axiom $function_arg_type(cf#avl_height, 0, ^^mathint);

axiom $function_arg_type(cf#avl_height, 1, $ptr_to(^a_node));

procedure avl_height(SP#root: $ptr) returns ($result: int);
  free requires -1 == $unchk_sub(^^i4, 0, 1);
  ensures $is_null($phys_ptr_cast(SP#root, ^a_node)) ==> $result == -1;
  ensures $non_null($phys_ptr_cast(SP#root, ^a_node)) ==> $result >= 0;
  free ensures -1 == $unchk_sub(^^i4, 0, 1);
  free ensures $result == F#avl_height($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#avl_min_key(#s: $state, SP#root: $ptr) : int;

const unique cf#avl_min_key: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#avl_min_key(#s, SP#root) } 1 < $decreases_level ==> $in_range_i4(F#avl_min_key(#s, SP#root)) && ($non_null($phys_ptr_cast(SP#root, ^a_node)) && $is_null($rd_phys_ptr(#s, a_node.left, $phys_ptr_cast(SP#root, ^a_node), ^a_node)) && $is_null($rd_phys_ptr(#s, a_node.right, $phys_ptr_cast(SP#root, ^a_node), ^a_node)) ==> F#avl_min_key(#s, SP#root) == $rd_inv(#s, a_node.key, $phys_ptr_cast(SP#root, ^a_node))));

axiom $function_arg_type(cf#avl_min_key, 0, ^^i4);

axiom $function_arg_type(cf#avl_min_key, 1, $ptr_to(^a_node));

procedure avl_min_key(SP#root: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#root, ^a_node)) && $is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SP#root, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SP#root, ^a_node), ^a_node)) ==> $result == $rd_inv($s, a_node.key, $phys_ptr_cast(SP#root, ^a_node));
  free ensures $result == F#avl_min_key($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#avl_max_key(#s: $state, SP#root: $ptr) : int;

const unique cf#avl_max_key: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#avl_max_key(#s, SP#root) } 1 < $decreases_level ==> $in_range_i4(F#avl_max_key(#s, SP#root)) && ($non_null($phys_ptr_cast(SP#root, ^a_node)) && $is_null($rd_phys_ptr(#s, a_node.left, $phys_ptr_cast(SP#root, ^a_node), ^a_node)) && $is_null($rd_phys_ptr(#s, a_node.right, $phys_ptr_cast(SP#root, ^a_node), ^a_node)) ==> F#avl_max_key(#s, SP#root) == $rd_inv(#s, a_node.key, $phys_ptr_cast(SP#root, ^a_node))));

axiom $function_arg_type(cf#avl_max_key, 0, ^^i4);

axiom $function_arg_type(cf#avl_max_key, 1, $ptr_to(^a_node));

procedure avl_max_key(SP#root: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#root, ^a_node)) && $is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SP#root, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SP#root, ^a_node), ^a_node)) ==> $result == $rd_inv($s, a_node.key, $phys_ptr_cast(SP#root, ^a_node));
  free ensures $result == F#avl_max_key($s, SP#root);
  free ensures $call_transition(old($s), $s);



procedure avl_find_smallest(P#x: $ptr) returns ($result: int);
  requires $non_null($phys_ptr_cast(P#x, ^a_node));
  requires F#avl($s, $phys_ptr_cast(P#x, ^a_node));
  modifies $s, $cev_pc;
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(P#x, ^a_node));
  ensures F#avl($s, $phys_ptr_cast(P#x, ^a_node));
  ensures F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == F#avl_reach(old($s), $phys_ptr_cast(P#x, ^a_node));
  ensures F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == F#avl_keys(old($s), $phys_ptr_cast(P#x, ^a_node));
  ensures F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height(old($s), $phys_ptr_cast(P#x, ^a_node));
  ensures F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == F#avl_max_key(old($s), $phys_ptr_cast(P#x, ^a_node));
  ensures F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == F#avl_min_key(old($s), $phys_ptr_cast(P#x, ^a_node));
  ensures $result <= F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node));
  ensures $intset_in($result, F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



procedure avl_balance(P#x: $ptr) returns ($result: $ptr);
  requires $non_null($phys_ptr_cast(P#x, ^a_node));
  requires !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)));
  requires !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)));
  requires F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
  requires $non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node));
  requires !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)));
  requires !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)));
  requires F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
  requires $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
  requires $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)));
  requires F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) <= F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 2;
  requires F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) <= F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 2;
  modifies $s, $cev_pc;
  ensures F#avl_max_key($s, $phys_ptr_cast($result, ^a_node)) == F#avl_max_key(old($s), $phys_ptr_cast(P#x, ^a_node));
  ensures F#avl_min_key($s, $phys_ptr_cast($result, ^a_node)) == F#avl_min_key(old($s), $phys_ptr_cast(P#x, ^a_node));
  ensures F#avl($s, $phys_ptr_cast($result, ^a_node));
  ensures F#avl_keys($s, $phys_ptr_cast($result, ^a_node)) == $intset_union_one1($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
  ensures (F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 2 && F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node), ^a_node)) && F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 2 && F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node), ^a_node)) != F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node), ^a_node)) && F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) || ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 2 && F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node), ^a_node)) && F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 2 && F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.left, $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node), ^a_node)) != F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node), ^a_node)) && F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $rd_phys_ptr(old($s), a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



procedure avl_delete(P#x: $ptr, P#k: int) returns ($result: $ptr);
  requires F#avl($s, $phys_ptr_cast(P#x, ^a_node));
  requires $non_null($phys_ptr_cast(P#x, ^a_node)) ==> $intset_in(P#k, F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)));
  requires $is_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == -1;
  requires $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) >= 0;
  free requires -1 == $unchk_sub(^^i4, 0, 1);
  modifies $s, $cev_pc;
  ensures F#avl($s, $phys_ptr_cast($result, ^a_node));
  ensures F#avl_keys($s, $phys_ptr_cast($result, ^a_node)) == $intset_diff(F#avl_keys(old($s), $phys_ptr_cast(P#x, ^a_node)), $intset_singleton(P#k));
  ensures F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $phys_ptr_cast(P#x, ^a_node)) || F#avl_height($s, $phys_ptr_cast($result, ^a_node)) == F#avl_height(old($s), $phys_ptr_cast(P#x, ^a_node)) - 1;
// INV:BEGIN
  ensures $non_null($phys_ptr_cast(P#x, ^a_node)) && $non_null($phys_ptr_cast($result, ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast($result, ^a_node)) >= F#avl_min_key(old($s), $phys_ptr_cast(P#x, ^a_node));
  ensures $non_null($phys_ptr_cast(P#x, ^a_node)) && $non_null($phys_ptr_cast($result, ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast($result, ^a_node)) <= F#avl_max_key(old($s), $phys_ptr_cast(P#x, ^a_node));
// INV:END
  ensures $non_null($phys_ptr_cast(P#x, ^a_node)) && $non_null($phys_ptr_cast($result, ^a_node)) ==> P#k == F#avl_min_key(old($s), $phys_ptr_cast(P#x, ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast($result, ^a_node)) > F#avl_min_key(old($s), $phys_ptr_cast(P#x, ^a_node));
  ensures $non_null($phys_ptr_cast(P#x, ^a_node)) && $non_null($phys_ptr_cast($result, ^a_node)) ==> P#k == F#avl_max_key(old($s), $phys_ptr_cast(P#x, ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast($result, ^a_node)) < F#avl_max_key(old($s), $phys_ptr_cast(P#x, ^a_node));
  free ensures -1 == $unchk_sub(^^i4, 0, 1);
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);

// INV:PTR: P#x, $result
// INV:INT: P#k
// INV:LST: avl


implementation avl_delete(P#x: $ptr, P#k: int) returns ($result: $ptr)
{
  var res_avl_balance#7: $ptr;
  var stmtexpr4#34: $state;
  var _dryad_S3#14: $state;
  var stmtexpr3#33: $state;
  var _dryad_S2#13: $state;
  var stmtexpr2#32: $oset;
  var res_avl_reach#6: $oset;
  var stmtexpr1#31: $state;
  var _dryad_S1#12: $state;
  var stmtexpr0#30: $state;
  var _dryad_S0#11: $state;
  var new_right#10: $ptr;
  var res_avl_balance#5: $ptr;
  var stmtexpr4#29: $state;
  var _dryad_S3#9: $state;
  var stmtexpr3#28: $state;
  var _dryad_S2#8: $state;
  var stmtexpr2#27: $oset;
  var res_avl_reach#4: $oset;
  var stmtexpr1#26: $state;
  var _dryad_S1#7: $state;
  var stmtexpr0#25: $state;
  var _dryad_S0#6: $state;
  var L#new_left: $ptr;
  var res_avl_balance#3: $ptr;
  var stmtexpr8#24: $state;
  var SL#_dryad_S7: $state;
  var stmtexpr7#23: $state;
  var SL#_dryad_S6: $state;
  var stmtexpr6#22: $state;
  var SL#_dryad_S5: $state;
  var stmtexpr5#21: $state;
  var SL#_dryad_S4: $state;
  var stmtexpr4#20: $oset;
  var res_avl_reach#2: $oset;
  var stmtexpr3#19: $state;
  var SL#_dryad_S3: $state;
  var stmtexpr2#18: $state;
  var SL#_dryad_S2: $state;
  var stmtexpr1#17: $state;
  var _dryad_S1#5: $state;
  var stmtexpr0#16: $state;
  var _dryad_S0#4: $state;
  var L#succ: int where $in_range_i4(L#succ);
  var L#new_right: $ptr;
  var stmtexpr1#15: $state;
  var _dryad_S1#3: $state;
  var stmtexpr0#14: $state;
  var _dryad_S0#2: $state;
  var stmtexpr1#13: $state;
  var _dryad_S1#1: $state;
  var stmtexpr0#12: $state;
  var _dryad_S0#0: $state;
  var stmtexpr1#11: $state;
  var SL#_dryad_S1: $state;
  var stmtexpr0#10: $state;
  var SL#_dryad_S0: $state;
  var ite#1: bool;
  var stmtexpr1#9: $ptr;
  var SL#x1: $ptr;
  var stmtexpr0#8: $ptr;
  var SL#x0: $ptr;
  var L#right: $ptr;
  var L#left: $ptr;
  var stmtexpr1#36: $oset;
  var stmtexpr0#35: $oset;
  var SL#_dryad_G1: $oset;
  var SL#_dryad_G0: $oset;
  var #wrTime$3^79.3: int;
  var #stackframe: int;

  anon13:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$3^79.3, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$3^79.3 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$3^79.3, (lambda #p: $ptr :: false));
    // assume true
    // assume @in_range_i4(k); 
    assume $in_range_i4(P#k);
    // assume @decreases_level_is(2147483647); 
    assume 2147483647 == $decreases_level;
    //  --- Dryad annotated function --- 
    // _math \oset _dryad_G0; 
    // _math \oset _dryad_G1; 
    // _dryad_G0 := avl_reach(x); 
    call SL#_dryad_G0 := avl_reach($phys_ptr_cast(P#x, ^a_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset stmtexpr0#35; 
    // stmtexpr0#35 := _dryad_G0; 
    stmtexpr0#35 := SL#_dryad_G0;
    // _dryad_G1 := _dryad_G0; 
    SL#_dryad_G1 := SL#_dryad_G0;
    // _math \oset stmtexpr1#36; 
    // stmtexpr1#36 := _dryad_G1; 
    stmtexpr1#36 := SL#_dryad_G1;
    // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
    // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), &&(@_vcc_mutable(@state, x), @writes_check(x))); 
    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> $mutable($s, $phys_ptr_cast(P#x, ^a_node)) && $top_writable($s, #wrTime$3^79.3, $phys_ptr_cast(P#x, ^a_node));
    // assume ==>(@_vcc_ptr_neq_null(x), @_vcc_is_malloc_root(@state, x)); 
    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> $is_malloc_root($s, $phys_ptr_cast(P#x, ^a_node));
    assume true;
    // if (@_vcc_ptr_eq_null(x)) ...
    if ($is_null($phys_ptr_cast(P#x, ^a_node)))
    {
      anon1:
        // return x; 
        $result := $phys_ptr_cast(P#x, ^a_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon12:
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // struct a_node* left; 
        // struct a_node* right; 
        // struct a_node* x0; 
        // x0 := x; 
        SL#x0 := $phys_ptr_cast(P#x, ^a_node);
        // struct a_node* stmtexpr0#8; 
        // stmtexpr0#8 := x0; 
        stmtexpr0#8 := $phys_ptr_cast(SL#x0, ^a_node);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assert @reads_check_normal((x->right)); 
        assert $thread_local($s, $phys_ptr_cast(P#x, ^a_node));
        // right := *((x->right)); 
        L#right := $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node);
        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl(right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((right->left))), avl(*((right->right)))), unchecked!(@_vcc_oset_in(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))), unchecked!(@_vcc_intset_in(*((right->key)), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))), @_vcc_oset_disjoint(avl_reach(*((right->left))), avl_reach(*((right->right))))), @_vcc_intset_disjoint(avl_keys(*((right->left))), avl_keys(*((right->right))))), ==>(@_vcc_ptr_neq_null(*((right->left))), <(avl_max_key(*((right->left))), *((right->key))))), ==>(@_vcc_ptr_neq_null(*((right->right))), <(*((right->key)), avl_min_key(*((right->right)))))), ||(||(&&(==(avl_height(*((right->left))), avl_height(*((right->right)))), ==(*((right->height)), +(avl_height(*((right->left))), 1))), &&(==(avl_height(*((right->left))), +(avl_height(*((right->right))), 1)), ==(*((right->height)), +(avl_height(*((right->left))), 1)))), &&(==(avl_height(*((right->right))), +(avl_height(*((right->left))), 1)), ==(*((right->height)), +(avl_height(*((right->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_reach(right), @_vcc_oset_union_one1(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))); 
        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_height(right), @ite(>(avl_height(*((right->left))), avl_height(*((right->right)))), +(avl_height(*((right->left))), 1), +(avl_height(*((right->right))), 1)))); 
        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_keys(right), @_vcc_intset_union(@_vcc_intset_singleton(*((right->key))), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))); 
        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), @\int_max(avl_max_key(*((right->left))), avl_max_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->right)))))))); 
        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), @\int_min(avl_min_key(*((right->left))), avl_min_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->right)))))))); 
        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // struct a_node* x1; 
        // x1 := x; 
        SL#x1 := $phys_ptr_cast(P#x, ^a_node);
        // struct a_node* stmtexpr1#9; 
        // stmtexpr1#9 := x1; 
        stmtexpr1#9 := $phys_ptr_cast(SL#x1, ^a_node);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assert @reads_check_normal((x->left)); 
        assert $thread_local($s, $phys_ptr_cast(P#x, ^a_node));
        // left := *((x->left)); 
        L#left := $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node);
        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl(left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((left->left))), avl(*((left->right)))), unchecked!(@_vcc_oset_in(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))), unchecked!(@_vcc_intset_in(*((left->key)), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))), @_vcc_oset_disjoint(avl_reach(*((left->left))), avl_reach(*((left->right))))), @_vcc_intset_disjoint(avl_keys(*((left->left))), avl_keys(*((left->right))))), ==>(@_vcc_ptr_neq_null(*((left->left))), <(avl_max_key(*((left->left))), *((left->key))))), ==>(@_vcc_ptr_neq_null(*((left->right))), <(*((left->key)), avl_min_key(*((left->right)))))), ||(||(&&(==(avl_height(*((left->left))), avl_height(*((left->right)))), ==(*((left->height)), +(avl_height(*((left->left))), 1))), &&(==(avl_height(*((left->left))), +(avl_height(*((left->right))), 1)), ==(*((left->height)), +(avl_height(*((left->left))), 1)))), &&(==(avl_height(*((left->right))), +(avl_height(*((left->left))), 1)), ==(*((left->height)), +(avl_height(*((left->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_reach(left), @_vcc_oset_union_one1(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))); 
        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_height(left), @ite(>(avl_height(*((left->left))), avl_height(*((left->right)))), +(avl_height(*((left->left))), 1), +(avl_height(*((left->right))), 1)))); 
        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_keys(left), @_vcc_intset_union(@_vcc_intset_singleton(*((left->key))), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))); 
        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), @\int_max(avl_max_key(*((left->left))), avl_max_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->right)))))))); 
        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), @\int_min(avl_min_key(*((left->left))), avl_min_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->right)))))))); 
        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
        // assert @reads_check_normal((x->key)); 
        assert $thread_local($s, $phys_ptr_cast(P#x, ^a_node));
        assume true;
        // if (==(*((x->key)), k)) ...
        if ($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) == P#k)
        {
          anon8:
            // _Bool ite#1; 
            // ite#1 := &&(@_vcc_ptr_eq_null(left), @_vcc_ptr_eq_null(right)); 
            ite#1 := $is_null($phys_ptr_cast(L#left, ^a_node)) && $is_null($phys_ptr_cast(L#right, ^a_node));
            assume true;
            // if (ite#1) ...
            if (ite#1)
            {
              anon2:
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl(right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((right->left))), avl(*((right->right)))), unchecked!(@_vcc_oset_in(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))), unchecked!(@_vcc_intset_in(*((right->key)), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))), @_vcc_oset_disjoint(avl_reach(*((right->left))), avl_reach(*((right->right))))), @_vcc_intset_disjoint(avl_keys(*((right->left))), avl_keys(*((right->right))))), ==>(@_vcc_ptr_neq_null(*((right->left))), <(avl_max_key(*((right->left))), *((right->key))))), ==>(@_vcc_ptr_neq_null(*((right->right))), <(*((right->key)), avl_min_key(*((right->right)))))), ||(||(&&(==(avl_height(*((right->left))), avl_height(*((right->right)))), ==(*((right->height)), +(avl_height(*((right->left))), 1))), &&(==(avl_height(*((right->left))), +(avl_height(*((right->right))), 1)), ==(*((right->height)), +(avl_height(*((right->left))), 1)))), &&(==(avl_height(*((right->right))), +(avl_height(*((right->left))), 1)), ==(*((right->height)), +(avl_height(*((right->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_reach(right), @_vcc_oset_union_one1(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_height(right), @ite(>(avl_height(*((right->left))), avl_height(*((right->right)))), +(avl_height(*((right->left))), 1), +(avl_height(*((right->right))), 1)))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_keys(right), @_vcc_intset_union(@_vcc_intset_singleton(*((right->key))), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), @\int_max(avl_max_key(*((right->left))), avl_max_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), @\int_min(avl_min_key(*((right->left))), avl_min_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl(left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((left->left))), avl(*((left->right)))), unchecked!(@_vcc_oset_in(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))), unchecked!(@_vcc_intset_in(*((left->key)), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))), @_vcc_oset_disjoint(avl_reach(*((left->left))), avl_reach(*((left->right))))), @_vcc_intset_disjoint(avl_keys(*((left->left))), avl_keys(*((left->right))))), ==>(@_vcc_ptr_neq_null(*((left->left))), <(avl_max_key(*((left->left))), *((left->key))))), ==>(@_vcc_ptr_neq_null(*((left->right))), <(*((left->key)), avl_min_key(*((left->right)))))), ||(||(&&(==(avl_height(*((left->left))), avl_height(*((left->right)))), ==(*((left->height)), +(avl_height(*((left->left))), 1))), &&(==(avl_height(*((left->left))), +(avl_height(*((left->right))), 1)), ==(*((left->height)), +(avl_height(*((left->left))), 1)))), &&(==(avl_height(*((left->right))), +(avl_height(*((left->left))), 1)), ==(*((left->height)), +(avl_height(*((left->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_reach(left), @_vcc_oset_union_one1(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_height(left), @ite(>(avl_height(*((left->left))), avl_height(*((left->right)))), +(avl_height(*((left->left))), 1), +(avl_height(*((left->right))), 1)))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_keys(left), @_vcc_intset_union(@_vcc_intset_singleton(*((left->key))), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), @\int_max(avl_max_key(*((left->left))), avl_max_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), @\int_min(avl_min_key(*((left->left))), avl_min_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // _math \state _dryad_S0; 
                // _dryad_S0 := @_vcc_current_state(@state); 
                SL#_dryad_S0 := $current_state($s);
                // _math \state stmtexpr0#10; 
                // stmtexpr0#10 := _dryad_S0; 
                stmtexpr0#10 := SL#_dryad_S0;
                // void function
                // assert @writes_check(x); 
                assert $top_writable($s, #wrTime$3^79.3, $phys_ptr_cast(P#x, ^a_node));
                // assert @writes_check(@_vcc_extent(@state, x)); 
                assert (forall #writes$3^106.5: $ptr :: { $dont_instantiate(#writes$3^106.5) } $set_in(#writes$3^106.5, $extent($s, $phys_ptr_cast(P#x, ^a_node))) ==> $top_writable($s, #wrTime$3^79.3, #writes$3^106.5));
                // stmt _vcc_free(x); 
                call $free($phys_ptr_cast(P#x, ^a_node));
                assume $full_stop_ext(#tok$3^106.5, $s);
                // _math \state _dryad_S1; 
                // _dryad_S1 := @_vcc_current_state(@state); 
                SL#_dryad_S1 := $current_state($s);
                // _math \state stmtexpr1#11; 
                // stmtexpr1#11 := _dryad_S1; 
                stmtexpr1#11 := SL#_dryad_S1;
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(x1)))), ==(old(_dryad_S0, avl(x1)), old(_dryad_S1, avl(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl(SL#_dryad_S0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl(SL#_dryad_S1, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(x1)))), ==(old(_dryad_S0, avl_reach(x1)), old(_dryad_S1, avl_reach(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_reach(SL#_dryad_S1, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(x1)))), ==(old(_dryad_S0, avl_height(x1)), old(_dryad_S1, avl_height(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_height(SL#_dryad_S0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height(SL#_dryad_S1, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(x1)))), ==(old(_dryad_S0, avl_keys(x1)), old(_dryad_S1, avl_keys(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_keys(SL#_dryad_S0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_keys(SL#_dryad_S1, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(x1)))), ==(old(_dryad_S0, avl_max_key(x1)), old(_dryad_S1, avl_max_key(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_max_key(SL#_dryad_S0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_max_key(SL#_dryad_S1, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(x1)))), ==(old(_dryad_S0, avl_min_key(x1)), old(_dryad_S1, avl_min_key(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_min_key(SL#_dryad_S0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_min_key(SL#_dryad_S1, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(x0)))), ==(old(_dryad_S0, avl(x0)), old(_dryad_S1, avl(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl(SL#_dryad_S0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl(SL#_dryad_S1, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(x0)))), ==(old(_dryad_S0, avl_reach(x0)), old(_dryad_S1, avl_reach(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_reach(SL#_dryad_S1, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(x0)))), ==(old(_dryad_S0, avl_height(x0)), old(_dryad_S1, avl_height(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_height(SL#_dryad_S0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height(SL#_dryad_S1, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(x0)))), ==(old(_dryad_S0, avl_keys(x0)), old(_dryad_S1, avl_keys(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_keys(SL#_dryad_S0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_keys(SL#_dryad_S1, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(x0)))), ==(old(_dryad_S0, avl_max_key(x0)), old(_dryad_S1, avl_max_key(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_max_key(SL#_dryad_S0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_max_key(SL#_dryad_S1, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(x0)))), ==(old(_dryad_S0, avl_min_key(x0)), old(_dryad_S1, avl_min_key(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_min_key(SL#_dryad_S0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_min_key(SL#_dryad_S1, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(right)))), ==(old(_dryad_S0, avl(right)), old(_dryad_S1, avl(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl(SL#_dryad_S0, $phys_ptr_cast(L#right, ^a_node)) == F#avl(SL#_dryad_S1, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(right)))), ==(old(_dryad_S0, avl_reach(right)), old(_dryad_S1, avl_reach(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(L#right, ^a_node)) == F#avl_reach(SL#_dryad_S1, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(right)))), ==(old(_dryad_S0, avl_height(right)), old(_dryad_S1, avl_height(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_height(SL#_dryad_S0, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height(SL#_dryad_S1, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(right)))), ==(old(_dryad_S0, avl_keys(right)), old(_dryad_S1, avl_keys(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_keys(SL#_dryad_S0, $phys_ptr_cast(L#right, ^a_node)) == F#avl_keys(SL#_dryad_S1, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(right)))), ==(old(_dryad_S0, avl_max_key(right)), old(_dryad_S1, avl_max_key(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_max_key(SL#_dryad_S0, $phys_ptr_cast(L#right, ^a_node)) == F#avl_max_key(SL#_dryad_S1, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(right)))), ==(old(_dryad_S0, avl_min_key(right)), old(_dryad_S1, avl_min_key(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_min_key(SL#_dryad_S0, $phys_ptr_cast(L#right, ^a_node)) == F#avl_min_key(SL#_dryad_S1, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(left)))), ==(old(_dryad_S0, avl(left)), old(_dryad_S1, avl(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl(SL#_dryad_S0, $phys_ptr_cast(L#left, ^a_node)) == F#avl(SL#_dryad_S1, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(left)))), ==(old(_dryad_S0, avl_reach(left)), old(_dryad_S1, avl_reach(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(L#left, ^a_node)) == F#avl_reach(SL#_dryad_S1, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(left)))), ==(old(_dryad_S0, avl_height(left)), old(_dryad_S1, avl_height(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_height(SL#_dryad_S0, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height(SL#_dryad_S1, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(left)))), ==(old(_dryad_S0, avl_keys(left)), old(_dryad_S1, avl_keys(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_keys(SL#_dryad_S0, $phys_ptr_cast(L#left, ^a_node)) == F#avl_keys(SL#_dryad_S1, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(left)))), ==(old(_dryad_S0, avl_max_key(left)), old(_dryad_S1, avl_max_key(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_max_key(SL#_dryad_S0, $phys_ptr_cast(L#left, ^a_node)) == F#avl_max_key(SL#_dryad_S1, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0, avl_reach(left)))), ==(old(_dryad_S0, avl_min_key(left)), old(_dryad_S1, avl_min_key(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S0, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_min_key(SL#_dryad_S0, $phys_ptr_cast(L#left, ^a_node)) == F#avl_min_key(SL#_dryad_S1, $phys_ptr_cast(L#left, ^a_node));
                // return (struct a_node*)@null; 
                $result := $phys_ptr_cast($null, ^a_node);
                assume true;
                assert $position_marker();
                goto #exit;
            }
            else
            {
              anon7:
                assume true;
                // if (@_vcc_ptr_eq_null(left)) ...
                if ($is_null($phys_ptr_cast(L#left, ^a_node)))
                {
                  anon3:
                    // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
                    assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
                    // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
                    assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
                    assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
                    // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
                    assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
                    assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
                    assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
                    assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
                    // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
                    assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
                    assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
                    // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
                    assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
                    assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
                    assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(right), ==(avl(right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((right->left))), avl(*((right->right)))), unchecked!(@_vcc_oset_in(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))), unchecked!(@_vcc_intset_in(*((right->key)), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))), @_vcc_oset_disjoint(avl_reach(*((right->left))), avl_reach(*((right->right))))), @_vcc_intset_disjoint(avl_keys(*((right->left))), avl_keys(*((right->right))))), ==>(@_vcc_ptr_neq_null(*((right->left))), <(avl_max_key(*((right->left))), *((right->key))))), ==>(@_vcc_ptr_neq_null(*((right->right))), <(*((right->key)), avl_min_key(*((right->right)))))), ||(||(&&(==(avl_height(*((right->left))), avl_height(*((right->right)))), ==(*((right->height)), +(avl_height(*((right->left))), 1))), &&(==(avl_height(*((right->left))), +(avl_height(*((right->right))), 1)), ==(*((right->height)), +(avl_height(*((right->left))), 1)))), &&(==(avl_height(*((right->right))), +(avl_height(*((right->left))), 1)), ==(*((right->height)), +(avl_height(*((right->right))), 1))))))); 
                    assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1)));
                    // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_reach(right), @_vcc_oset_union_one1(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))); 
                    assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_height(right), @ite(>(avl_height(*((right->left))), avl_height(*((right->right)))), +(avl_height(*((right->left))), 1), +(avl_height(*((right->right))), 1)))); 
                    assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1);
                    // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_keys(right), @_vcc_intset_union(@_vcc_intset_singleton(*((right->key))), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))); 
                    assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), @\int_max(avl_max_key(*((right->left))), avl_max_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->right)))))))); 
                    assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), @\int_min(avl_min_key(*((right->left))), avl_min_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->right)))))))); 
                    assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(left), ==(avl(left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((left->left))), avl(*((left->right)))), unchecked!(@_vcc_oset_in(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))), unchecked!(@_vcc_intset_in(*((left->key)), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))), @_vcc_oset_disjoint(avl_reach(*((left->left))), avl_reach(*((left->right))))), @_vcc_intset_disjoint(avl_keys(*((left->left))), avl_keys(*((left->right))))), ==>(@_vcc_ptr_neq_null(*((left->left))), <(avl_max_key(*((left->left))), *((left->key))))), ==>(@_vcc_ptr_neq_null(*((left->right))), <(*((left->key)), avl_min_key(*((left->right)))))), ||(||(&&(==(avl_height(*((left->left))), avl_height(*((left->right)))), ==(*((left->height)), +(avl_height(*((left->left))), 1))), &&(==(avl_height(*((left->left))), +(avl_height(*((left->right))), 1)), ==(*((left->height)), +(avl_height(*((left->left))), 1)))), &&(==(avl_height(*((left->right))), +(avl_height(*((left->left))), 1)), ==(*((left->height)), +(avl_height(*((left->right))), 1))))))); 
                    assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1)));
                    // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_reach(left), @_vcc_oset_union_one1(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))); 
                    assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_height(left), @ite(>(avl_height(*((left->left))), avl_height(*((left->right)))), +(avl_height(*((left->left))), 1), +(avl_height(*((left->right))), 1)))); 
                    assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1);
                    // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_keys(left), @_vcc_intset_union(@_vcc_intset_singleton(*((left->key))), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))); 
                    assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), @\int_max(avl_max_key(*((left->left))), avl_max_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->right)))))))); 
                    assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), @\int_min(avl_min_key(*((left->left))), avl_min_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->right)))))))); 
                    assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
                    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
                    // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
                    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
                    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
                    // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
                    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
                    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                    // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
                    assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                    // _math \state _dryad_S0#0; 
                    // _dryad_S0#0 := @_vcc_current_state(@state); 
                    _dryad_S0#0 := $current_state($s);
                    // _math \state stmtexpr0#12; 
                    // stmtexpr0#12 := _dryad_S0#0; 
                    stmtexpr0#12 := _dryad_S0#0;
                    // void function
                    // assert @writes_check(x); 
                    assert $top_writable($s, #wrTime$3^79.3, $phys_ptr_cast(P#x, ^a_node));
                    // assert @writes_check(@_vcc_extent(@state, x)); 
                    assert (forall #writes$3^109.5: $ptr :: { $dont_instantiate(#writes$3^109.5) } $set_in(#writes$3^109.5, $extent($s, $phys_ptr_cast(P#x, ^a_node))) ==> $top_writable($s, #wrTime$3^79.3, #writes$3^109.5));
                    // stmt _vcc_free(x); 
                    call $free($phys_ptr_cast(P#x, ^a_node));
                    assume $full_stop_ext(#tok$3^109.5, $s);
                    // _math \state _dryad_S1#1; 
                    // _dryad_S1#1 := @_vcc_current_state(@state); 
                    _dryad_S1#1 := $current_state($s);
                    // _math \state stmtexpr1#13; 
                    // stmtexpr1#13 := _dryad_S1#1; 
                    stmtexpr1#13 := _dryad_S1#1;
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(x1)))), ==(old(_dryad_S0#0, avl(x1)), old(_dryad_S1#1, avl(x1)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl(_dryad_S1#1, $phys_ptr_cast(SL#x1, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(x1)))), ==(old(_dryad_S0#0, avl_reach(x1)), old(_dryad_S1#1, avl_reach(x1)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_reach(_dryad_S1#1, $phys_ptr_cast(SL#x1, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(x1)))), ==(old(_dryad_S0#0, avl_height(x1)), old(_dryad_S1#1, avl_height(x1)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_height(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height(_dryad_S1#1, $phys_ptr_cast(SL#x1, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(x1)))), ==(old(_dryad_S0#0, avl_keys(x1)), old(_dryad_S1#1, avl_keys(x1)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_keys(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_keys(_dryad_S1#1, $phys_ptr_cast(SL#x1, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(x1)))), ==(old(_dryad_S0#0, avl_max_key(x1)), old(_dryad_S1#1, avl_max_key(x1)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_max_key(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_max_key(_dryad_S1#1, $phys_ptr_cast(SL#x1, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(x1)))), ==(old(_dryad_S0#0, avl_min_key(x1)), old(_dryad_S1#1, avl_min_key(x1)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_min_key(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_min_key(_dryad_S1#1, $phys_ptr_cast(SL#x1, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(x0)))), ==(old(_dryad_S0#0, avl(x0)), old(_dryad_S1#1, avl(x0)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(x0)))), ==(old(_dryad_S0#0, avl_reach(x0)), old(_dryad_S1#1, avl_reach(x0)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_reach(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(x0)))), ==(old(_dryad_S0#0, avl_height(x0)), old(_dryad_S1#1, avl_height(x0)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_height(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(x0)))), ==(old(_dryad_S0#0, avl_keys(x0)), old(_dryad_S1#1, avl_keys(x0)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_keys(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_keys(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(x0)))), ==(old(_dryad_S0#0, avl_max_key(x0)), old(_dryad_S1#1, avl_max_key(x0)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_max_key(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_max_key(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(x0)))), ==(old(_dryad_S0#0, avl_min_key(x0)), old(_dryad_S1#1, avl_min_key(x0)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_min_key(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_min_key(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(right)))), ==(old(_dryad_S0#0, avl(right)), old(_dryad_S1#1, avl(right)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl(_dryad_S0#0, $phys_ptr_cast(L#right, ^a_node)) == F#avl(_dryad_S1#1, $phys_ptr_cast(L#right, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(right)))), ==(old(_dryad_S0#0, avl_reach(right)), old(_dryad_S1#1, avl_reach(right)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#right, ^a_node)) == F#avl_reach(_dryad_S1#1, $phys_ptr_cast(L#right, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(right)))), ==(old(_dryad_S0#0, avl_height(right)), old(_dryad_S1#1, avl_height(right)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_height(_dryad_S0#0, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height(_dryad_S1#1, $phys_ptr_cast(L#right, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(right)))), ==(old(_dryad_S0#0, avl_keys(right)), old(_dryad_S1#1, avl_keys(right)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_keys(_dryad_S0#0, $phys_ptr_cast(L#right, ^a_node)) == F#avl_keys(_dryad_S1#1, $phys_ptr_cast(L#right, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(right)))), ==(old(_dryad_S0#0, avl_max_key(right)), old(_dryad_S1#1, avl_max_key(right)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_max_key(_dryad_S0#0, $phys_ptr_cast(L#right, ^a_node)) == F#avl_max_key(_dryad_S1#1, $phys_ptr_cast(L#right, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(right)))), ==(old(_dryad_S0#0, avl_min_key(right)), old(_dryad_S1#1, avl_min_key(right)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_min_key(_dryad_S0#0, $phys_ptr_cast(L#right, ^a_node)) == F#avl_min_key(_dryad_S1#1, $phys_ptr_cast(L#right, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(left)))), ==(old(_dryad_S0#0, avl(left)), old(_dryad_S1#1, avl(left)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl(_dryad_S0#0, $phys_ptr_cast(L#left, ^a_node)) == F#avl(_dryad_S1#1, $phys_ptr_cast(L#left, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(left)))), ==(old(_dryad_S0#0, avl_reach(left)), old(_dryad_S1#1, avl_reach(left)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#left, ^a_node)) == F#avl_reach(_dryad_S1#1, $phys_ptr_cast(L#left, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(left)))), ==(old(_dryad_S0#0, avl_height(left)), old(_dryad_S1#1, avl_height(left)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_height(_dryad_S0#0, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height(_dryad_S1#1, $phys_ptr_cast(L#left, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(left)))), ==(old(_dryad_S0#0, avl_keys(left)), old(_dryad_S1#1, avl_keys(left)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_keys(_dryad_S0#0, $phys_ptr_cast(L#left, ^a_node)) == F#avl_keys(_dryad_S1#1, $phys_ptr_cast(L#left, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(left)))), ==(old(_dryad_S0#0, avl_max_key(left)), old(_dryad_S1#1, avl_max_key(left)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_max_key(_dryad_S0#0, $phys_ptr_cast(L#left, ^a_node)) == F#avl_max_key(_dryad_S1#1, $phys_ptr_cast(L#left, ^a_node));
                    // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, avl_reach(left)))), ==(old(_dryad_S0#0, avl_min_key(left)), old(_dryad_S1#1, avl_min_key(left)))); 
                    assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#0, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_min_key(_dryad_S0#0, $phys_ptr_cast(L#left, ^a_node)) == F#avl_min_key(_dryad_S1#1, $phys_ptr_cast(L#left, ^a_node));
                    // return right; 
                    $result := $phys_ptr_cast(L#right, ^a_node);
                    assume true;
                    assert $position_marker();
                    goto #exit;
                }
                else
                {
                  anon6:
                    assume true;
                    // if (@_vcc_ptr_eq_null(right)) ...
                    if ($is_null($phys_ptr_cast(L#right, ^a_node)))
                    {
                      anon4:
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl(right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((right->left))), avl(*((right->right)))), unchecked!(@_vcc_oset_in(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))), unchecked!(@_vcc_intset_in(*((right->key)), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))), @_vcc_oset_disjoint(avl_reach(*((right->left))), avl_reach(*((right->right))))), @_vcc_intset_disjoint(avl_keys(*((right->left))), avl_keys(*((right->right))))), ==>(@_vcc_ptr_neq_null(*((right->left))), <(avl_max_key(*((right->left))), *((right->key))))), ==>(@_vcc_ptr_neq_null(*((right->right))), <(*((right->key)), avl_min_key(*((right->right)))))), ||(||(&&(==(avl_height(*((right->left))), avl_height(*((right->right)))), ==(*((right->height)), +(avl_height(*((right->left))), 1))), &&(==(avl_height(*((right->left))), +(avl_height(*((right->right))), 1)), ==(*((right->height)), +(avl_height(*((right->left))), 1)))), &&(==(avl_height(*((right->right))), +(avl_height(*((right->left))), 1)), ==(*((right->height)), +(avl_height(*((right->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_reach(right), @_vcc_oset_union_one1(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_height(right), @ite(>(avl_height(*((right->left))), avl_height(*((right->right)))), +(avl_height(*((right->left))), 1), +(avl_height(*((right->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_keys(right), @_vcc_intset_union(@_vcc_intset_singleton(*((right->key))), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), @\int_max(avl_max_key(*((right->left))), avl_max_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), @\int_min(avl_min_key(*((right->left))), avl_min_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl(left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((left->left))), avl(*((left->right)))), unchecked!(@_vcc_oset_in(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))), unchecked!(@_vcc_intset_in(*((left->key)), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))), @_vcc_oset_disjoint(avl_reach(*((left->left))), avl_reach(*((left->right))))), @_vcc_intset_disjoint(avl_keys(*((left->left))), avl_keys(*((left->right))))), ==>(@_vcc_ptr_neq_null(*((left->left))), <(avl_max_key(*((left->left))), *((left->key))))), ==>(@_vcc_ptr_neq_null(*((left->right))), <(*((left->key)), avl_min_key(*((left->right)))))), ||(||(&&(==(avl_height(*((left->left))), avl_height(*((left->right)))), ==(*((left->height)), +(avl_height(*((left->left))), 1))), &&(==(avl_height(*((left->left))), +(avl_height(*((left->right))), 1)), ==(*((left->height)), +(avl_height(*((left->left))), 1)))), &&(==(avl_height(*((left->right))), +(avl_height(*((left->left))), 1)), ==(*((left->height)), +(avl_height(*((left->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_reach(left), @_vcc_oset_union_one1(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_height(left), @ite(>(avl_height(*((left->left))), avl_height(*((left->right)))), +(avl_height(*((left->left))), 1), +(avl_height(*((left->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_keys(left), @_vcc_intset_union(@_vcc_intset_singleton(*((left->key))), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), @\int_max(avl_max_key(*((left->left))), avl_max_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), @\int_min(avl_min_key(*((left->left))), avl_min_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // _math \state _dryad_S0#2; 
                        // _dryad_S0#2 := @_vcc_current_state(@state); 
                        _dryad_S0#2 := $current_state($s);
                        // _math \state stmtexpr0#14; 
                        // stmtexpr0#14 := _dryad_S0#2; 
                        stmtexpr0#14 := _dryad_S0#2;
                        // void function
                        // assert @writes_check(x); 
                        assert $top_writable($s, #wrTime$3^79.3, $phys_ptr_cast(P#x, ^a_node));
                        // assert @writes_check(@_vcc_extent(@state, x)); 
                        assert (forall #writes$3^112.5: $ptr :: { $dont_instantiate(#writes$3^112.5) } $set_in(#writes$3^112.5, $extent($s, $phys_ptr_cast(P#x, ^a_node))) ==> $top_writable($s, #wrTime$3^79.3, #writes$3^112.5));
                        // stmt _vcc_free(x); 
                        call $free($phys_ptr_cast(P#x, ^a_node));
                        assume $full_stop_ext(#tok$3^112.5, $s);
                        // _math \state _dryad_S1#3; 
                        // _dryad_S1#3 := @_vcc_current_state(@state); 
                        _dryad_S1#3 := $current_state($s);
                        // _math \state stmtexpr1#15; 
                        // stmtexpr1#15 := _dryad_S1#3; 
                        stmtexpr1#15 := _dryad_S1#3;
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(x1)))), ==(old(_dryad_S0#2, avl(x1)), old(_dryad_S1#3, avl(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl(_dryad_S0#2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl(_dryad_S1#3, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(x1)))), ==(old(_dryad_S0#2, avl_reach(x1)), old(_dryad_S1#3, avl_reach(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_reach(_dryad_S0#2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_reach(_dryad_S1#3, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(x1)))), ==(old(_dryad_S0#2, avl_height(x1)), old(_dryad_S1#3, avl_height(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_height(_dryad_S0#2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height(_dryad_S1#3, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(x1)))), ==(old(_dryad_S0#2, avl_keys(x1)), old(_dryad_S1#3, avl_keys(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_keys(_dryad_S0#2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_keys(_dryad_S1#3, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(x1)))), ==(old(_dryad_S0#2, avl_max_key(x1)), old(_dryad_S1#3, avl_max_key(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_max_key(_dryad_S0#2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_max_key(_dryad_S1#3, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(x1)))), ==(old(_dryad_S0#2, avl_min_key(x1)), old(_dryad_S1#3, avl_min_key(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_min_key(_dryad_S0#2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_min_key(_dryad_S1#3, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(x0)))), ==(old(_dryad_S0#2, avl(x0)), old(_dryad_S1#3, avl(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl(_dryad_S0#2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl(_dryad_S1#3, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(x0)))), ==(old(_dryad_S0#2, avl_reach(x0)), old(_dryad_S1#3, avl_reach(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_reach(_dryad_S0#2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_reach(_dryad_S1#3, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(x0)))), ==(old(_dryad_S0#2, avl_height(x0)), old(_dryad_S1#3, avl_height(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_height(_dryad_S0#2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height(_dryad_S1#3, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(x0)))), ==(old(_dryad_S0#2, avl_keys(x0)), old(_dryad_S1#3, avl_keys(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_keys(_dryad_S0#2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_keys(_dryad_S1#3, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(x0)))), ==(old(_dryad_S0#2, avl_max_key(x0)), old(_dryad_S1#3, avl_max_key(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_max_key(_dryad_S0#2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_max_key(_dryad_S1#3, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(x0)))), ==(old(_dryad_S0#2, avl_min_key(x0)), old(_dryad_S1#3, avl_min_key(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_min_key(_dryad_S0#2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_min_key(_dryad_S1#3, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(right)))), ==(old(_dryad_S0#2, avl(right)), old(_dryad_S1#3, avl(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl(_dryad_S0#2, $phys_ptr_cast(L#right, ^a_node)) == F#avl(_dryad_S1#3, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(right)))), ==(old(_dryad_S0#2, avl_reach(right)), old(_dryad_S1#3, avl_reach(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_reach(_dryad_S0#2, $phys_ptr_cast(L#right, ^a_node)) == F#avl_reach(_dryad_S1#3, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(right)))), ==(old(_dryad_S0#2, avl_height(right)), old(_dryad_S1#3, avl_height(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_height(_dryad_S0#2, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height(_dryad_S1#3, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(right)))), ==(old(_dryad_S0#2, avl_keys(right)), old(_dryad_S1#3, avl_keys(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_keys(_dryad_S0#2, $phys_ptr_cast(L#right, ^a_node)) == F#avl_keys(_dryad_S1#3, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(right)))), ==(old(_dryad_S0#2, avl_max_key(right)), old(_dryad_S1#3, avl_max_key(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_max_key(_dryad_S0#2, $phys_ptr_cast(L#right, ^a_node)) == F#avl_max_key(_dryad_S1#3, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(right)))), ==(old(_dryad_S0#2, avl_min_key(right)), old(_dryad_S1#3, avl_min_key(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_min_key(_dryad_S0#2, $phys_ptr_cast(L#right, ^a_node)) == F#avl_min_key(_dryad_S1#3, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(left)))), ==(old(_dryad_S0#2, avl(left)), old(_dryad_S1#3, avl(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl(_dryad_S0#2, $phys_ptr_cast(L#left, ^a_node)) == F#avl(_dryad_S1#3, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(left)))), ==(old(_dryad_S0#2, avl_reach(left)), old(_dryad_S1#3, avl_reach(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_reach(_dryad_S0#2, $phys_ptr_cast(L#left, ^a_node)) == F#avl_reach(_dryad_S1#3, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(left)))), ==(old(_dryad_S0#2, avl_height(left)), old(_dryad_S1#3, avl_height(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_height(_dryad_S0#2, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height(_dryad_S1#3, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(left)))), ==(old(_dryad_S0#2, avl_keys(left)), old(_dryad_S1#3, avl_keys(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_keys(_dryad_S0#2, $phys_ptr_cast(L#left, ^a_node)) == F#avl_keys(_dryad_S1#3, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(left)))), ==(old(_dryad_S0#2, avl_max_key(left)), old(_dryad_S1#3, avl_max_key(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_max_key(_dryad_S0#2, $phys_ptr_cast(L#left, ^a_node)) == F#avl_max_key(_dryad_S1#3, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#2, avl_reach(left)))), ==(old(_dryad_S0#2, avl_min_key(left)), old(_dryad_S1#3, avl_min_key(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#2, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_min_key(_dryad_S0#2, $phys_ptr_cast(L#left, ^a_node)) == F#avl_min_key(_dryad_S1#3, $phys_ptr_cast(L#left, ^a_node));
                        // return left; 
                        $result := $phys_ptr_cast(L#left, ^a_node);
                        assume true;
                        assert $position_marker();
                        goto #exit;
                    }
                    else
                    {
                      anon5:
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl(right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((right->left))), avl(*((right->right)))), unchecked!(@_vcc_oset_in(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))), unchecked!(@_vcc_intset_in(*((right->key)), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))), @_vcc_oset_disjoint(avl_reach(*((right->left))), avl_reach(*((right->right))))), @_vcc_intset_disjoint(avl_keys(*((right->left))), avl_keys(*((right->right))))), ==>(@_vcc_ptr_neq_null(*((right->left))), <(avl_max_key(*((right->left))), *((right->key))))), ==>(@_vcc_ptr_neq_null(*((right->right))), <(*((right->key)), avl_min_key(*((right->right)))))), ||(||(&&(==(avl_height(*((right->left))), avl_height(*((right->right)))), ==(*((right->height)), +(avl_height(*((right->left))), 1))), &&(==(avl_height(*((right->left))), +(avl_height(*((right->right))), 1)), ==(*((right->height)), +(avl_height(*((right->left))), 1)))), &&(==(avl_height(*((right->right))), +(avl_height(*((right->left))), 1)), ==(*((right->height)), +(avl_height(*((right->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_reach(right), @_vcc_oset_union_one1(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_height(right), @ite(>(avl_height(*((right->left))), avl_height(*((right->right)))), +(avl_height(*((right->left))), 1), +(avl_height(*((right->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_keys(right), @_vcc_intset_union(@_vcc_intset_singleton(*((right->key))), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), @\int_max(avl_max_key(*((right->left))), avl_max_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), @\int_min(avl_min_key(*((right->left))), avl_min_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl(left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((left->left))), avl(*((left->right)))), unchecked!(@_vcc_oset_in(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))), unchecked!(@_vcc_intset_in(*((left->key)), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))), @_vcc_oset_disjoint(avl_reach(*((left->left))), avl_reach(*((left->right))))), @_vcc_intset_disjoint(avl_keys(*((left->left))), avl_keys(*((left->right))))), ==>(@_vcc_ptr_neq_null(*((left->left))), <(avl_max_key(*((left->left))), *((left->key))))), ==>(@_vcc_ptr_neq_null(*((left->right))), <(*((left->key)), avl_min_key(*((left->right)))))), ||(||(&&(==(avl_height(*((left->left))), avl_height(*((left->right)))), ==(*((left->height)), +(avl_height(*((left->left))), 1))), &&(==(avl_height(*((left->left))), +(avl_height(*((left->right))), 1)), ==(*((left->height)), +(avl_height(*((left->left))), 1)))), &&(==(avl_height(*((left->right))), +(avl_height(*((left->left))), 1)), ==(*((left->height)), +(avl_height(*((left->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_reach(left), @_vcc_oset_union_one1(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_height(left), @ite(>(avl_height(*((left->left))), avl_height(*((left->right)))), +(avl_height(*((left->left))), 1), +(avl_height(*((left->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_keys(left), @_vcc_intset_union(@_vcc_intset_singleton(*((left->key))), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), @\int_max(avl_max_key(*((left->left))), avl_max_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), @\int_min(avl_min_key(*((left->left))), avl_min_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // struct a_node* new_right; 
                        // int32_t succ; 
                        // _math \state _dryad_S0#4; 
                        // _dryad_S0#4 := @_vcc_current_state(@state); 
                        _dryad_S0#4 := $current_state($s);
                        // _math \state stmtexpr0#16; 
                        // stmtexpr0#16 := _dryad_S0#4; 
                        stmtexpr0#16 := _dryad_S0#4;
                        // non-pure function
                        // succ := avl_find_smallest(right); 
                        call L#succ := avl_find_smallest($phys_ptr_cast(L#right, ^a_node));
                        assume $full_stop_ext(#tok$3^115.16, $s);
                        // _math \state _dryad_S1#5; 
                        // _dryad_S1#5 := @_vcc_current_state(@state); 
                        _dryad_S1#5 := $current_state($s);
                        // _math \state stmtexpr1#17; 
                        // stmtexpr1#17 := _dryad_S1#5; 
                        stmtexpr1#17 := _dryad_S1#5;
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl(new_right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((new_right->left))), avl(*((new_right->right)))), unchecked!(@_vcc_oset_in(new_right, @_vcc_oset_union(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))))), unchecked!(@_vcc_intset_in(*((new_right->key)), @_vcc_intset_union(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))))), @_vcc_oset_disjoint(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))), @_vcc_intset_disjoint(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))), ==>(@_vcc_ptr_neq_null(*((new_right->left))), <(avl_max_key(*((new_right->left))), *((new_right->key))))), ==>(@_vcc_ptr_neq_null(*((new_right->right))), <(*((new_right->key)), avl_min_key(*((new_right->right)))))), ||(||(&&(==(avl_height(*((new_right->left))), avl_height(*((new_right->right)))), ==(*((new_right->height)), +(avl_height(*((new_right->left))), 1))), &&(==(avl_height(*((new_right->left))), +(avl_height(*((new_right->right))), 1)), ==(*((new_right->height)), +(avl_height(*((new_right->left))), 1)))), &&(==(avl_height(*((new_right->right))), +(avl_height(*((new_right->left))), 1)), ==(*((new_right->height)), +(avl_height(*((new_right->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#new_right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#new_right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_reach(new_right), @_vcc_oset_union_one1(new_right, @_vcc_oset_union(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#new_right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#new_right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_height(new_right), @ite(>(avl_height(*((new_right->left))), avl_height(*((new_right->right)))), +(avl_height(*((new_right->left))), 1), +(avl_height(*((new_right->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#new_right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_keys(new_right), @_vcc_intset_union(@_vcc_intset_singleton(*((new_right->key))), @_vcc_intset_union(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#new_right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), @\int_max(avl_max_key(*((new_right->left))), avl_max_key(*((new_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_eq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), avl_max_key(*((new_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), avl_max_key(*((new_right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), @\int_min(avl_min_key(*((new_right->left))), avl_min_key(*((new_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_eq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), avl_min_key(*((new_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), avl_min_key(*((new_right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl(right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((right->left))), avl(*((right->right)))), unchecked!(@_vcc_oset_in(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))), unchecked!(@_vcc_intset_in(*((right->key)), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))), @_vcc_oset_disjoint(avl_reach(*((right->left))), avl_reach(*((right->right))))), @_vcc_intset_disjoint(avl_keys(*((right->left))), avl_keys(*((right->right))))), ==>(@_vcc_ptr_neq_null(*((right->left))), <(avl_max_key(*((right->left))), *((right->key))))), ==>(@_vcc_ptr_neq_null(*((right->right))), <(*((right->key)), avl_min_key(*((right->right)))))), ||(||(&&(==(avl_height(*((right->left))), avl_height(*((right->right)))), ==(*((right->height)), +(avl_height(*((right->left))), 1))), &&(==(avl_height(*((right->left))), +(avl_height(*((right->right))), 1)), ==(*((right->height)), +(avl_height(*((right->left))), 1)))), &&(==(avl_height(*((right->right))), +(avl_height(*((right->left))), 1)), ==(*((right->height)), +(avl_height(*((right->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_reach(right), @_vcc_oset_union_one1(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_height(right), @ite(>(avl_height(*((right->left))), avl_height(*((right->right)))), +(avl_height(*((right->left))), 1), +(avl_height(*((right->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_keys(right), @_vcc_intset_union(@_vcc_intset_singleton(*((right->key))), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), @\int_max(avl_max_key(*((right->left))), avl_max_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), @\int_min(avl_min_key(*((right->left))), avl_min_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl(left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((left->left))), avl(*((left->right)))), unchecked!(@_vcc_oset_in(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))), unchecked!(@_vcc_intset_in(*((left->key)), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))), @_vcc_oset_disjoint(avl_reach(*((left->left))), avl_reach(*((left->right))))), @_vcc_intset_disjoint(avl_keys(*((left->left))), avl_keys(*((left->right))))), ==>(@_vcc_ptr_neq_null(*((left->left))), <(avl_max_key(*((left->left))), *((left->key))))), ==>(@_vcc_ptr_neq_null(*((left->right))), <(*((left->key)), avl_min_key(*((left->right)))))), ||(||(&&(==(avl_height(*((left->left))), avl_height(*((left->right)))), ==(*((left->height)), +(avl_height(*((left->left))), 1))), &&(==(avl_height(*((left->left))), +(avl_height(*((left->right))), 1)), ==(*((left->height)), +(avl_height(*((left->left))), 1)))), &&(==(avl_height(*((left->right))), +(avl_height(*((left->left))), 1)), ==(*((left->height)), +(avl_height(*((left->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_reach(left), @_vcc_oset_union_one1(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_height(left), @ite(>(avl_height(*((left->left))), avl_height(*((left->right)))), +(avl_height(*((left->left))), 1), +(avl_height(*((left->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_keys(left), @_vcc_intset_union(@_vcc_intset_singleton(*((left->key))), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), @\int_max(avl_max_key(*((left->left))), avl_max_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), @\int_min(avl_min_key(*((left->left))), avl_min_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(new_right)))), ==(old(_dryad_S0#4, avl(new_right)), old(_dryad_S1#5, avl(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl(_dryad_S0#4, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl(_dryad_S1#5, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(new_right)))), ==(old(_dryad_S0#4, avl_reach(new_right)), old(_dryad_S1#5, avl_reach(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_reach(_dryad_S1#5, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(new_right)))), ==(old(_dryad_S0#4, avl_height(new_right)), old(_dryad_S1#5, avl_height(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_height(_dryad_S0#4, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height(_dryad_S1#5, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(new_right)))), ==(old(_dryad_S0#4, avl_keys(new_right)), old(_dryad_S1#5, avl_keys(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_keys(_dryad_S0#4, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_keys(_dryad_S1#5, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(new_right)))), ==(old(_dryad_S0#4, avl_max_key(new_right)), old(_dryad_S1#5, avl_max_key(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_max_key(_dryad_S0#4, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_max_key(_dryad_S1#5, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(new_right)))), ==(old(_dryad_S0#4, avl_min_key(new_right)), old(_dryad_S1#5, avl_min_key(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_min_key(_dryad_S0#4, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_min_key(_dryad_S1#5, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x1)))), ==(old(_dryad_S0#4, avl(x1)), old(_dryad_S1#5, avl(x1)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl(_dryad_S1#5, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x1)))), ==(old(_dryad_S0#4, avl_reach(x1)), old(_dryad_S1#5, avl_reach(x1)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_reach(_dryad_S1#5, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x1)))), ==(old(_dryad_S0#4, avl_height(x1)), old(_dryad_S1#5, avl_height(x1)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_height(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height(_dryad_S1#5, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x1)))), ==(old(_dryad_S0#4, avl_keys(x1)), old(_dryad_S1#5, avl_keys(x1)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_keys(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_keys(_dryad_S1#5, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x1)))), ==(old(_dryad_S0#4, avl_max_key(x1)), old(_dryad_S1#5, avl_max_key(x1)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_max_key(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_max_key(_dryad_S1#5, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x1)))), ==(old(_dryad_S0#4, avl_min_key(x1)), old(_dryad_S1#5, avl_min_key(x1)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_min_key(_dryad_S0#4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_min_key(_dryad_S1#5, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x0)))), ==(old(_dryad_S0#4, avl(x0)), old(_dryad_S1#5, avl(x0)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl(_dryad_S1#5, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x0)))), ==(old(_dryad_S0#4, avl_reach(x0)), old(_dryad_S1#5, avl_reach(x0)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_reach(_dryad_S1#5, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x0)))), ==(old(_dryad_S0#4, avl_height(x0)), old(_dryad_S1#5, avl_height(x0)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_height(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height(_dryad_S1#5, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x0)))), ==(old(_dryad_S0#4, avl_keys(x0)), old(_dryad_S1#5, avl_keys(x0)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_keys(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_keys(_dryad_S1#5, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x0)))), ==(old(_dryad_S0#4, avl_max_key(x0)), old(_dryad_S1#5, avl_max_key(x0)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_max_key(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_max_key(_dryad_S1#5, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x0)))), ==(old(_dryad_S0#4, avl_min_key(x0)), old(_dryad_S1#5, avl_min_key(x0)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_min_key(_dryad_S0#4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_min_key(_dryad_S1#5, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(right)))), ==(old(_dryad_S0#4, avl(right)), old(_dryad_S1#5, avl(right)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl(_dryad_S0#4, $phys_ptr_cast(L#right, ^a_node)) == F#avl(_dryad_S1#5, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(right)))), ==(old(_dryad_S0#4, avl_reach(right)), old(_dryad_S1#5, avl_reach(right)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#right, ^a_node)) == F#avl_reach(_dryad_S1#5, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(right)))), ==(old(_dryad_S0#4, avl_height(right)), old(_dryad_S1#5, avl_height(right)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_height(_dryad_S0#4, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height(_dryad_S1#5, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(right)))), ==(old(_dryad_S0#4, avl_keys(right)), old(_dryad_S1#5, avl_keys(right)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_keys(_dryad_S0#4, $phys_ptr_cast(L#right, ^a_node)) == F#avl_keys(_dryad_S1#5, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(right)))), ==(old(_dryad_S0#4, avl_max_key(right)), old(_dryad_S1#5, avl_max_key(right)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_max_key(_dryad_S0#4, $phys_ptr_cast(L#right, ^a_node)) == F#avl_max_key(_dryad_S1#5, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(right)))), ==(old(_dryad_S0#4, avl_min_key(right)), old(_dryad_S1#5, avl_min_key(right)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_min_key(_dryad_S0#4, $phys_ptr_cast(L#right, ^a_node)) == F#avl_min_key(_dryad_S1#5, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(left)))), ==(old(_dryad_S0#4, avl(left)), old(_dryad_S1#5, avl(left)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl(_dryad_S0#4, $phys_ptr_cast(L#left, ^a_node)) == F#avl(_dryad_S1#5, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(left)))), ==(old(_dryad_S0#4, avl_reach(left)), old(_dryad_S1#5, avl_reach(left)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#left, ^a_node)) == F#avl_reach(_dryad_S1#5, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(left)))), ==(old(_dryad_S0#4, avl_height(left)), old(_dryad_S1#5, avl_height(left)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_height(_dryad_S0#4, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height(_dryad_S1#5, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(left)))), ==(old(_dryad_S0#4, avl_keys(left)), old(_dryad_S1#5, avl_keys(left)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_keys(_dryad_S0#4, $phys_ptr_cast(L#left, ^a_node)) == F#avl_keys(_dryad_S1#5, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(left)))), ==(old(_dryad_S0#4, avl_max_key(left)), old(_dryad_S1#5, avl_max_key(left)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_max_key(_dryad_S0#4, $phys_ptr_cast(L#left, ^a_node)) == F#avl_max_key(_dryad_S1#5, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(left)))), ==(old(_dryad_S0#4, avl_min_key(left)), old(_dryad_S1#5, avl_min_key(left)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_min_key(_dryad_S0#4, $phys_ptr_cast(L#left, ^a_node)) == F#avl_min_key(_dryad_S1#5, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x)))), ==(old(_dryad_S0#4, avl(x)), old(_dryad_S1#5, avl(x)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node)) == F#avl(_dryad_S1#5, $phys_ptr_cast(P#x, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x)))), ==(old(_dryad_S0#4, avl_reach(x)), old(_dryad_S1#5, avl_reach(x)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_reach(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_reach(_dryad_S1#5, $phys_ptr_cast(P#x, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x)))), ==(old(_dryad_S0#4, avl_height(x)), old(_dryad_S1#5, avl_height(x)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_height(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height(_dryad_S1#5, $phys_ptr_cast(P#x, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x)))), ==(old(_dryad_S0#4, avl_keys(x)), old(_dryad_S1#5, avl_keys(x)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_keys(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_keys(_dryad_S1#5, $phys_ptr_cast(P#x, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x)))), ==(old(_dryad_S0#4, avl_max_key(x)), old(_dryad_S1#5, avl_max_key(x)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_max_key(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_max_key(_dryad_S1#5, $phys_ptr_cast(P#x, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(x)))), ==(old(_dryad_S0#4, avl_min_key(x)), old(_dryad_S1#5, avl_min_key(x)))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_min_key(_dryad_S0#4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_min_key(_dryad_S1#5, $phys_ptr_cast(P#x, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(*((right->left)))))), ==(old(_dryad_S0#4, avl(*((right->left)))), old(_dryad_S1#5, avl(*((right->left)))))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node))) ==> F#avl(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl(_dryad_S1#5, $rd_phys_ptr(_dryad_S1#5, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(*((right->left)))))), ==(old(_dryad_S0#4, avl_reach(*((right->left)))), old(_dryad_S1#5, avl_reach(*((right->left)))))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node))) ==> F#avl_reach(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_reach(_dryad_S1#5, $rd_phys_ptr(_dryad_S1#5, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(*((right->left)))))), ==(old(_dryad_S0#4, avl_height(*((right->left)))), old(_dryad_S1#5, avl_height(*((right->left)))))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node))) ==> F#avl_height(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height(_dryad_S1#5, $rd_phys_ptr(_dryad_S1#5, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(*((right->left)))))), ==(old(_dryad_S0#4, avl_keys(*((right->left)))), old(_dryad_S1#5, avl_keys(*((right->left)))))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node))) ==> F#avl_keys(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_keys(_dryad_S1#5, $rd_phys_ptr(_dryad_S1#5, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(*((right->left)))))), ==(old(_dryad_S0#4, avl_max_key(*((right->left)))), old(_dryad_S1#5, avl_max_key(*((right->left)))))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node))) ==> F#avl_max_key(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_max_key(_dryad_S1#5, $rd_phys_ptr(_dryad_S1#5, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(*((right->left)))))), ==(old(_dryad_S0#4, avl_min_key(*((right->left)))), old(_dryad_S1#5, avl_min_key(*((right->left)))))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node))) ==> F#avl_min_key(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_min_key(_dryad_S1#5, $rd_phys_ptr(_dryad_S1#5, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(*((right->right)))))), ==(old(_dryad_S0#4, avl(*((right->right)))), old(_dryad_S1#5, avl(*((right->right)))))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) ==> F#avl(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl(_dryad_S1#5, $rd_phys_ptr(_dryad_S1#5, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(*((right->right)))))), ==(old(_dryad_S0#4, avl_reach(*((right->right)))), old(_dryad_S1#5, avl_reach(*((right->right)))))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) ==> F#avl_reach(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_reach(_dryad_S1#5, $rd_phys_ptr(_dryad_S1#5, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(*((right->right)))))), ==(old(_dryad_S0#4, avl_height(*((right->right)))), old(_dryad_S1#5, avl_height(*((right->right)))))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) ==> F#avl_height(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height(_dryad_S1#5, $rd_phys_ptr(_dryad_S1#5, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(*((right->right)))))), ==(old(_dryad_S0#4, avl_keys(*((right->right)))), old(_dryad_S1#5, avl_keys(*((right->right)))))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) ==> F#avl_keys(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_keys(_dryad_S1#5, $rd_phys_ptr(_dryad_S1#5, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(*((right->right)))))), ==(old(_dryad_S0#4, avl_max_key(*((right->right)))), old(_dryad_S1#5, avl_max_key(*((right->right)))))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) ==> F#avl_max_key(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_max_key(_dryad_S1#5, $rd_phys_ptr(_dryad_S1#5, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(right, old(_dryad_S0#4, avl_reach(*((right->right)))))), ==(old(_dryad_S0#4, avl_min_key(*((right->right)))), old(_dryad_S1#5, avl_min_key(*((right->right)))))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) ==> F#avl_min_key(_dryad_S0#4, $rd_phys_ptr(_dryad_S0#4, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_min_key(_dryad_S1#5, $rd_phys_ptr(_dryad_S1#5, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node));
                        // _math \state _dryad_S2; 
                        // _dryad_S2 := @_vcc_current_state(@state); 
                        SL#_dryad_S2 := $current_state($s);
                        // _math \state stmtexpr2#18; 
                        // stmtexpr2#18 := _dryad_S2; 
                        stmtexpr2#18 := SL#_dryad_S2;
                        // non-pure function
                        // new_right := avl_delete(right, succ); 
                        call L#new_right := avl_delete($phys_ptr_cast(L#right, ^a_node), L#succ);
                        assume $full_stop_ext(#tok$3^117.27, $s);
                        // _math \state _dryad_S3; 
                        // _dryad_S3 := @_vcc_current_state(@state); 
                        SL#_dryad_S3 := $current_state($s);
                        // _math \state stmtexpr3#19; 
                        // stmtexpr3#19 := _dryad_S3; 
                        stmtexpr3#19 := SL#_dryad_S3;
                        // assume @_vcc_oset_disjoint(avl_reach(new_right), @_vcc_oset_diff(_dryad_G1, old(_dryad_S2, avl_reach(right)))); 
                        assume $oset_disjoint(F#avl_reach($s, $phys_ptr_cast(L#new_right, ^a_node)), $oset_diff(SL#_dryad_G1, F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))));
                        // _math \oset res_avl_reach#2; 
                        // res_avl_reach#2 := avl_reach(new_right); 
                        call res_avl_reach#2 := avl_reach($phys_ptr_cast(L#new_right, ^a_node));
                        assume $full_stop_ext(#tok$4^0.0, $s);
                        // _dryad_G1 := @_vcc_oset_union(res_avl_reach#2, @_vcc_oset_diff(_dryad_G1, pure(old(_dryad_S2, avl_reach(right))))); 
                        SL#_dryad_G1 := $oset_union(res_avl_reach#2, $oset_diff(SL#_dryad_G1, F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))));
                        // _math \oset stmtexpr4#20; 
                        // stmtexpr4#20 := _dryad_G1; 
                        stmtexpr4#20 := SL#_dryad_G1;
                        // assume ==(glob_reach(), _dryad_G1); 
                        assume F#glob_reach() == SL#_dryad_G1;
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x1))), ==(old(_dryad_S2, avl(x1)), old(_dryad_S3, avl(x1)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl(SL#_dryad_S3, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x1))), ==(old(_dryad_S2, avl_reach(x1)), old(_dryad_S3, avl_reach(x1)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_reach(SL#_dryad_S3, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x1))), ==(old(_dryad_S2, avl_height(x1)), old(_dryad_S3, avl_height(x1)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_height(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height(SL#_dryad_S3, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x1))), ==(old(_dryad_S2, avl_keys(x1)), old(_dryad_S3, avl_keys(x1)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_keys(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_keys(SL#_dryad_S3, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x1))), ==(old(_dryad_S2, avl_max_key(x1)), old(_dryad_S3, avl_max_key(x1)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_max_key(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_max_key(SL#_dryad_S3, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x1))), ==(old(_dryad_S2, avl_min_key(x1)), old(_dryad_S3, avl_min_key(x1)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_min_key(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_min_key(SL#_dryad_S3, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x0))), ==(old(_dryad_S2, avl(x0)), old(_dryad_S3, avl(x0)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl(SL#_dryad_S2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl(SL#_dryad_S3, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x0))), ==(old(_dryad_S2, avl_reach(x0)), old(_dryad_S3, avl_reach(x0)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_reach(SL#_dryad_S3, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x0))), ==(old(_dryad_S2, avl_height(x0)), old(_dryad_S3, avl_height(x0)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_height(SL#_dryad_S2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height(SL#_dryad_S3, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x0))), ==(old(_dryad_S2, avl_keys(x0)), old(_dryad_S3, avl_keys(x0)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_keys(SL#_dryad_S2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_keys(SL#_dryad_S3, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x0))), ==(old(_dryad_S2, avl_max_key(x0)), old(_dryad_S3, avl_max_key(x0)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_max_key(SL#_dryad_S2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_max_key(SL#_dryad_S3, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x0))), ==(old(_dryad_S2, avl_min_key(x0)), old(_dryad_S3, avl_min_key(x0)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_min_key(SL#_dryad_S2, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_min_key(SL#_dryad_S3, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(right))), ==(old(_dryad_S2, avl(right)), old(_dryad_S3, avl(right)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)) == F#avl(SL#_dryad_S3, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(right))), ==(old(_dryad_S2, avl_reach(right)), old(_dryad_S3, avl_reach(right)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)) == F#avl_reach(SL#_dryad_S3, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(right))), ==(old(_dryad_S2, avl_height(right)), old(_dryad_S3, avl_height(right)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_height(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height(SL#_dryad_S3, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(right))), ==(old(_dryad_S2, avl_keys(right)), old(_dryad_S3, avl_keys(right)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_keys(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)) == F#avl_keys(SL#_dryad_S3, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(right))), ==(old(_dryad_S2, avl_max_key(right)), old(_dryad_S3, avl_max_key(right)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_max_key(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)) == F#avl_max_key(SL#_dryad_S3, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(right))), ==(old(_dryad_S2, avl_min_key(right)), old(_dryad_S3, avl_min_key(right)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_min_key(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)) == F#avl_min_key(SL#_dryad_S3, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(left))), ==(old(_dryad_S2, avl(left)), old(_dryad_S3, avl(left)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl(SL#_dryad_S2, $phys_ptr_cast(L#left, ^a_node)) == F#avl(SL#_dryad_S3, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(left))), ==(old(_dryad_S2, avl_reach(left)), old(_dryad_S3, avl_reach(left)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#left, ^a_node)) == F#avl_reach(SL#_dryad_S3, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(left))), ==(old(_dryad_S2, avl_height(left)), old(_dryad_S3, avl_height(left)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_height(SL#_dryad_S2, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height(SL#_dryad_S3, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(left))), ==(old(_dryad_S2, avl_keys(left)), old(_dryad_S3, avl_keys(left)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_keys(SL#_dryad_S2, $phys_ptr_cast(L#left, ^a_node)) == F#avl_keys(SL#_dryad_S3, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(left))), ==(old(_dryad_S2, avl_max_key(left)), old(_dryad_S3, avl_max_key(left)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_max_key(SL#_dryad_S2, $phys_ptr_cast(L#left, ^a_node)) == F#avl_max_key(SL#_dryad_S3, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(left))), ==(old(_dryad_S2, avl_min_key(left)), old(_dryad_S3, avl_min_key(left)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_min_key(SL#_dryad_S2, $phys_ptr_cast(L#left, ^a_node)) == F#avl_min_key(SL#_dryad_S3, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x))), ==(old(_dryad_S2, avl(x)), old(_dryad_S3, avl(x)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node)) == F#avl(SL#_dryad_S3, $phys_ptr_cast(P#x, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x))), ==(old(_dryad_S2, avl_reach(x)), old(_dryad_S3, avl_reach(x)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node)) == F#avl_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x))), ==(old(_dryad_S2, avl_height(x)), old(_dryad_S3, avl_height(x)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_height(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height(SL#_dryad_S3, $phys_ptr_cast(P#x, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x))), ==(old(_dryad_S2, avl_keys(x)), old(_dryad_S3, avl_keys(x)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_keys(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node)) == F#avl_keys(SL#_dryad_S3, $phys_ptr_cast(P#x, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x))), ==(old(_dryad_S2, avl_max_key(x)), old(_dryad_S3, avl_max_key(x)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_max_key(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node)) == F#avl_max_key(SL#_dryad_S3, $phys_ptr_cast(P#x, ^a_node));
                        // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, avl_reach(right)), old(_dryad_S2, avl_reach(x))), ==(old(_dryad_S2, avl_min_key(x)), old(_dryad_S3, avl_min_key(x)))); 
                        assume $oset_disjoint(F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_min_key(SL#_dryad_S2, $phys_ptr_cast(P#x, ^a_node)) == F#avl_min_key(SL#_dryad_S3, $phys_ptr_cast(P#x, ^a_node));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl(new_right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((new_right->left))), avl(*((new_right->right)))), unchecked!(@_vcc_oset_in(new_right, @_vcc_oset_union(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))))), unchecked!(@_vcc_intset_in(*((new_right->key)), @_vcc_intset_union(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))))), @_vcc_oset_disjoint(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))), @_vcc_intset_disjoint(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))), ==>(@_vcc_ptr_neq_null(*((new_right->left))), <(avl_max_key(*((new_right->left))), *((new_right->key))))), ==>(@_vcc_ptr_neq_null(*((new_right->right))), <(*((new_right->key)), avl_min_key(*((new_right->right)))))), ||(||(&&(==(avl_height(*((new_right->left))), avl_height(*((new_right->right)))), ==(*((new_right->height)), +(avl_height(*((new_right->left))), 1))), &&(==(avl_height(*((new_right->left))), +(avl_height(*((new_right->right))), 1)), ==(*((new_right->height)), +(avl_height(*((new_right->left))), 1)))), &&(==(avl_height(*((new_right->right))), +(avl_height(*((new_right->left))), 1)), ==(*((new_right->height)), +(avl_height(*((new_right->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#new_right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#new_right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_reach(new_right), @_vcc_oset_union_one1(new_right, @_vcc_oset_union(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#new_right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#new_right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_height(new_right), @ite(>(avl_height(*((new_right->left))), avl_height(*((new_right->right)))), +(avl_height(*((new_right->left))), 1), +(avl_height(*((new_right->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#new_right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_keys(new_right), @_vcc_intset_union(@_vcc_intset_singleton(*((new_right->key))), @_vcc_intset_union(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#new_right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), @\int_max(avl_max_key(*((new_right->left))), avl_max_key(*((new_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_eq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), avl_max_key(*((new_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), avl_max_key(*((new_right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), @\int_min(avl_min_key(*((new_right->left))), avl_min_key(*((new_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_eq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), avl_min_key(*((new_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), avl_min_key(*((new_right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl(right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((right->left))), avl(*((right->right)))), unchecked!(@_vcc_oset_in(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))), unchecked!(@_vcc_intset_in(*((right->key)), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))), @_vcc_oset_disjoint(avl_reach(*((right->left))), avl_reach(*((right->right))))), @_vcc_intset_disjoint(avl_keys(*((right->left))), avl_keys(*((right->right))))), ==>(@_vcc_ptr_neq_null(*((right->left))), <(avl_max_key(*((right->left))), *((right->key))))), ==>(@_vcc_ptr_neq_null(*((right->right))), <(*((right->key)), avl_min_key(*((right->right)))))), ||(||(&&(==(avl_height(*((right->left))), avl_height(*((right->right)))), ==(*((right->height)), +(avl_height(*((right->left))), 1))), &&(==(avl_height(*((right->left))), +(avl_height(*((right->right))), 1)), ==(*((right->height)), +(avl_height(*((right->left))), 1)))), &&(==(avl_height(*((right->right))), +(avl_height(*((right->left))), 1)), ==(*((right->height)), +(avl_height(*((right->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_reach(right), @_vcc_oset_union_one1(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_height(right), @ite(>(avl_height(*((right->left))), avl_height(*((right->right)))), +(avl_height(*((right->left))), 1), +(avl_height(*((right->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_keys(right), @_vcc_intset_union(@_vcc_intset_singleton(*((right->key))), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), @\int_max(avl_max_key(*((right->left))), avl_max_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), @\int_min(avl_min_key(*((right->left))), avl_min_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl(left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((left->left))), avl(*((left->right)))), unchecked!(@_vcc_oset_in(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))), unchecked!(@_vcc_intset_in(*((left->key)), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))), @_vcc_oset_disjoint(avl_reach(*((left->left))), avl_reach(*((left->right))))), @_vcc_intset_disjoint(avl_keys(*((left->left))), avl_keys(*((left->right))))), ==>(@_vcc_ptr_neq_null(*((left->left))), <(avl_max_key(*((left->left))), *((left->key))))), ==>(@_vcc_ptr_neq_null(*((left->right))), <(*((left->key)), avl_min_key(*((left->right)))))), ||(||(&&(==(avl_height(*((left->left))), avl_height(*((left->right)))), ==(*((left->height)), +(avl_height(*((left->left))), 1))), &&(==(avl_height(*((left->left))), +(avl_height(*((left->right))), 1)), ==(*((left->height)), +(avl_height(*((left->left))), 1)))), &&(==(avl_height(*((left->right))), +(avl_height(*((left->left))), 1)), ==(*((left->height)), +(avl_height(*((left->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_reach(left), @_vcc_oset_union_one1(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_height(left), @ite(>(avl_height(*((left->left))), avl_height(*((left->right)))), +(avl_height(*((left->left))), 1), +(avl_height(*((left->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_keys(left), @_vcc_intset_union(@_vcc_intset_singleton(*((left->key))), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), @\int_max(avl_max_key(*((left->left))), avl_max_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), @\int_min(avl_min_key(*((left->left))), avl_min_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S2, avl_reach(right)))), @_vcc_ptr_eq_pure(*((x1->left)), old(_dryad_S2, *((x1->left))))); 
                        assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S2, avl_reach(right)))), @_vcc_ptr_eq_pure(*((x1->right)), old(_dryad_S2, *((x1->right))))); 
                        assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S2, avl_reach(right)))), ==(*((x1->key)), old(_dryad_S2, *((x1->key))))); 
                        assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(SL#_dryad_S2, a_node.key, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S2, avl_reach(right)))), ==(*((x1->height)), old(_dryad_S2, *((x1->height))))); 
                        assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(SL#_dryad_S2, a_node.height, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S2, avl_reach(right)))), @_vcc_ptr_eq_pure(*((x0->left)), old(_dryad_S2, *((x0->left))))); 
                        assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S2, avl_reach(right)))), @_vcc_ptr_eq_pure(*((x0->right)), old(_dryad_S2, *((x0->right))))); 
                        assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S2, avl_reach(right)))), ==(*((x0->key)), old(_dryad_S2, *((x0->key))))); 
                        assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(SL#_dryad_S2, a_node.key, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S2, avl_reach(right)))), ==(*((x0->height)), old(_dryad_S2, *((x0->height))))); 
                        assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(SL#_dryad_S2, a_node.height, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(!(@_vcc_oset_in(right, old(_dryad_S2, avl_reach(right)))), @_vcc_ptr_eq_pure(*((right->left)), old(_dryad_S2, *((right->left))))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_oset_in(right, old(_dryad_S2, avl_reach(right)))), @_vcc_ptr_eq_pure(*((right->right)), old(_dryad_S2, *((right->right))))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_oset_in(right, old(_dryad_S2, avl_reach(right)))), ==(*((right->key)), old(_dryad_S2, *((right->key))))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) == $rd_inv(SL#_dryad_S2, a_node.key, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(!(@_vcc_oset_in(right, old(_dryad_S2, avl_reach(right)))), ==(*((right->height)), old(_dryad_S2, *((right->height))))); 
                        assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == $rd_inv(SL#_dryad_S2, a_node.height, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(!(@_vcc_oset_in(left, old(_dryad_S2, avl_reach(right)))), @_vcc_ptr_eq_pure(*((left->left)), old(_dryad_S2, *((left->left))))); 
                        assume !$oset_in($phys_ptr_cast(L#left, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_oset_in(left, old(_dryad_S2, avl_reach(right)))), @_vcc_ptr_eq_pure(*((left->right)), old(_dryad_S2, *((left->right))))); 
                        assume !$oset_in($phys_ptr_cast(L#left, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_oset_in(left, old(_dryad_S2, avl_reach(right)))), ==(*((left->key)), old(_dryad_S2, *((left->key))))); 
                        assume !$oset_in($phys_ptr_cast(L#left, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) == $rd_inv(SL#_dryad_S2, a_node.key, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(!(@_vcc_oset_in(left, old(_dryad_S2, avl_reach(right)))), ==(*((left->height)), old(_dryad_S2, *((left->height))))); 
                        assume !$oset_in($phys_ptr_cast(L#left, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == $rd_inv(SL#_dryad_S2, a_node.height, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S2, avl_reach(right)))), @_vcc_ptr_eq_pure(*((x->left)), old(_dryad_S2, *((x->left))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S2, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S2, avl_reach(right)))), @_vcc_ptr_eq_pure(*((x->right)), old(_dryad_S2, *((x->right))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S2, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S2, avl_reach(right)))), ==(*((x->key)), old(_dryad_S2, *((x->key))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(SL#_dryad_S2, a_node.key, $phys_ptr_cast(P#x, ^a_node));
                        // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S2, avl_reach(right)))), ==(*((x->height)), old(_dryad_S2, *((x->height))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S2, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(SL#_dryad_S2, a_node.height, $phys_ptr_cast(P#x, ^a_node));
                        // _math \state _dryad_S4; 
                        // _dryad_S4 := @_vcc_current_state(@state); 
                        SL#_dryad_S4 := $current_state($s);
                        // _math \state stmtexpr5#21; 
                        // stmtexpr5#21 := _dryad_S4; 
                        stmtexpr5#21 := SL#_dryad_S4;
                        // assert @prim_writes_check((x->key)); 
                        assert $writable_prim($s, #wrTime$3^79.3, $dot($phys_ptr_cast(P#x, ^a_node), a_node.key));
                        // *(x->key) := succ; 
                        call $write_int(a_node.key, $phys_ptr_cast(P#x, ^a_node), L#succ);
                        assume $full_stop_ext(#tok$3^119.5, $s);
                        // _math \state _dryad_S5; 
                        // _dryad_S5 := @_vcc_current_state(@state); 
                        SL#_dryad_S5 := $current_state($s);
                        // _math \state stmtexpr6#22; 
                        // stmtexpr6#22 := _dryad_S5; 
                        stmtexpr6#22 := SL#_dryad_S5;
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(*((x->left)))))), ==(old(_dryad_S4, avl(*((x->left)))), old(_dryad_S5, avl(*((x->left)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(*((x->left)))))), ==(old(_dryad_S4, avl_reach(*((x->left)))), old(_dryad_S5, avl_reach(*((x->left)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_reach(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(*((x->left)))))), ==(old(_dryad_S4, avl_height(*((x->left)))), old(_dryad_S5, avl_height(*((x->left)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_height(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(*((x->left)))))), ==(old(_dryad_S4, avl_keys(*((x->left)))), old(_dryad_S5, avl_keys(*((x->left)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_keys(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_keys(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(*((x->left)))))), ==(old(_dryad_S4, avl_max_key(*((x->left)))), old(_dryad_S5, avl_max_key(*((x->left)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_max_key(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_max_key(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(*((x->left)))))), ==(old(_dryad_S4, avl_min_key(*((x->left)))), old(_dryad_S5, avl_min_key(*((x->left)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_min_key(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_min_key(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(*((x->right)))))), ==(old(_dryad_S4, avl(*((x->right)))), old(_dryad_S5, avl(*((x->right)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(*((x->right)))))), ==(old(_dryad_S4, avl_reach(*((x->right)))), old(_dryad_S5, avl_reach(*((x->right)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_reach(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(*((x->right)))))), ==(old(_dryad_S4, avl_height(*((x->right)))), old(_dryad_S5, avl_height(*((x->right)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_height(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(*((x->right)))))), ==(old(_dryad_S4, avl_keys(*((x->right)))), old(_dryad_S5, avl_keys(*((x->right)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_keys(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_keys(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(*((x->right)))))), ==(old(_dryad_S4, avl_max_key(*((x->right)))), old(_dryad_S5, avl_max_key(*((x->right)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_max_key(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_max_key(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(*((x->right)))))), ==(old(_dryad_S4, avl_min_key(*((x->right)))), old(_dryad_S5, avl_min_key(*((x->right)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_min_key(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_min_key(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==(old(_dryad_S4, avl_reach(new_right)), old(_dryad_S5, avl_reach(new_right))); 
                        assume F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_reach(SL#_dryad_S5, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==(old(_dryad_S4, avl_height(new_right)), old(_dryad_S5, avl_height(new_right))); 
                        assume F#avl_height(SL#_dryad_S4, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height(SL#_dryad_S5, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==(old(_dryad_S4, avl_reach(x1)), old(_dryad_S5, avl_reach(x1))); 
                        assume F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_reach(SL#_dryad_S5, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==(old(_dryad_S4, avl_height(x1)), old(_dryad_S5, avl_height(x1))); 
                        assume F#avl_height(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height(SL#_dryad_S5, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==(old(_dryad_S4, avl_reach(x0)), old(_dryad_S5, avl_reach(x0))); 
                        assume F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_reach(SL#_dryad_S5, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==(old(_dryad_S4, avl_height(x0)), old(_dryad_S5, avl_height(x0))); 
                        assume F#avl_height(SL#_dryad_S4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height(SL#_dryad_S5, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==(old(_dryad_S4, avl_reach(right)), old(_dryad_S5, avl_reach(right))); 
                        assume F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#right, ^a_node)) == F#avl_reach(SL#_dryad_S5, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==(old(_dryad_S4, avl_height(right)), old(_dryad_S5, avl_height(right))); 
                        assume F#avl_height(SL#_dryad_S4, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height(SL#_dryad_S5, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==(old(_dryad_S4, avl_reach(left)), old(_dryad_S5, avl_reach(left))); 
                        assume F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#left, ^a_node)) == F#avl_reach(SL#_dryad_S5, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==(old(_dryad_S4, avl_height(left)), old(_dryad_S5, avl_height(left))); 
                        assume F#avl_height(SL#_dryad_S4, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height(SL#_dryad_S5, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==(old(_dryad_S4, avl_reach(x)), old(_dryad_S5, avl_reach(x))); 
                        assume F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_reach(SL#_dryad_S5, $phys_ptr_cast(P#x, ^a_node));
                        // assume ==(old(_dryad_S4, avl_height(x)), old(_dryad_S5, avl_height(x))); 
                        assume F#avl_height(SL#_dryad_S4, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height(SL#_dryad_S5, $phys_ptr_cast(P#x, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(new_right)))), ==(old(_dryad_S4, avl(new_right)), old(_dryad_S5, avl(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl(SL#_dryad_S4, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl(SL#_dryad_S5, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(new_right)))), ==(old(_dryad_S4, avl_reach(new_right)), old(_dryad_S5, avl_reach(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_reach(SL#_dryad_S5, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(new_right)))), ==(old(_dryad_S4, avl_height(new_right)), old(_dryad_S5, avl_height(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_height(SL#_dryad_S4, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height(SL#_dryad_S5, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(new_right)))), ==(old(_dryad_S4, avl_keys(new_right)), old(_dryad_S5, avl_keys(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_keys(SL#_dryad_S4, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_keys(SL#_dryad_S5, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(new_right)))), ==(old(_dryad_S4, avl_max_key(new_right)), old(_dryad_S5, avl_max_key(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_max_key(SL#_dryad_S4, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_max_key(SL#_dryad_S5, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(new_right)))), ==(old(_dryad_S4, avl_min_key(new_right)), old(_dryad_S5, avl_min_key(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_min_key(SL#_dryad_S4, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_min_key(SL#_dryad_S5, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(x1)))), ==(old(_dryad_S4, avl(x1)), old(_dryad_S5, avl(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl(SL#_dryad_S5, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(x1)))), ==(old(_dryad_S4, avl_reach(x1)), old(_dryad_S5, avl_reach(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_reach(SL#_dryad_S5, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(x1)))), ==(old(_dryad_S4, avl_height(x1)), old(_dryad_S5, avl_height(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_height(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height(SL#_dryad_S5, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(x1)))), ==(old(_dryad_S4, avl_keys(x1)), old(_dryad_S5, avl_keys(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_keys(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_keys(SL#_dryad_S5, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(x1)))), ==(old(_dryad_S4, avl_max_key(x1)), old(_dryad_S5, avl_max_key(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_max_key(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_max_key(SL#_dryad_S5, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(x1)))), ==(old(_dryad_S4, avl_min_key(x1)), old(_dryad_S5, avl_min_key(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_min_key(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_min_key(SL#_dryad_S5, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(x0)))), ==(old(_dryad_S4, avl(x0)), old(_dryad_S5, avl(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl(SL#_dryad_S4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl(SL#_dryad_S5, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(x0)))), ==(old(_dryad_S4, avl_reach(x0)), old(_dryad_S5, avl_reach(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_reach(SL#_dryad_S5, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(x0)))), ==(old(_dryad_S4, avl_height(x0)), old(_dryad_S5, avl_height(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_height(SL#_dryad_S4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height(SL#_dryad_S5, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(x0)))), ==(old(_dryad_S4, avl_keys(x0)), old(_dryad_S5, avl_keys(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_keys(SL#_dryad_S4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_keys(SL#_dryad_S5, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(x0)))), ==(old(_dryad_S4, avl_max_key(x0)), old(_dryad_S5, avl_max_key(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_max_key(SL#_dryad_S4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_max_key(SL#_dryad_S5, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(x0)))), ==(old(_dryad_S4, avl_min_key(x0)), old(_dryad_S5, avl_min_key(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_min_key(SL#_dryad_S4, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_min_key(SL#_dryad_S5, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(right)))), ==(old(_dryad_S4, avl(right)), old(_dryad_S5, avl(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl(SL#_dryad_S4, $phys_ptr_cast(L#right, ^a_node)) == F#avl(SL#_dryad_S5, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(right)))), ==(old(_dryad_S4, avl_reach(right)), old(_dryad_S5, avl_reach(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#right, ^a_node)) == F#avl_reach(SL#_dryad_S5, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(right)))), ==(old(_dryad_S4, avl_height(right)), old(_dryad_S5, avl_height(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_height(SL#_dryad_S4, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height(SL#_dryad_S5, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(right)))), ==(old(_dryad_S4, avl_keys(right)), old(_dryad_S5, avl_keys(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_keys(SL#_dryad_S4, $phys_ptr_cast(L#right, ^a_node)) == F#avl_keys(SL#_dryad_S5, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(right)))), ==(old(_dryad_S4, avl_max_key(right)), old(_dryad_S5, avl_max_key(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_max_key(SL#_dryad_S4, $phys_ptr_cast(L#right, ^a_node)) == F#avl_max_key(SL#_dryad_S5, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(right)))), ==(old(_dryad_S4, avl_min_key(right)), old(_dryad_S5, avl_min_key(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_min_key(SL#_dryad_S4, $phys_ptr_cast(L#right, ^a_node)) == F#avl_min_key(SL#_dryad_S5, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(left)))), ==(old(_dryad_S4, avl(left)), old(_dryad_S5, avl(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl(SL#_dryad_S4, $phys_ptr_cast(L#left, ^a_node)) == F#avl(SL#_dryad_S5, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(left)))), ==(old(_dryad_S4, avl_reach(left)), old(_dryad_S5, avl_reach(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#left, ^a_node)) == F#avl_reach(SL#_dryad_S5, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(left)))), ==(old(_dryad_S4, avl_height(left)), old(_dryad_S5, avl_height(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_height(SL#_dryad_S4, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height(SL#_dryad_S5, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(left)))), ==(old(_dryad_S4, avl_keys(left)), old(_dryad_S5, avl_keys(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_keys(SL#_dryad_S4, $phys_ptr_cast(L#left, ^a_node)) == F#avl_keys(SL#_dryad_S5, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(left)))), ==(old(_dryad_S4, avl_max_key(left)), old(_dryad_S5, avl_max_key(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_max_key(SL#_dryad_S4, $phys_ptr_cast(L#left, ^a_node)) == F#avl_max_key(SL#_dryad_S5, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S4, avl_reach(left)))), ==(old(_dryad_S4, avl_min_key(left)), old(_dryad_S5, avl_min_key(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S4, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_min_key(SL#_dryad_S4, $phys_ptr_cast(L#left, ^a_node)) == F#avl_min_key(SL#_dryad_S5, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, new_right)), @_vcc_ptr_eq_pure(*((new_right->left)), old(_dryad_S4, *((new_right->left))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_right, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, new_right)), @_vcc_ptr_eq_pure(*((new_right->right)), old(_dryad_S4, *((new_right->right))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_right, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, new_right)), ==(*((new_right->key)), old(_dryad_S4, *((new_right->key))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_right, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)) == $rd_inv(SL#_dryad_S4, a_node.key, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, new_right)), ==(*((new_right->height)), old(_dryad_S4, *((new_right->height))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_right, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == $rd_inv(SL#_dryad_S4, a_node.height, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), @_vcc_ptr_eq_pure(*((x1->left)), old(_dryad_S4, *((x1->left))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), @_vcc_ptr_eq_pure(*((x1->right)), old(_dryad_S4, *((x1->right))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), ==(*((x1->key)), old(_dryad_S4, *((x1->key))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(SL#_dryad_S4, a_node.key, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), ==(*((x1->height)), old(_dryad_S4, *((x1->height))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(SL#_dryad_S4, a_node.height, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), @_vcc_ptr_eq_pure(*((x0->left)), old(_dryad_S4, *((x0->left))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), @_vcc_ptr_eq_pure(*((x0->right)), old(_dryad_S4, *((x0->right))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), ==(*((x0->key)), old(_dryad_S4, *((x0->key))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(SL#_dryad_S4, a_node.key, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), ==(*((x0->height)), old(_dryad_S4, *((x0->height))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(SL#_dryad_S4, a_node.height, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, right)), @_vcc_ptr_eq_pure(*((right->left)), old(_dryad_S4, *((right->left))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#right, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, right)), @_vcc_ptr_eq_pure(*((right->right)), old(_dryad_S4, *((right->right))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#right, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, right)), ==(*((right->key)), old(_dryad_S4, *((right->key))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#right, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) == $rd_inv(SL#_dryad_S4, a_node.key, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, right)), ==(*((right->height)), old(_dryad_S4, *((right->height))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#right, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == $rd_inv(SL#_dryad_S4, a_node.height, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, left)), @_vcc_ptr_eq_pure(*((left->left)), old(_dryad_S4, *((left->left))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#left, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S4, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, left)), @_vcc_ptr_eq_pure(*((left->right)), old(_dryad_S4, *((left->right))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#left, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S4, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, left)), ==(*((left->key)), old(_dryad_S4, *((left->key))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#left, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) == $rd_inv(SL#_dryad_S4, a_node.key, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, left)), ==(*((left->height)), old(_dryad_S4, *((left->height))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#left, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == $rd_inv(SL#_dryad_S4, a_node.height, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl(new_right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((new_right->left))), avl(*((new_right->right)))), unchecked!(@_vcc_oset_in(new_right, @_vcc_oset_union(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))))), unchecked!(@_vcc_intset_in(*((new_right->key)), @_vcc_intset_union(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))))), @_vcc_oset_disjoint(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))), @_vcc_intset_disjoint(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))), ==>(@_vcc_ptr_neq_null(*((new_right->left))), <(avl_max_key(*((new_right->left))), *((new_right->key))))), ==>(@_vcc_ptr_neq_null(*((new_right->right))), <(*((new_right->key)), avl_min_key(*((new_right->right)))))), ||(||(&&(==(avl_height(*((new_right->left))), avl_height(*((new_right->right)))), ==(*((new_right->height)), +(avl_height(*((new_right->left))), 1))), &&(==(avl_height(*((new_right->left))), +(avl_height(*((new_right->right))), 1)), ==(*((new_right->height)), +(avl_height(*((new_right->left))), 1)))), &&(==(avl_height(*((new_right->right))), +(avl_height(*((new_right->left))), 1)), ==(*((new_right->height)), +(avl_height(*((new_right->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#new_right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#new_right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_reach(new_right), @_vcc_oset_union_one1(new_right, @_vcc_oset_union(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#new_right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#new_right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_height(new_right), @ite(>(avl_height(*((new_right->left))), avl_height(*((new_right->right)))), +(avl_height(*((new_right->left))), 1), +(avl_height(*((new_right->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#new_right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_keys(new_right), @_vcc_intset_union(@_vcc_intset_singleton(*((new_right->key))), @_vcc_intset_union(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#new_right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), @\int_max(avl_max_key(*((new_right->left))), avl_max_key(*((new_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_eq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), avl_max_key(*((new_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), avl_max_key(*((new_right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), @\int_min(avl_min_key(*((new_right->left))), avl_min_key(*((new_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_eq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), avl_min_key(*((new_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), avl_min_key(*((new_right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl(right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((right->left))), avl(*((right->right)))), unchecked!(@_vcc_oset_in(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))), unchecked!(@_vcc_intset_in(*((right->key)), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))), @_vcc_oset_disjoint(avl_reach(*((right->left))), avl_reach(*((right->right))))), @_vcc_intset_disjoint(avl_keys(*((right->left))), avl_keys(*((right->right))))), ==>(@_vcc_ptr_neq_null(*((right->left))), <(avl_max_key(*((right->left))), *((right->key))))), ==>(@_vcc_ptr_neq_null(*((right->right))), <(*((right->key)), avl_min_key(*((right->right)))))), ||(||(&&(==(avl_height(*((right->left))), avl_height(*((right->right)))), ==(*((right->height)), +(avl_height(*((right->left))), 1))), &&(==(avl_height(*((right->left))), +(avl_height(*((right->right))), 1)), ==(*((right->height)), +(avl_height(*((right->left))), 1)))), &&(==(avl_height(*((right->right))), +(avl_height(*((right->left))), 1)), ==(*((right->height)), +(avl_height(*((right->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_reach(right), @_vcc_oset_union_one1(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_height(right), @ite(>(avl_height(*((right->left))), avl_height(*((right->right)))), +(avl_height(*((right->left))), 1), +(avl_height(*((right->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_keys(right), @_vcc_intset_union(@_vcc_intset_singleton(*((right->key))), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), @\int_max(avl_max_key(*((right->left))), avl_max_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), @\int_min(avl_min_key(*((right->left))), avl_min_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl(left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((left->left))), avl(*((left->right)))), unchecked!(@_vcc_oset_in(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))), unchecked!(@_vcc_intset_in(*((left->key)), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))), @_vcc_oset_disjoint(avl_reach(*((left->left))), avl_reach(*((left->right))))), @_vcc_intset_disjoint(avl_keys(*((left->left))), avl_keys(*((left->right))))), ==>(@_vcc_ptr_neq_null(*((left->left))), <(avl_max_key(*((left->left))), *((left->key))))), ==>(@_vcc_ptr_neq_null(*((left->right))), <(*((left->key)), avl_min_key(*((left->right)))))), ||(||(&&(==(avl_height(*((left->left))), avl_height(*((left->right)))), ==(*((left->height)), +(avl_height(*((left->left))), 1))), &&(==(avl_height(*((left->left))), +(avl_height(*((left->right))), 1)), ==(*((left->height)), +(avl_height(*((left->left))), 1)))), &&(==(avl_height(*((left->right))), +(avl_height(*((left->left))), 1)), ==(*((left->height)), +(avl_height(*((left->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_reach(left), @_vcc_oset_union_one1(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_height(left), @ite(>(avl_height(*((left->left))), avl_height(*((left->right)))), +(avl_height(*((left->left))), 1), +(avl_height(*((left->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_keys(left), @_vcc_intset_union(@_vcc_intset_singleton(*((left->key))), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), @\int_max(avl_max_key(*((left->left))), avl_max_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), @\int_min(avl_min_key(*((left->left))), avl_min_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // _math \state _dryad_S6; 
                        // _dryad_S6 := @_vcc_current_state(@state); 
                        SL#_dryad_S6 := $current_state($s);
                        // _math \state stmtexpr7#23; 
                        // stmtexpr7#23 := _dryad_S6; 
                        stmtexpr7#23 := SL#_dryad_S6;
                        // assert @prim_writes_check((x->right)); 
                        assert $writable_prim($s, #wrTime$3^79.3, $dot($phys_ptr_cast(P#x, ^a_node), a_node.right));
                        // *(x->right) := new_right; 
                        call $write_int(a_node.right, $phys_ptr_cast(P#x, ^a_node), $ptr_to_int($phys_ptr_cast(L#new_right, ^a_node)));
                        assume $full_stop_ext(#tok$3^121.5, $s);
                        // _math \state _dryad_S7; 
                        // _dryad_S7 := @_vcc_current_state(@state); 
                        SL#_dryad_S7 := $current_state($s);
                        // _math \state stmtexpr8#24; 
                        // stmtexpr8#24 := _dryad_S7; 
                        stmtexpr8#24 := SL#_dryad_S7;
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(*((x->left)))))), ==(old(_dryad_S6, avl(*((x->left)))), old(_dryad_S7, avl(*((x->left)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(*((x->left)))))), ==(old(_dryad_S6, avl_reach(*((x->left)))), old(_dryad_S7, avl_reach(*((x->left)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_reach(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(*((x->left)))))), ==(old(_dryad_S6, avl_height(*((x->left)))), old(_dryad_S7, avl_height(*((x->left)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_height(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(*((x->left)))))), ==(old(_dryad_S6, avl_keys(*((x->left)))), old(_dryad_S7, avl_keys(*((x->left)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_keys(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_keys(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(*((x->left)))))), ==(old(_dryad_S6, avl_max_key(*((x->left)))), old(_dryad_S7, avl_max_key(*((x->left)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_max_key(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_max_key(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(*((x->left)))))), ==(old(_dryad_S6, avl_min_key(*((x->left)))), old(_dryad_S7, avl_min_key(*((x->left)))))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_min_key(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_min_key(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(new_right)))), ==(old(_dryad_S6, avl(new_right)), old(_dryad_S7, avl(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl(SL#_dryad_S6, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl(SL#_dryad_S7, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(new_right)))), ==(old(_dryad_S6, avl_reach(new_right)), old(_dryad_S7, avl_reach(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_reach(SL#_dryad_S7, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(new_right)))), ==(old(_dryad_S6, avl_height(new_right)), old(_dryad_S7, avl_height(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_height(SL#_dryad_S6, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height(SL#_dryad_S7, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(new_right)))), ==(old(_dryad_S6, avl_keys(new_right)), old(_dryad_S7, avl_keys(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_keys(SL#_dryad_S6, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_keys(SL#_dryad_S7, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(new_right)))), ==(old(_dryad_S6, avl_max_key(new_right)), old(_dryad_S7, avl_max_key(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_max_key(SL#_dryad_S6, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_max_key(SL#_dryad_S7, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(new_right)))), ==(old(_dryad_S6, avl_min_key(new_right)), old(_dryad_S7, avl_min_key(new_right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#new_right, ^a_node))) ==> F#avl_min_key(SL#_dryad_S6, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_min_key(SL#_dryad_S7, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(x1)))), ==(old(_dryad_S6, avl(x1)), old(_dryad_S7, avl(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl(SL#_dryad_S6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl(SL#_dryad_S7, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(x1)))), ==(old(_dryad_S6, avl_reach(x1)), old(_dryad_S7, avl_reach(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(x1)))), ==(old(_dryad_S6, avl_height(x1)), old(_dryad_S7, avl_height(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_height(SL#_dryad_S6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height(SL#_dryad_S7, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(x1)))), ==(old(_dryad_S6, avl_keys(x1)), old(_dryad_S7, avl_keys(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_keys(SL#_dryad_S6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_keys(SL#_dryad_S7, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(x1)))), ==(old(_dryad_S6, avl_max_key(x1)), old(_dryad_S7, avl_max_key(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_max_key(SL#_dryad_S6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_max_key(SL#_dryad_S7, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(x1)))), ==(old(_dryad_S6, avl_min_key(x1)), old(_dryad_S7, avl_min_key(x1)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_min_key(SL#_dryad_S6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_min_key(SL#_dryad_S7, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(x0)))), ==(old(_dryad_S6, avl(x0)), old(_dryad_S7, avl(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl(SL#_dryad_S6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl(SL#_dryad_S7, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(x0)))), ==(old(_dryad_S6, avl_reach(x0)), old(_dryad_S7, avl_reach(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(x0)))), ==(old(_dryad_S6, avl_height(x0)), old(_dryad_S7, avl_height(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_height(SL#_dryad_S6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height(SL#_dryad_S7, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(x0)))), ==(old(_dryad_S6, avl_keys(x0)), old(_dryad_S7, avl_keys(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_keys(SL#_dryad_S6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_keys(SL#_dryad_S7, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(x0)))), ==(old(_dryad_S6, avl_max_key(x0)), old(_dryad_S7, avl_max_key(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_max_key(SL#_dryad_S6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_max_key(SL#_dryad_S7, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(x0)))), ==(old(_dryad_S6, avl_min_key(x0)), old(_dryad_S7, avl_min_key(x0)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_min_key(SL#_dryad_S6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_min_key(SL#_dryad_S7, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(right)))), ==(old(_dryad_S6, avl(right)), old(_dryad_S7, avl(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl(SL#_dryad_S6, $phys_ptr_cast(L#right, ^a_node)) == F#avl(SL#_dryad_S7, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(right)))), ==(old(_dryad_S6, avl_reach(right)), old(_dryad_S7, avl_reach(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#right, ^a_node)) == F#avl_reach(SL#_dryad_S7, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(right)))), ==(old(_dryad_S6, avl_height(right)), old(_dryad_S7, avl_height(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_height(SL#_dryad_S6, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height(SL#_dryad_S7, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(right)))), ==(old(_dryad_S6, avl_keys(right)), old(_dryad_S7, avl_keys(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_keys(SL#_dryad_S6, $phys_ptr_cast(L#right, ^a_node)) == F#avl_keys(SL#_dryad_S7, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(right)))), ==(old(_dryad_S6, avl_max_key(right)), old(_dryad_S7, avl_max_key(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_max_key(SL#_dryad_S6, $phys_ptr_cast(L#right, ^a_node)) == F#avl_max_key(SL#_dryad_S7, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(right)))), ==(old(_dryad_S6, avl_min_key(right)), old(_dryad_S7, avl_min_key(right)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_min_key(SL#_dryad_S6, $phys_ptr_cast(L#right, ^a_node)) == F#avl_min_key(SL#_dryad_S7, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(left)))), ==(old(_dryad_S6, avl(left)), old(_dryad_S7, avl(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl(SL#_dryad_S6, $phys_ptr_cast(L#left, ^a_node)) == F#avl(SL#_dryad_S7, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(left)))), ==(old(_dryad_S6, avl_reach(left)), old(_dryad_S7, avl_reach(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#left, ^a_node)) == F#avl_reach(SL#_dryad_S7, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(left)))), ==(old(_dryad_S6, avl_height(left)), old(_dryad_S7, avl_height(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_height(SL#_dryad_S6, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height(SL#_dryad_S7, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(left)))), ==(old(_dryad_S6, avl_keys(left)), old(_dryad_S7, avl_keys(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_keys(SL#_dryad_S6, $phys_ptr_cast(L#left, ^a_node)) == F#avl_keys(SL#_dryad_S7, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(left)))), ==(old(_dryad_S6, avl_max_key(left)), old(_dryad_S7, avl_max_key(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_max_key(SL#_dryad_S6, $phys_ptr_cast(L#left, ^a_node)) == F#avl_max_key(SL#_dryad_S7, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S6, avl_reach(left)))), ==(old(_dryad_S6, avl_min_key(left)), old(_dryad_S7, avl_min_key(left)))); 
                        assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(SL#_dryad_S6, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_min_key(SL#_dryad_S6, $phys_ptr_cast(L#left, ^a_node)) == F#avl_min_key(SL#_dryad_S7, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, new_right)), @_vcc_ptr_eq_pure(*((new_right->left)), old(_dryad_S6, *((new_right->left))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_right, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, new_right)), @_vcc_ptr_eq_pure(*((new_right->right)), old(_dryad_S6, *((new_right->right))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_right, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, new_right)), ==(*((new_right->key)), old(_dryad_S6, *((new_right->key))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_right, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)) == $rd_inv(SL#_dryad_S6, a_node.key, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, new_right)), ==(*((new_right->height)), old(_dryad_S6, *((new_right->height))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_right, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == $rd_inv(SL#_dryad_S6, a_node.height, $phys_ptr_cast(L#new_right, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), @_vcc_ptr_eq_pure(*((x1->left)), old(_dryad_S6, *((x1->left))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), @_vcc_ptr_eq_pure(*((x1->right)), old(_dryad_S6, *((x1->right))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), ==(*((x1->key)), old(_dryad_S6, *((x1->key))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(SL#_dryad_S6, a_node.key, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), ==(*((x1->height)), old(_dryad_S6, *((x1->height))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(SL#_dryad_S6, a_node.height, $phys_ptr_cast(SL#x1, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), @_vcc_ptr_eq_pure(*((x0->left)), old(_dryad_S6, *((x0->left))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), @_vcc_ptr_eq_pure(*((x0->right)), old(_dryad_S6, *((x0->right))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), ==(*((x0->key)), old(_dryad_S6, *((x0->key))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(SL#_dryad_S6, a_node.key, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), ==(*((x0->height)), old(_dryad_S6, *((x0->height))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(SL#_dryad_S6, a_node.height, $phys_ptr_cast(SL#x0, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, right)), @_vcc_ptr_eq_pure(*((right->left)), old(_dryad_S6, *((right->left))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#right, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, right)), @_vcc_ptr_eq_pure(*((right->right)), old(_dryad_S6, *((right->right))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#right, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, right)), ==(*((right->key)), old(_dryad_S6, *((right->key))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#right, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) == $rd_inv(SL#_dryad_S6, a_node.key, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, right)), ==(*((right->height)), old(_dryad_S6, *((right->height))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#right, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == $rd_inv(SL#_dryad_S6, a_node.height, $phys_ptr_cast(L#right, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, left)), @_vcc_ptr_eq_pure(*((left->left)), old(_dryad_S6, *((left->left))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#left, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S6, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, left)), @_vcc_ptr_eq_pure(*((left->right)), old(_dryad_S6, *((left->right))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#left, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node) == $rd_phys_ptr(SL#_dryad_S6, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node);
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, left)), ==(*((left->key)), old(_dryad_S6, *((left->key))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#left, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) == $rd_inv(SL#_dryad_S6, a_node.key, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(!(@_vcc_ptr_eq_pure(x, left)), ==(*((left->height)), old(_dryad_S6, *((left->height))))); 
                        assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#left, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == $rd_inv(SL#_dryad_S6, a_node.height, $phys_ptr_cast(L#left, ^a_node));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl(new_right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((new_right->left))), avl(*((new_right->right)))), unchecked!(@_vcc_oset_in(new_right, @_vcc_oset_union(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))))), unchecked!(@_vcc_intset_in(*((new_right->key)), @_vcc_intset_union(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))))), @_vcc_oset_disjoint(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))), @_vcc_intset_disjoint(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))), ==>(@_vcc_ptr_neq_null(*((new_right->left))), <(avl_max_key(*((new_right->left))), *((new_right->key))))), ==>(@_vcc_ptr_neq_null(*((new_right->right))), <(*((new_right->key)), avl_min_key(*((new_right->right)))))), ||(||(&&(==(avl_height(*((new_right->left))), avl_height(*((new_right->right)))), ==(*((new_right->height)), +(avl_height(*((new_right->left))), 1))), &&(==(avl_height(*((new_right->left))), +(avl_height(*((new_right->right))), 1)), ==(*((new_right->height)), +(avl_height(*((new_right->left))), 1)))), &&(==(avl_height(*((new_right->right))), +(avl_height(*((new_right->left))), 1)), ==(*((new_right->height)), +(avl_height(*((new_right->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#new_right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#new_right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_reach(new_right), @_vcc_oset_union_one1(new_right, @_vcc_oset_union(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#new_right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#new_right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_height(new_right), @ite(>(avl_height(*((new_right->left))), avl_height(*((new_right->right)))), +(avl_height(*((new_right->left))), 1), +(avl_height(*((new_right->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#new_right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_keys(new_right), @_vcc_intset_union(@_vcc_intset_singleton(*((new_right->key))), @_vcc_intset_union(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#new_right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), @\int_max(avl_max_key(*((new_right->left))), avl_max_key(*((new_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_eq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), avl_max_key(*((new_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), avl_max_key(*((new_right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), @\int_min(avl_min_key(*((new_right->left))), avl_min_key(*((new_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_eq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), avl_min_key(*((new_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), avl_min_key(*((new_right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
                        assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl(right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((right->left))), avl(*((right->right)))), unchecked!(@_vcc_oset_in(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))), unchecked!(@_vcc_intset_in(*((right->key)), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))), @_vcc_oset_disjoint(avl_reach(*((right->left))), avl_reach(*((right->right))))), @_vcc_intset_disjoint(avl_keys(*((right->left))), avl_keys(*((right->right))))), ==>(@_vcc_ptr_neq_null(*((right->left))), <(avl_max_key(*((right->left))), *((right->key))))), ==>(@_vcc_ptr_neq_null(*((right->right))), <(*((right->key)), avl_min_key(*((right->right)))))), ||(||(&&(==(avl_height(*((right->left))), avl_height(*((right->right)))), ==(*((right->height)), +(avl_height(*((right->left))), 1))), &&(==(avl_height(*((right->left))), +(avl_height(*((right->right))), 1)), ==(*((right->height)), +(avl_height(*((right->left))), 1)))), &&(==(avl_height(*((right->right))), +(avl_height(*((right->left))), 1)), ==(*((right->height)), +(avl_height(*((right->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_reach(right), @_vcc_oset_union_one1(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_height(right), @ite(>(avl_height(*((right->left))), avl_height(*((right->right)))), +(avl_height(*((right->left))), 1), +(avl_height(*((right->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_keys(right), @_vcc_intset_union(@_vcc_intset_singleton(*((right->key))), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), @\int_max(avl_max_key(*((right->left))), avl_max_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), @\int_min(avl_min_key(*((right->left))), avl_min_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl(left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((left->left))), avl(*((left->right)))), unchecked!(@_vcc_oset_in(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))), unchecked!(@_vcc_intset_in(*((left->key)), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))), @_vcc_oset_disjoint(avl_reach(*((left->left))), avl_reach(*((left->right))))), @_vcc_intset_disjoint(avl_keys(*((left->left))), avl_keys(*((left->right))))), ==>(@_vcc_ptr_neq_null(*((left->left))), <(avl_max_key(*((left->left))), *((left->key))))), ==>(@_vcc_ptr_neq_null(*((left->right))), <(*((left->key)), avl_min_key(*((left->right)))))), ||(||(&&(==(avl_height(*((left->left))), avl_height(*((left->right)))), ==(*((left->height)), +(avl_height(*((left->left))), 1))), &&(==(avl_height(*((left->left))), +(avl_height(*((left->right))), 1)), ==(*((left->height)), +(avl_height(*((left->left))), 1)))), &&(==(avl_height(*((left->right))), +(avl_height(*((left->left))), 1)), ==(*((left->height)), +(avl_height(*((left->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_reach(left), @_vcc_oset_union_one1(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_height(left), @ite(>(avl_height(*((left->left))), avl_height(*((left->right)))), +(avl_height(*((left->left))), 1), +(avl_height(*((left->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_keys(left), @_vcc_intset_union(@_vcc_intset_singleton(*((left->key))), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), @\int_max(avl_max_key(*((left->left))), avl_max_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), @\int_min(avl_min_key(*((left->left))), avl_min_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
                        assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl(new_right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((new_right->left))), avl(*((new_right->right)))), unchecked!(@_vcc_oset_in(new_right, @_vcc_oset_union(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))))), unchecked!(@_vcc_intset_in(*((new_right->key)), @_vcc_intset_union(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))))), @_vcc_oset_disjoint(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))), @_vcc_intset_disjoint(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))), ==>(@_vcc_ptr_neq_null(*((new_right->left))), <(avl_max_key(*((new_right->left))), *((new_right->key))))), ==>(@_vcc_ptr_neq_null(*((new_right->right))), <(*((new_right->key)), avl_min_key(*((new_right->right)))))), ||(||(&&(==(avl_height(*((new_right->left))), avl_height(*((new_right->right)))), ==(*((new_right->height)), +(avl_height(*((new_right->left))), 1))), &&(==(avl_height(*((new_right->left))), +(avl_height(*((new_right->right))), 1)), ==(*((new_right->height)), +(avl_height(*((new_right->left))), 1)))), &&(==(avl_height(*((new_right->right))), +(avl_height(*((new_right->left))), 1)), ==(*((new_right->height)), +(avl_height(*((new_right->right))), 1))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#new_right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#new_right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1)));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_reach(new_right), @_vcc_oset_union_one1(new_right, @_vcc_oset_union(avl_reach(*((new_right->left))), avl_reach(*((new_right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#new_right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#new_right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_height(new_right), @ite(>(avl_height(*((new_right->left))), avl_height(*((new_right->right)))), +(avl_height(*((new_right->left))), 1), +(avl_height(*((new_right->right))), 1)))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#new_right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) + 1);
                        // assume ==>(@_vcc_ptr_neq_null(new_right), ==(avl_keys(new_right), @_vcc_intset_union(@_vcc_intset_singleton(*((new_right->key))), @_vcc_intset_union(avl_keys(*((new_right->left))), avl_keys(*((new_right->right))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#new_right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), @\int_max(avl_max_key(*((new_right->left))), avl_max_key(*((new_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_eq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), avl_max_key(*((new_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_max_key(new_right), @\int_max(*((new_right->key)), avl_max_key(*((new_right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // assume ==>(@_vcc_ptr_neq_null(new_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), @\int_min(avl_min_key(*((new_right->left))), avl_min_key(*((new_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right->left))), @_vcc_ptr_eq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), avl_min_key(*((new_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right->left))), @_vcc_ptr_neq_null(*((new_right->right)))), ==(avl_min_key(new_right), @\int_min(*((new_right->key)), avl_min_key(*((new_right->right)))))))); 
                        assume $non_null($phys_ptr_cast(L#new_right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_right, ^a_node), ^a_node))));
                        // struct a_node* res_avl_balance#3; 
                        // res_avl_balance#3 := avl_balance(x); 
                        call res_avl_balance#3 := avl_balance($phys_ptr_cast(P#x, ^a_node));
                        assume $full_stop_ext(#tok$3^123.12, $s);
                        // return res_avl_balance#3; 
                        $result := $phys_ptr_cast(res_avl_balance#3, ^a_node);
                        assume true;
                        assert $position_marker();
                        goto #exit;
                    }
                }
            }
        }
        else
        {
          anon11:
            // assert @reads_check_normal((x->key)); 
            assert $thread_local($s, $phys_ptr_cast(P#x, ^a_node));
            assume true;
            // if (>(*((x->key)), k)) ...
            if ($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) > P#k)
            {
              anon9:
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl(right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((right->left))), avl(*((right->right)))), unchecked!(@_vcc_oset_in(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))), unchecked!(@_vcc_intset_in(*((right->key)), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))), @_vcc_oset_disjoint(avl_reach(*((right->left))), avl_reach(*((right->right))))), @_vcc_intset_disjoint(avl_keys(*((right->left))), avl_keys(*((right->right))))), ==>(@_vcc_ptr_neq_null(*((right->left))), <(avl_max_key(*((right->left))), *((right->key))))), ==>(@_vcc_ptr_neq_null(*((right->right))), <(*((right->key)), avl_min_key(*((right->right)))))), ||(||(&&(==(avl_height(*((right->left))), avl_height(*((right->right)))), ==(*((right->height)), +(avl_height(*((right->left))), 1))), &&(==(avl_height(*((right->left))), +(avl_height(*((right->right))), 1)), ==(*((right->height)), +(avl_height(*((right->left))), 1)))), &&(==(avl_height(*((right->right))), +(avl_height(*((right->left))), 1)), ==(*((right->height)), +(avl_height(*((right->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_reach(right), @_vcc_oset_union_one1(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_height(right), @ite(>(avl_height(*((right->left))), avl_height(*((right->right)))), +(avl_height(*((right->left))), 1), +(avl_height(*((right->right))), 1)))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_keys(right), @_vcc_intset_union(@_vcc_intset_singleton(*((right->key))), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), @\int_max(avl_max_key(*((right->left))), avl_max_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), @\int_min(avl_min_key(*((right->left))), avl_min_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl(left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((left->left))), avl(*((left->right)))), unchecked!(@_vcc_oset_in(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))), unchecked!(@_vcc_intset_in(*((left->key)), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))), @_vcc_oset_disjoint(avl_reach(*((left->left))), avl_reach(*((left->right))))), @_vcc_intset_disjoint(avl_keys(*((left->left))), avl_keys(*((left->right))))), ==>(@_vcc_ptr_neq_null(*((left->left))), <(avl_max_key(*((left->left))), *((left->key))))), ==>(@_vcc_ptr_neq_null(*((left->right))), <(*((left->key)), avl_min_key(*((left->right)))))), ||(||(&&(==(avl_height(*((left->left))), avl_height(*((left->right)))), ==(*((left->height)), +(avl_height(*((left->left))), 1))), &&(==(avl_height(*((left->left))), +(avl_height(*((left->right))), 1)), ==(*((left->height)), +(avl_height(*((left->left))), 1)))), &&(==(avl_height(*((left->right))), +(avl_height(*((left->left))), 1)), ==(*((left->height)), +(avl_height(*((left->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_reach(left), @_vcc_oset_union_one1(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_height(left), @ite(>(avl_height(*((left->left))), avl_height(*((left->right)))), +(avl_height(*((left->left))), 1), +(avl_height(*((left->right))), 1)))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_keys(left), @_vcc_intset_union(@_vcc_intset_singleton(*((left->key))), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), @\int_max(avl_max_key(*((left->left))), avl_max_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), @\int_min(avl_min_key(*((left->left))), avl_min_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // struct a_node* new_left; 
                // _math \state _dryad_S0#6; 
                // _dryad_S0#6 := @_vcc_current_state(@state); 
                _dryad_S0#6 := $current_state($s);
                // _math \state stmtexpr0#25; 
                // stmtexpr0#25 := _dryad_S0#6; 
                stmtexpr0#25 := _dryad_S0#6;
                // non-pure function
                // new_left := avl_delete(left, k); 
                call L#new_left := avl_delete($phys_ptr_cast(L#left, ^a_node), P#k);
                assume $full_stop_ext(#tok$3^126.25, $s);
                // _math \state _dryad_S1#7; 
                // _dryad_S1#7 := @_vcc_current_state(@state); 
                _dryad_S1#7 := $current_state($s);
                // _math \state stmtexpr1#26; 
                // stmtexpr1#26 := _dryad_S1#7; 
                stmtexpr1#26 := _dryad_S1#7;
                // assume @_vcc_oset_disjoint(avl_reach(new_left), @_vcc_oset_diff(_dryad_G1, old(_dryad_S0#6, avl_reach(left)))); 
                assume $oset_disjoint(F#avl_reach($s, $phys_ptr_cast(L#new_left, ^a_node)), $oset_diff(SL#_dryad_G1, F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))));
                // _math \oset res_avl_reach#4; 
                // res_avl_reach#4 := avl_reach(new_left); 
                call res_avl_reach#4 := avl_reach($phys_ptr_cast(L#new_left, ^a_node));
                assume $full_stop_ext(#tok$4^0.0, $s);
                // _dryad_G1 := @_vcc_oset_union(res_avl_reach#4, @_vcc_oset_diff(_dryad_G1, pure(old(_dryad_S0#6, avl_reach(left))))); 
                SL#_dryad_G1 := $oset_union(res_avl_reach#4, $oset_diff(SL#_dryad_G1, F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))));
                // _math \oset stmtexpr2#27; 
                // stmtexpr2#27 := _dryad_G1; 
                stmtexpr2#27 := SL#_dryad_G1;
                // assume ==(glob_reach(), _dryad_G1); 
                assume F#glob_reach() == SL#_dryad_G1;
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x1))), ==(old(_dryad_S0#6, avl(x1)), old(_dryad_S1#7, avl(x1)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl(_dryad_S0#6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl(_dryad_S1#7, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x1))), ==(old(_dryad_S0#6, avl_reach(x1)), old(_dryad_S1#7, avl_reach(x1)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_reach(_dryad_S0#6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_reach(_dryad_S1#7, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x1))), ==(old(_dryad_S0#6, avl_height(x1)), old(_dryad_S1#7, avl_height(x1)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_height(_dryad_S0#6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height(_dryad_S1#7, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x1))), ==(old(_dryad_S0#6, avl_keys(x1)), old(_dryad_S1#7, avl_keys(x1)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_keys(_dryad_S0#6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_keys(_dryad_S1#7, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x1))), ==(old(_dryad_S0#6, avl_max_key(x1)), old(_dryad_S1#7, avl_max_key(x1)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_max_key(_dryad_S0#6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_max_key(_dryad_S1#7, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x1))), ==(old(_dryad_S0#6, avl_min_key(x1)), old(_dryad_S1#7, avl_min_key(x1)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_min_key(_dryad_S0#6, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_min_key(_dryad_S1#7, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x0))), ==(old(_dryad_S0#6, avl(x0)), old(_dryad_S1#7, avl(x0)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl(_dryad_S0#6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl(_dryad_S1#7, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x0))), ==(old(_dryad_S0#6, avl_reach(x0)), old(_dryad_S1#7, avl_reach(x0)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_reach(_dryad_S0#6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_reach(_dryad_S1#7, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x0))), ==(old(_dryad_S0#6, avl_height(x0)), old(_dryad_S1#7, avl_height(x0)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_height(_dryad_S0#6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height(_dryad_S1#7, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x0))), ==(old(_dryad_S0#6, avl_keys(x0)), old(_dryad_S1#7, avl_keys(x0)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_keys(_dryad_S0#6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_keys(_dryad_S1#7, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x0))), ==(old(_dryad_S0#6, avl_max_key(x0)), old(_dryad_S1#7, avl_max_key(x0)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_max_key(_dryad_S0#6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_max_key(_dryad_S1#7, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x0))), ==(old(_dryad_S0#6, avl_min_key(x0)), old(_dryad_S1#7, avl_min_key(x0)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_min_key(_dryad_S0#6, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_min_key(_dryad_S1#7, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(right))), ==(old(_dryad_S0#6, avl(right)), old(_dryad_S1#7, avl(right)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl(_dryad_S0#6, $phys_ptr_cast(L#right, ^a_node)) == F#avl(_dryad_S1#7, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(right))), ==(old(_dryad_S0#6, avl_reach(right)), old(_dryad_S1#7, avl_reach(right)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#right, ^a_node)) == F#avl_reach(_dryad_S1#7, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(right))), ==(old(_dryad_S0#6, avl_height(right)), old(_dryad_S1#7, avl_height(right)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_height(_dryad_S0#6, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height(_dryad_S1#7, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(right))), ==(old(_dryad_S0#6, avl_keys(right)), old(_dryad_S1#7, avl_keys(right)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_keys(_dryad_S0#6, $phys_ptr_cast(L#right, ^a_node)) == F#avl_keys(_dryad_S1#7, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(right))), ==(old(_dryad_S0#6, avl_max_key(right)), old(_dryad_S1#7, avl_max_key(right)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_max_key(_dryad_S0#6, $phys_ptr_cast(L#right, ^a_node)) == F#avl_max_key(_dryad_S1#7, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(right))), ==(old(_dryad_S0#6, avl_min_key(right)), old(_dryad_S1#7, avl_min_key(right)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_min_key(_dryad_S0#6, $phys_ptr_cast(L#right, ^a_node)) == F#avl_min_key(_dryad_S1#7, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(left))), ==(old(_dryad_S0#6, avl(left)), old(_dryad_S1#7, avl(left)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)) == F#avl(_dryad_S1#7, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(left))), ==(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S1#7, avl_reach(left)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)) == F#avl_reach(_dryad_S1#7, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(left))), ==(old(_dryad_S0#6, avl_height(left)), old(_dryad_S1#7, avl_height(left)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_height(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height(_dryad_S1#7, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(left))), ==(old(_dryad_S0#6, avl_keys(left)), old(_dryad_S1#7, avl_keys(left)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_keys(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)) == F#avl_keys(_dryad_S1#7, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(left))), ==(old(_dryad_S0#6, avl_max_key(left)), old(_dryad_S1#7, avl_max_key(left)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_max_key(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)) == F#avl_max_key(_dryad_S1#7, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(left))), ==(old(_dryad_S0#6, avl_min_key(left)), old(_dryad_S1#7, avl_min_key(left)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_min_key(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)) == F#avl_min_key(_dryad_S1#7, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x))), ==(old(_dryad_S0#6, avl(x)), old(_dryad_S1#7, avl(x)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl(_dryad_S0#6, $phys_ptr_cast(P#x, ^a_node)) == F#avl(_dryad_S1#7, $phys_ptr_cast(P#x, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x))), ==(old(_dryad_S0#6, avl_reach(x)), old(_dryad_S1#7, avl_reach(x)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_reach(_dryad_S0#6, $phys_ptr_cast(P#x, ^a_node)) == F#avl_reach(_dryad_S1#7, $phys_ptr_cast(P#x, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x))), ==(old(_dryad_S0#6, avl_height(x)), old(_dryad_S1#7, avl_height(x)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_height(_dryad_S0#6, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height(_dryad_S1#7, $phys_ptr_cast(P#x, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x))), ==(old(_dryad_S0#6, avl_keys(x)), old(_dryad_S1#7, avl_keys(x)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_keys(_dryad_S0#6, $phys_ptr_cast(P#x, ^a_node)) == F#avl_keys(_dryad_S1#7, $phys_ptr_cast(P#x, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x))), ==(old(_dryad_S0#6, avl_max_key(x)), old(_dryad_S1#7, avl_max_key(x)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_max_key(_dryad_S0#6, $phys_ptr_cast(P#x, ^a_node)) == F#avl_max_key(_dryad_S1#7, $phys_ptr_cast(P#x, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#6, avl_reach(left)), old(_dryad_S0#6, avl_reach(x))), ==(old(_dryad_S0#6, avl_min_key(x)), old(_dryad_S1#7, avl_min_key(x)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node)), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_min_key(_dryad_S0#6, $phys_ptr_cast(P#x, ^a_node)) == F#avl_min_key(_dryad_S1#7, $phys_ptr_cast(P#x, ^a_node));
                // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl(new_left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((new_left->left))), avl(*((new_left->right)))), unchecked!(@_vcc_oset_in(new_left, @_vcc_oset_union(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))))), unchecked!(@_vcc_intset_in(*((new_left->key)), @_vcc_intset_union(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))))), @_vcc_oset_disjoint(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))), @_vcc_intset_disjoint(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))), ==>(@_vcc_ptr_neq_null(*((new_left->left))), <(avl_max_key(*((new_left->left))), *((new_left->key))))), ==>(@_vcc_ptr_neq_null(*((new_left->right))), <(*((new_left->key)), avl_min_key(*((new_left->right)))))), ||(||(&&(==(avl_height(*((new_left->left))), avl_height(*((new_left->right)))), ==(*((new_left->height)), +(avl_height(*((new_left->left))), 1))), &&(==(avl_height(*((new_left->left))), +(avl_height(*((new_left->right))), 1)), ==(*((new_left->height)), +(avl_height(*((new_left->left))), 1)))), &&(==(avl_height(*((new_left->right))), +(avl_height(*((new_left->left))), 1)), ==(*((new_left->height)), +(avl_height(*((new_left->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#new_left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#new_left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_reach(new_left), @_vcc_oset_union_one1(new_left, @_vcc_oset_union(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#new_left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#new_left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_height(new_left), @ite(>(avl_height(*((new_left->left))), avl_height(*((new_left->right)))), +(avl_height(*((new_left->left))), 1), +(avl_height(*((new_left->right))), 1)))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#new_left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_keys(new_left), @_vcc_intset_union(@_vcc_intset_singleton(*((new_left->key))), @_vcc_intset_union(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#new_left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), @\int_max(avl_max_key(*((new_left->left))), avl_max_key(*((new_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_eq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), avl_max_key(*((new_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), avl_max_key(*((new_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), @\int_min(avl_min_key(*((new_left->left))), avl_min_key(*((new_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_eq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), avl_min_key(*((new_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), avl_min_key(*((new_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl(right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((right->left))), avl(*((right->right)))), unchecked!(@_vcc_oset_in(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))), unchecked!(@_vcc_intset_in(*((right->key)), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))), @_vcc_oset_disjoint(avl_reach(*((right->left))), avl_reach(*((right->right))))), @_vcc_intset_disjoint(avl_keys(*((right->left))), avl_keys(*((right->right))))), ==>(@_vcc_ptr_neq_null(*((right->left))), <(avl_max_key(*((right->left))), *((right->key))))), ==>(@_vcc_ptr_neq_null(*((right->right))), <(*((right->key)), avl_min_key(*((right->right)))))), ||(||(&&(==(avl_height(*((right->left))), avl_height(*((right->right)))), ==(*((right->height)), +(avl_height(*((right->left))), 1))), &&(==(avl_height(*((right->left))), +(avl_height(*((right->right))), 1)), ==(*((right->height)), +(avl_height(*((right->left))), 1)))), &&(==(avl_height(*((right->right))), +(avl_height(*((right->left))), 1)), ==(*((right->height)), +(avl_height(*((right->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_reach(right), @_vcc_oset_union_one1(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_height(right), @ite(>(avl_height(*((right->left))), avl_height(*((right->right)))), +(avl_height(*((right->left))), 1), +(avl_height(*((right->right))), 1)))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_keys(right), @_vcc_intset_union(@_vcc_intset_singleton(*((right->key))), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), @\int_max(avl_max_key(*((right->left))), avl_max_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), @\int_min(avl_min_key(*((right->left))), avl_min_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl(left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((left->left))), avl(*((left->right)))), unchecked!(@_vcc_oset_in(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))), unchecked!(@_vcc_intset_in(*((left->key)), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))), @_vcc_oset_disjoint(avl_reach(*((left->left))), avl_reach(*((left->right))))), @_vcc_intset_disjoint(avl_keys(*((left->left))), avl_keys(*((left->right))))), ==>(@_vcc_ptr_neq_null(*((left->left))), <(avl_max_key(*((left->left))), *((left->key))))), ==>(@_vcc_ptr_neq_null(*((left->right))), <(*((left->key)), avl_min_key(*((left->right)))))), ||(||(&&(==(avl_height(*((left->left))), avl_height(*((left->right)))), ==(*((left->height)), +(avl_height(*((left->left))), 1))), &&(==(avl_height(*((left->left))), +(avl_height(*((left->right))), 1)), ==(*((left->height)), +(avl_height(*((left->left))), 1)))), &&(==(avl_height(*((left->right))), +(avl_height(*((left->left))), 1)), ==(*((left->height)), +(avl_height(*((left->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_reach(left), @_vcc_oset_union_one1(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_height(left), @ite(>(avl_height(*((left->left))), avl_height(*((left->right)))), +(avl_height(*((left->left))), 1), +(avl_height(*((left->right))), 1)))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_keys(left), @_vcc_intset_union(@_vcc_intset_singleton(*((left->key))), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), @\int_max(avl_max_key(*((left->left))), avl_max_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), @\int_min(avl_min_key(*((left->left))), avl_min_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#6, avl_reach(left)))), @_vcc_ptr_eq_pure(*((x1->left)), old(_dryad_S0#6, *((x1->left))))); 
                assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#6, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#6, avl_reach(left)))), @_vcc_ptr_eq_pure(*((x1->right)), old(_dryad_S0#6, *((x1->right))))); 
                assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#6, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#6, avl_reach(left)))), ==(*((x1->key)), old(_dryad_S0#6, *((x1->key))))); 
                assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(_dryad_S0#6, a_node.key, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#6, avl_reach(left)))), ==(*((x1->height)), old(_dryad_S0#6, *((x1->height))))); 
                assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(_dryad_S0#6, a_node.height, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#6, avl_reach(left)))), @_vcc_ptr_eq_pure(*((x0->left)), old(_dryad_S0#6, *((x0->left))))); 
                assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#6, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#6, avl_reach(left)))), @_vcc_ptr_eq_pure(*((x0->right)), old(_dryad_S0#6, *((x0->right))))); 
                assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#6, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#6, avl_reach(left)))), ==(*((x0->key)), old(_dryad_S0#6, *((x0->key))))); 
                assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(_dryad_S0#6, a_node.key, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#6, avl_reach(left)))), ==(*((x0->height)), old(_dryad_S0#6, *((x0->height))))); 
                assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(_dryad_S0#6, a_node.height, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(!(@_vcc_oset_in(right, old(_dryad_S0#6, avl_reach(left)))), @_vcc_ptr_eq_pure(*((right->left)), old(_dryad_S0#6, *((right->left))))); 
                assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#6, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(right, old(_dryad_S0#6, avl_reach(left)))), @_vcc_ptr_eq_pure(*((right->right)), old(_dryad_S0#6, *((right->right))))); 
                assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#6, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(right, old(_dryad_S0#6, avl_reach(left)))), ==(*((right->key)), old(_dryad_S0#6, *((right->key))))); 
                assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) == $rd_inv(_dryad_S0#6, a_node.key, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(!(@_vcc_oset_in(right, old(_dryad_S0#6, avl_reach(left)))), ==(*((right->height)), old(_dryad_S0#6, *((right->height))))); 
                assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == $rd_inv(_dryad_S0#6, a_node.height, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(!(@_vcc_oset_in(left, old(_dryad_S0#6, avl_reach(left)))), @_vcc_ptr_eq_pure(*((left->left)), old(_dryad_S0#6, *((left->left))))); 
                assume !$oset_in($phys_ptr_cast(L#left, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#6, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(left, old(_dryad_S0#6, avl_reach(left)))), @_vcc_ptr_eq_pure(*((left->right)), old(_dryad_S0#6, *((left->right))))); 
                assume !$oset_in($phys_ptr_cast(L#left, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#6, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(left, old(_dryad_S0#6, avl_reach(left)))), ==(*((left->key)), old(_dryad_S0#6, *((left->key))))); 
                assume !$oset_in($phys_ptr_cast(L#left, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) == $rd_inv(_dryad_S0#6, a_node.key, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(!(@_vcc_oset_in(left, old(_dryad_S0#6, avl_reach(left)))), ==(*((left->height)), old(_dryad_S0#6, *((left->height))))); 
                assume !$oset_in($phys_ptr_cast(L#left, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == $rd_inv(_dryad_S0#6, a_node.height, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#6, avl_reach(left)))), @_vcc_ptr_eq_pure(*((x->left)), old(_dryad_S0#6, *((x->left))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#6, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#6, avl_reach(left)))), @_vcc_ptr_eq_pure(*((x->right)), old(_dryad_S0#6, *((x->right))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#6, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#6, avl_reach(left)))), ==(*((x->key)), old(_dryad_S0#6, *((x->key))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(_dryad_S0#6, a_node.key, $phys_ptr_cast(P#x, ^a_node));
                // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#6, avl_reach(left)))), ==(*((x->height)), old(_dryad_S0#6, *((x->height))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#6, $phys_ptr_cast(L#left, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(_dryad_S0#6, a_node.height, $phys_ptr_cast(P#x, ^a_node));
                // _math \state _dryad_S2#8; 
                // _dryad_S2#8 := @_vcc_current_state(@state); 
                _dryad_S2#8 := $current_state($s);
                // _math \state stmtexpr3#28; 
                // stmtexpr3#28 := _dryad_S2#8; 
                stmtexpr3#28 := _dryad_S2#8;
                // assert @prim_writes_check((x->left)); 
                assert $writable_prim($s, #wrTime$3^79.3, $dot($phys_ptr_cast(P#x, ^a_node), a_node.left));
                // *(x->left) := new_left; 
                call $write_int(a_node.left, $phys_ptr_cast(P#x, ^a_node), $ptr_to_int($phys_ptr_cast(L#new_left, ^a_node)));
                assume $full_stop_ext(#tok$3^128.4, $s);
                // _math \state _dryad_S3#9; 
                // _dryad_S3#9 := @_vcc_current_state(@state); 
                _dryad_S3#9 := $current_state($s);
                // _math \state stmtexpr4#29; 
                // stmtexpr4#29 := _dryad_S3#9; 
                stmtexpr4#29 := _dryad_S3#9;
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(*((x->right)))))), ==(old(_dryad_S2#8, avl(*((x->right)))), old(_dryad_S3#9, avl(*((x->right)))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $rd_phys_ptr(_dryad_S2#8, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl(_dryad_S2#8, $rd_phys_ptr(_dryad_S2#8, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl(_dryad_S3#9, $rd_phys_ptr(_dryad_S3#9, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(*((x->right)))))), ==(old(_dryad_S2#8, avl_reach(*((x->right)))), old(_dryad_S3#9, avl_reach(*((x->right)))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $rd_phys_ptr(_dryad_S2#8, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_reach(_dryad_S2#8, $rd_phys_ptr(_dryad_S2#8, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_reach(_dryad_S3#9, $rd_phys_ptr(_dryad_S3#9, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(*((x->right)))))), ==(old(_dryad_S2#8, avl_height(*((x->right)))), old(_dryad_S3#9, avl_height(*((x->right)))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $rd_phys_ptr(_dryad_S2#8, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_height(_dryad_S2#8, $rd_phys_ptr(_dryad_S2#8, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(_dryad_S3#9, $rd_phys_ptr(_dryad_S3#9, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(*((x->right)))))), ==(old(_dryad_S2#8, avl_keys(*((x->right)))), old(_dryad_S3#9, avl_keys(*((x->right)))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $rd_phys_ptr(_dryad_S2#8, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_keys(_dryad_S2#8, $rd_phys_ptr(_dryad_S2#8, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_keys(_dryad_S3#9, $rd_phys_ptr(_dryad_S3#9, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(*((x->right)))))), ==(old(_dryad_S2#8, avl_max_key(*((x->right)))), old(_dryad_S3#9, avl_max_key(*((x->right)))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $rd_phys_ptr(_dryad_S2#8, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_max_key(_dryad_S2#8, $rd_phys_ptr(_dryad_S2#8, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_max_key(_dryad_S3#9, $rd_phys_ptr(_dryad_S3#9, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(*((x->right)))))), ==(old(_dryad_S2#8, avl_min_key(*((x->right)))), old(_dryad_S3#9, avl_min_key(*((x->right)))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $rd_phys_ptr(_dryad_S2#8, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_min_key(_dryad_S2#8, $rd_phys_ptr(_dryad_S2#8, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_min_key(_dryad_S3#9, $rd_phys_ptr(_dryad_S3#9, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(new_left)))), ==(old(_dryad_S2#8, avl(new_left)), old(_dryad_S3#9, avl(new_left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#new_left, ^a_node))) ==> F#avl(_dryad_S2#8, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl(_dryad_S3#9, $phys_ptr_cast(L#new_left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(new_left)))), ==(old(_dryad_S2#8, avl_reach(new_left)), old(_dryad_S3#9, avl_reach(new_left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#new_left, ^a_node))) ==> F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_reach(_dryad_S3#9, $phys_ptr_cast(L#new_left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(new_left)))), ==(old(_dryad_S2#8, avl_height(new_left)), old(_dryad_S3#9, avl_height(new_left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#new_left, ^a_node))) ==> F#avl_height(_dryad_S2#8, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height(_dryad_S3#9, $phys_ptr_cast(L#new_left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(new_left)))), ==(old(_dryad_S2#8, avl_keys(new_left)), old(_dryad_S3#9, avl_keys(new_left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#new_left, ^a_node))) ==> F#avl_keys(_dryad_S2#8, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_keys(_dryad_S3#9, $phys_ptr_cast(L#new_left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(new_left)))), ==(old(_dryad_S2#8, avl_max_key(new_left)), old(_dryad_S3#9, avl_max_key(new_left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#new_left, ^a_node))) ==> F#avl_max_key(_dryad_S2#8, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_max_key(_dryad_S3#9, $phys_ptr_cast(L#new_left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(new_left)))), ==(old(_dryad_S2#8, avl_min_key(new_left)), old(_dryad_S3#9, avl_min_key(new_left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#new_left, ^a_node))) ==> F#avl_min_key(_dryad_S2#8, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_min_key(_dryad_S3#9, $phys_ptr_cast(L#new_left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(x1)))), ==(old(_dryad_S2#8, avl(x1)), old(_dryad_S3#9, avl(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl(_dryad_S2#8, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl(_dryad_S3#9, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(x1)))), ==(old(_dryad_S2#8, avl_reach(x1)), old(_dryad_S3#9, avl_reach(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_reach(_dryad_S2#8, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_reach(_dryad_S3#9, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(x1)))), ==(old(_dryad_S2#8, avl_height(x1)), old(_dryad_S3#9, avl_height(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_height(_dryad_S2#8, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height(_dryad_S3#9, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(x1)))), ==(old(_dryad_S2#8, avl_keys(x1)), old(_dryad_S3#9, avl_keys(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_keys(_dryad_S2#8, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_keys(_dryad_S3#9, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(x1)))), ==(old(_dryad_S2#8, avl_max_key(x1)), old(_dryad_S3#9, avl_max_key(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_max_key(_dryad_S2#8, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_max_key(_dryad_S3#9, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(x1)))), ==(old(_dryad_S2#8, avl_min_key(x1)), old(_dryad_S3#9, avl_min_key(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_min_key(_dryad_S2#8, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_min_key(_dryad_S3#9, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(x0)))), ==(old(_dryad_S2#8, avl(x0)), old(_dryad_S3#9, avl(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl(_dryad_S2#8, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl(_dryad_S3#9, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(x0)))), ==(old(_dryad_S2#8, avl_reach(x0)), old(_dryad_S3#9, avl_reach(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_reach(_dryad_S2#8, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_reach(_dryad_S3#9, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(x0)))), ==(old(_dryad_S2#8, avl_height(x0)), old(_dryad_S3#9, avl_height(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_height(_dryad_S2#8, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height(_dryad_S3#9, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(x0)))), ==(old(_dryad_S2#8, avl_keys(x0)), old(_dryad_S3#9, avl_keys(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_keys(_dryad_S2#8, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_keys(_dryad_S3#9, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(x0)))), ==(old(_dryad_S2#8, avl_max_key(x0)), old(_dryad_S3#9, avl_max_key(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_max_key(_dryad_S2#8, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_max_key(_dryad_S3#9, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(x0)))), ==(old(_dryad_S2#8, avl_min_key(x0)), old(_dryad_S3#9, avl_min_key(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_min_key(_dryad_S2#8, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_min_key(_dryad_S3#9, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(right)))), ==(old(_dryad_S2#8, avl(right)), old(_dryad_S3#9, avl(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl(_dryad_S2#8, $phys_ptr_cast(L#right, ^a_node)) == F#avl(_dryad_S3#9, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(right)))), ==(old(_dryad_S2#8, avl_reach(right)), old(_dryad_S3#9, avl_reach(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#right, ^a_node)) == F#avl_reach(_dryad_S3#9, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(right)))), ==(old(_dryad_S2#8, avl_height(right)), old(_dryad_S3#9, avl_height(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_height(_dryad_S2#8, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height(_dryad_S3#9, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(right)))), ==(old(_dryad_S2#8, avl_keys(right)), old(_dryad_S3#9, avl_keys(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_keys(_dryad_S2#8, $phys_ptr_cast(L#right, ^a_node)) == F#avl_keys(_dryad_S3#9, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(right)))), ==(old(_dryad_S2#8, avl_max_key(right)), old(_dryad_S3#9, avl_max_key(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_max_key(_dryad_S2#8, $phys_ptr_cast(L#right, ^a_node)) == F#avl_max_key(_dryad_S3#9, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(right)))), ==(old(_dryad_S2#8, avl_min_key(right)), old(_dryad_S3#9, avl_min_key(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_min_key(_dryad_S2#8, $phys_ptr_cast(L#right, ^a_node)) == F#avl_min_key(_dryad_S3#9, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(left)))), ==(old(_dryad_S2#8, avl(left)), old(_dryad_S3#9, avl(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl(_dryad_S2#8, $phys_ptr_cast(L#left, ^a_node)) == F#avl(_dryad_S3#9, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(left)))), ==(old(_dryad_S2#8, avl_reach(left)), old(_dryad_S3#9, avl_reach(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#left, ^a_node)) == F#avl_reach(_dryad_S3#9, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(left)))), ==(old(_dryad_S2#8, avl_height(left)), old(_dryad_S3#9, avl_height(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_height(_dryad_S2#8, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height(_dryad_S3#9, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(left)))), ==(old(_dryad_S2#8, avl_keys(left)), old(_dryad_S3#9, avl_keys(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_keys(_dryad_S2#8, $phys_ptr_cast(L#left, ^a_node)) == F#avl_keys(_dryad_S3#9, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(left)))), ==(old(_dryad_S2#8, avl_max_key(left)), old(_dryad_S3#9, avl_max_key(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_max_key(_dryad_S2#8, $phys_ptr_cast(L#left, ^a_node)) == F#avl_max_key(_dryad_S3#9, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#8, avl_reach(left)))), ==(old(_dryad_S2#8, avl_min_key(left)), old(_dryad_S3#9, avl_min_key(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#8, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_min_key(_dryad_S2#8, $phys_ptr_cast(L#left, ^a_node)) == F#avl_min_key(_dryad_S3#9, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, new_left)), @_vcc_ptr_eq_pure(*((new_left->left)), old(_dryad_S2#8, *((new_left->left))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_left, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#8, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, new_left)), @_vcc_ptr_eq_pure(*((new_left->right)), old(_dryad_S2#8, *((new_left->right))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_left, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#8, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, new_left)), ==(*((new_left->key)), old(_dryad_S2#8, *((new_left->key))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_left, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)) == $rd_inv(_dryad_S2#8, a_node.key, $phys_ptr_cast(L#new_left, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, new_left)), ==(*((new_left->height)), old(_dryad_S2#8, *((new_left->height))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#new_left, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == $rd_inv(_dryad_S2#8, a_node.height, $phys_ptr_cast(L#new_left, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), @_vcc_ptr_eq_pure(*((x1->left)), old(_dryad_S2#8, *((x1->left))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#8, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), @_vcc_ptr_eq_pure(*((x1->right)), old(_dryad_S2#8, *((x1->right))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#8, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), ==(*((x1->key)), old(_dryad_S2#8, *((x1->key))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(_dryad_S2#8, a_node.key, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), ==(*((x1->height)), old(_dryad_S2#8, *((x1->height))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(_dryad_S2#8, a_node.height, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), @_vcc_ptr_eq_pure(*((x0->left)), old(_dryad_S2#8, *((x0->left))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#8, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), @_vcc_ptr_eq_pure(*((x0->right)), old(_dryad_S2#8, *((x0->right))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#8, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), ==(*((x0->key)), old(_dryad_S2#8, *((x0->key))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(_dryad_S2#8, a_node.key, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), ==(*((x0->height)), old(_dryad_S2#8, *((x0->height))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(_dryad_S2#8, a_node.height, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right)), @_vcc_ptr_eq_pure(*((right->left)), old(_dryad_S2#8, *((right->left))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#right, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#8, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right)), @_vcc_ptr_eq_pure(*((right->right)), old(_dryad_S2#8, *((right->right))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#right, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#8, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right)), ==(*((right->key)), old(_dryad_S2#8, *((right->key))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#right, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) == $rd_inv(_dryad_S2#8, a_node.key, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right)), ==(*((right->height)), old(_dryad_S2#8, *((right->height))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#right, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == $rd_inv(_dryad_S2#8, a_node.height, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, left)), @_vcc_ptr_eq_pure(*((left->left)), old(_dryad_S2#8, *((left->left))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#left, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#8, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, left)), @_vcc_ptr_eq_pure(*((left->right)), old(_dryad_S2#8, *((left->right))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#left, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#8, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, left)), ==(*((left->key)), old(_dryad_S2#8, *((left->key))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#left, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) == $rd_inv(_dryad_S2#8, a_node.key, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, left)), ==(*((left->height)), old(_dryad_S2#8, *((left->height))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#left, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == $rd_inv(_dryad_S2#8, a_node.height, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl(new_left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((new_left->left))), avl(*((new_left->right)))), unchecked!(@_vcc_oset_in(new_left, @_vcc_oset_union(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))))), unchecked!(@_vcc_intset_in(*((new_left->key)), @_vcc_intset_union(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))))), @_vcc_oset_disjoint(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))), @_vcc_intset_disjoint(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))), ==>(@_vcc_ptr_neq_null(*((new_left->left))), <(avl_max_key(*((new_left->left))), *((new_left->key))))), ==>(@_vcc_ptr_neq_null(*((new_left->right))), <(*((new_left->key)), avl_min_key(*((new_left->right)))))), ||(||(&&(==(avl_height(*((new_left->left))), avl_height(*((new_left->right)))), ==(*((new_left->height)), +(avl_height(*((new_left->left))), 1))), &&(==(avl_height(*((new_left->left))), +(avl_height(*((new_left->right))), 1)), ==(*((new_left->height)), +(avl_height(*((new_left->left))), 1)))), &&(==(avl_height(*((new_left->right))), +(avl_height(*((new_left->left))), 1)), ==(*((new_left->height)), +(avl_height(*((new_left->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#new_left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#new_left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_reach(new_left), @_vcc_oset_union_one1(new_left, @_vcc_oset_union(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#new_left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#new_left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_height(new_left), @ite(>(avl_height(*((new_left->left))), avl_height(*((new_left->right)))), +(avl_height(*((new_left->left))), 1), +(avl_height(*((new_left->right))), 1)))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#new_left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_keys(new_left), @_vcc_intset_union(@_vcc_intset_singleton(*((new_left->key))), @_vcc_intset_union(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#new_left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), @\int_max(avl_max_key(*((new_left->left))), avl_max_key(*((new_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_eq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), avl_max_key(*((new_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), avl_max_key(*((new_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), @\int_min(avl_min_key(*((new_left->left))), avl_min_key(*((new_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_eq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), avl_min_key(*((new_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), avl_min_key(*((new_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl(right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((right->left))), avl(*((right->right)))), unchecked!(@_vcc_oset_in(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))), unchecked!(@_vcc_intset_in(*((right->key)), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))), @_vcc_oset_disjoint(avl_reach(*((right->left))), avl_reach(*((right->right))))), @_vcc_intset_disjoint(avl_keys(*((right->left))), avl_keys(*((right->right))))), ==>(@_vcc_ptr_neq_null(*((right->left))), <(avl_max_key(*((right->left))), *((right->key))))), ==>(@_vcc_ptr_neq_null(*((right->right))), <(*((right->key)), avl_min_key(*((right->right)))))), ||(||(&&(==(avl_height(*((right->left))), avl_height(*((right->right)))), ==(*((right->height)), +(avl_height(*((right->left))), 1))), &&(==(avl_height(*((right->left))), +(avl_height(*((right->right))), 1)), ==(*((right->height)), +(avl_height(*((right->left))), 1)))), &&(==(avl_height(*((right->right))), +(avl_height(*((right->left))), 1)), ==(*((right->height)), +(avl_height(*((right->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_reach(right), @_vcc_oset_union_one1(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_height(right), @ite(>(avl_height(*((right->left))), avl_height(*((right->right)))), +(avl_height(*((right->left))), 1), +(avl_height(*((right->right))), 1)))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_keys(right), @_vcc_intset_union(@_vcc_intset_singleton(*((right->key))), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), @\int_max(avl_max_key(*((right->left))), avl_max_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), @\int_min(avl_min_key(*((right->left))), avl_min_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl(left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((left->left))), avl(*((left->right)))), unchecked!(@_vcc_oset_in(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))), unchecked!(@_vcc_intset_in(*((left->key)), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))), @_vcc_oset_disjoint(avl_reach(*((left->left))), avl_reach(*((left->right))))), @_vcc_intset_disjoint(avl_keys(*((left->left))), avl_keys(*((left->right))))), ==>(@_vcc_ptr_neq_null(*((left->left))), <(avl_max_key(*((left->left))), *((left->key))))), ==>(@_vcc_ptr_neq_null(*((left->right))), <(*((left->key)), avl_min_key(*((left->right)))))), ||(||(&&(==(avl_height(*((left->left))), avl_height(*((left->right)))), ==(*((left->height)), +(avl_height(*((left->left))), 1))), &&(==(avl_height(*((left->left))), +(avl_height(*((left->right))), 1)), ==(*((left->height)), +(avl_height(*((left->left))), 1)))), &&(==(avl_height(*((left->right))), +(avl_height(*((left->left))), 1)), ==(*((left->height)), +(avl_height(*((left->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_reach(left), @_vcc_oset_union_one1(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_height(left), @ite(>(avl_height(*((left->left))), avl_height(*((left->right)))), +(avl_height(*((left->left))), 1), +(avl_height(*((left->right))), 1)))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_keys(left), @_vcc_intset_union(@_vcc_intset_singleton(*((left->key))), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), @\int_max(avl_max_key(*((left->left))), avl_max_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), @\int_min(avl_min_key(*((left->left))), avl_min_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl(new_left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((new_left->left))), avl(*((new_left->right)))), unchecked!(@_vcc_oset_in(new_left, @_vcc_oset_union(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))))), unchecked!(@_vcc_intset_in(*((new_left->key)), @_vcc_intset_union(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))))), @_vcc_oset_disjoint(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))), @_vcc_intset_disjoint(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))), ==>(@_vcc_ptr_neq_null(*((new_left->left))), <(avl_max_key(*((new_left->left))), *((new_left->key))))), ==>(@_vcc_ptr_neq_null(*((new_left->right))), <(*((new_left->key)), avl_min_key(*((new_left->right)))))), ||(||(&&(==(avl_height(*((new_left->left))), avl_height(*((new_left->right)))), ==(*((new_left->height)), +(avl_height(*((new_left->left))), 1))), &&(==(avl_height(*((new_left->left))), +(avl_height(*((new_left->right))), 1)), ==(*((new_left->height)), +(avl_height(*((new_left->left))), 1)))), &&(==(avl_height(*((new_left->right))), +(avl_height(*((new_left->left))), 1)), ==(*((new_left->height)), +(avl_height(*((new_left->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#new_left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#new_left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#new_left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_reach(new_left), @_vcc_oset_union_one1(new_left, @_vcc_oset_union(avl_reach(*((new_left->left))), avl_reach(*((new_left->right))))))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#new_left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#new_left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_height(new_left), @ite(>(avl_height(*((new_left->left))), avl_height(*((new_left->right)))), +(avl_height(*((new_left->left))), 1), +(avl_height(*((new_left->right))), 1)))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#new_left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(new_left), ==(avl_keys(new_left), @_vcc_intset_union(@_vcc_intset_singleton(*((new_left->key))), @_vcc_intset_union(avl_keys(*((new_left->left))), avl_keys(*((new_left->right))))))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#new_left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), @\int_max(avl_max_key(*((new_left->left))), avl_max_key(*((new_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_eq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), avl_max_key(*((new_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_max_key(new_left), @\int_max(*((new_left->key)), avl_max_key(*((new_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), @\int_min(avl_min_key(*((new_left->left))), avl_min_key(*((new_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_left->left))), @_vcc_ptr_eq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), avl_min_key(*((new_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_left->left))), @_vcc_ptr_neq_null(*((new_left->right)))), ==(avl_min_key(new_left), @\int_min(*((new_left->key)), avl_min_key(*((new_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#new_left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#new_left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#new_left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#new_left, ^a_node), ^a_node))));
                // struct a_node* res_avl_balance#5; 
                // res_avl_balance#5 := avl_balance(x); 
                call res_avl_balance#5 := avl_balance($phys_ptr_cast(P#x, ^a_node));
                assume $full_stop_ext(#tok$3^130.11, $s);
                // return res_avl_balance#5; 
                $result := $phys_ptr_cast(res_avl_balance#5, ^a_node);
                assume true;
                assert $position_marker();
                goto #exit;
            }
            else
            {
              anon10:
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl(right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((right->left))), avl(*((right->right)))), unchecked!(@_vcc_oset_in(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))), unchecked!(@_vcc_intset_in(*((right->key)), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))), @_vcc_oset_disjoint(avl_reach(*((right->left))), avl_reach(*((right->right))))), @_vcc_intset_disjoint(avl_keys(*((right->left))), avl_keys(*((right->right))))), ==>(@_vcc_ptr_neq_null(*((right->left))), <(avl_max_key(*((right->left))), *((right->key))))), ==>(@_vcc_ptr_neq_null(*((right->right))), <(*((right->key)), avl_min_key(*((right->right)))))), ||(||(&&(==(avl_height(*((right->left))), avl_height(*((right->right)))), ==(*((right->height)), +(avl_height(*((right->left))), 1))), &&(==(avl_height(*((right->left))), +(avl_height(*((right->right))), 1)), ==(*((right->height)), +(avl_height(*((right->left))), 1)))), &&(==(avl_height(*((right->right))), +(avl_height(*((right->left))), 1)), ==(*((right->height)), +(avl_height(*((right->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_reach(right), @_vcc_oset_union_one1(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_height(right), @ite(>(avl_height(*((right->left))), avl_height(*((right->right)))), +(avl_height(*((right->left))), 1), +(avl_height(*((right->right))), 1)))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_keys(right), @_vcc_intset_union(@_vcc_intset_singleton(*((right->key))), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), @\int_max(avl_max_key(*((right->left))), avl_max_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), @\int_min(avl_min_key(*((right->left))), avl_min_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl(left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((left->left))), avl(*((left->right)))), unchecked!(@_vcc_oset_in(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))), unchecked!(@_vcc_intset_in(*((left->key)), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))), @_vcc_oset_disjoint(avl_reach(*((left->left))), avl_reach(*((left->right))))), @_vcc_intset_disjoint(avl_keys(*((left->left))), avl_keys(*((left->right))))), ==>(@_vcc_ptr_neq_null(*((left->left))), <(avl_max_key(*((left->left))), *((left->key))))), ==>(@_vcc_ptr_neq_null(*((left->right))), <(*((left->key)), avl_min_key(*((left->right)))))), ||(||(&&(==(avl_height(*((left->left))), avl_height(*((left->right)))), ==(*((left->height)), +(avl_height(*((left->left))), 1))), &&(==(avl_height(*((left->left))), +(avl_height(*((left->right))), 1)), ==(*((left->height)), +(avl_height(*((left->left))), 1)))), &&(==(avl_height(*((left->right))), +(avl_height(*((left->left))), 1)), ==(*((left->height)), +(avl_height(*((left->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_reach(left), @_vcc_oset_union_one1(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_height(left), @ite(>(avl_height(*((left->left))), avl_height(*((left->right)))), +(avl_height(*((left->left))), 1), +(avl_height(*((left->right))), 1)))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_keys(left), @_vcc_intset_union(@_vcc_intset_singleton(*((left->key))), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), @\int_max(avl_max_key(*((left->left))), avl_max_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), @\int_min(avl_min_key(*((left->left))), avl_min_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // struct a_node* new_right#10; 
                // _math \state _dryad_S0#11; 
                // _dryad_S0#11 := @_vcc_current_state(@state); 
                _dryad_S0#11 := $current_state($s);
                // _math \state stmtexpr0#30; 
                // stmtexpr0#30 := _dryad_S0#11; 
                stmtexpr0#30 := _dryad_S0#11;
                // non-pure function
                // new_right#10 := avl_delete(right, k); 
                call new_right#10 := avl_delete($phys_ptr_cast(L#right, ^a_node), P#k);
                assume $full_stop_ext(#tok$3^134.26, $s);
                // _math \state _dryad_S1#12; 
                // _dryad_S1#12 := @_vcc_current_state(@state); 
                _dryad_S1#12 := $current_state($s);
                // _math \state stmtexpr1#31; 
                // stmtexpr1#31 := _dryad_S1#12; 
                stmtexpr1#31 := _dryad_S1#12;
                // assume @_vcc_oset_disjoint(avl_reach(new_right#10), @_vcc_oset_diff(_dryad_G1, old(_dryad_S0#11, avl_reach(right)))); 
                assume $oset_disjoint(F#avl_reach($s, $phys_ptr_cast(new_right#10, ^a_node)), $oset_diff(SL#_dryad_G1, F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))));
                // _math \oset res_avl_reach#6; 
                // res_avl_reach#6 := avl_reach(new_right#10); 
                call res_avl_reach#6 := avl_reach($phys_ptr_cast(new_right#10, ^a_node));
                assume $full_stop_ext(#tok$4^0.0, $s);
                // _dryad_G1 := @_vcc_oset_union(res_avl_reach#6, @_vcc_oset_diff(_dryad_G1, pure(old(_dryad_S0#11, avl_reach(right))))); 
                SL#_dryad_G1 := $oset_union(res_avl_reach#6, $oset_diff(SL#_dryad_G1, F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))));
                // _math \oset stmtexpr2#32; 
                // stmtexpr2#32 := _dryad_G1; 
                stmtexpr2#32 := SL#_dryad_G1;
                // assume ==(glob_reach(), _dryad_G1); 
                assume F#glob_reach() == SL#_dryad_G1;
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x1))), ==(old(_dryad_S0#11, avl(x1)), old(_dryad_S1#12, avl(x1)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl(_dryad_S0#11, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl(_dryad_S1#12, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x1))), ==(old(_dryad_S0#11, avl_reach(x1)), old(_dryad_S1#12, avl_reach(x1)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_reach(_dryad_S0#11, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_reach(_dryad_S1#12, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x1))), ==(old(_dryad_S0#11, avl_height(x1)), old(_dryad_S1#12, avl_height(x1)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_height(_dryad_S0#11, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height(_dryad_S1#12, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x1))), ==(old(_dryad_S0#11, avl_keys(x1)), old(_dryad_S1#12, avl_keys(x1)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_keys(_dryad_S0#11, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_keys(_dryad_S1#12, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x1))), ==(old(_dryad_S0#11, avl_max_key(x1)), old(_dryad_S1#12, avl_max_key(x1)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_max_key(_dryad_S0#11, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_max_key(_dryad_S1#12, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x1))), ==(old(_dryad_S0#11, avl_min_key(x1)), old(_dryad_S1#12, avl_min_key(x1)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_min_key(_dryad_S0#11, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_min_key(_dryad_S1#12, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x0))), ==(old(_dryad_S0#11, avl(x0)), old(_dryad_S1#12, avl(x0)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl(_dryad_S0#11, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl(_dryad_S1#12, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x0))), ==(old(_dryad_S0#11, avl_reach(x0)), old(_dryad_S1#12, avl_reach(x0)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_reach(_dryad_S0#11, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_reach(_dryad_S1#12, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x0))), ==(old(_dryad_S0#11, avl_height(x0)), old(_dryad_S1#12, avl_height(x0)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_height(_dryad_S0#11, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height(_dryad_S1#12, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x0))), ==(old(_dryad_S0#11, avl_keys(x0)), old(_dryad_S1#12, avl_keys(x0)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_keys(_dryad_S0#11, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_keys(_dryad_S1#12, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x0))), ==(old(_dryad_S0#11, avl_max_key(x0)), old(_dryad_S1#12, avl_max_key(x0)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_max_key(_dryad_S0#11, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_max_key(_dryad_S1#12, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x0))), ==(old(_dryad_S0#11, avl_min_key(x0)), old(_dryad_S1#12, avl_min_key(x0)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_min_key(_dryad_S0#11, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_min_key(_dryad_S1#12, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(right))), ==(old(_dryad_S0#11, avl(right)), old(_dryad_S1#12, avl(right)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)) == F#avl(_dryad_S1#12, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(right))), ==(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S1#12, avl_reach(right)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)) == F#avl_reach(_dryad_S1#12, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(right))), ==(old(_dryad_S0#11, avl_height(right)), old(_dryad_S1#12, avl_height(right)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_height(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height(_dryad_S1#12, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(right))), ==(old(_dryad_S0#11, avl_keys(right)), old(_dryad_S1#12, avl_keys(right)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_keys(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)) == F#avl_keys(_dryad_S1#12, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(right))), ==(old(_dryad_S0#11, avl_max_key(right)), old(_dryad_S1#12, avl_max_key(right)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_max_key(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)) == F#avl_max_key(_dryad_S1#12, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(right))), ==(old(_dryad_S0#11, avl_min_key(right)), old(_dryad_S1#12, avl_min_key(right)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_min_key(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)) == F#avl_min_key(_dryad_S1#12, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(left))), ==(old(_dryad_S0#11, avl(left)), old(_dryad_S1#12, avl(left)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl(_dryad_S0#11, $phys_ptr_cast(L#left, ^a_node)) == F#avl(_dryad_S1#12, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(left))), ==(old(_dryad_S0#11, avl_reach(left)), old(_dryad_S1#12, avl_reach(left)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#left, ^a_node)) == F#avl_reach(_dryad_S1#12, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(left))), ==(old(_dryad_S0#11, avl_height(left)), old(_dryad_S1#12, avl_height(left)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_height(_dryad_S0#11, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height(_dryad_S1#12, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(left))), ==(old(_dryad_S0#11, avl_keys(left)), old(_dryad_S1#12, avl_keys(left)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_keys(_dryad_S0#11, $phys_ptr_cast(L#left, ^a_node)) == F#avl_keys(_dryad_S1#12, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(left))), ==(old(_dryad_S0#11, avl_max_key(left)), old(_dryad_S1#12, avl_max_key(left)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_max_key(_dryad_S0#11, $phys_ptr_cast(L#left, ^a_node)) == F#avl_max_key(_dryad_S1#12, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(left))), ==(old(_dryad_S0#11, avl_min_key(left)), old(_dryad_S1#12, avl_min_key(left)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_min_key(_dryad_S0#11, $phys_ptr_cast(L#left, ^a_node)) == F#avl_min_key(_dryad_S1#12, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x))), ==(old(_dryad_S0#11, avl(x)), old(_dryad_S1#12, avl(x)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl(_dryad_S0#11, $phys_ptr_cast(P#x, ^a_node)) == F#avl(_dryad_S1#12, $phys_ptr_cast(P#x, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x))), ==(old(_dryad_S0#11, avl_reach(x)), old(_dryad_S1#12, avl_reach(x)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_reach(_dryad_S0#11, $phys_ptr_cast(P#x, ^a_node)) == F#avl_reach(_dryad_S1#12, $phys_ptr_cast(P#x, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x))), ==(old(_dryad_S0#11, avl_height(x)), old(_dryad_S1#12, avl_height(x)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_height(_dryad_S0#11, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height(_dryad_S1#12, $phys_ptr_cast(P#x, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x))), ==(old(_dryad_S0#11, avl_keys(x)), old(_dryad_S1#12, avl_keys(x)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_keys(_dryad_S0#11, $phys_ptr_cast(P#x, ^a_node)) == F#avl_keys(_dryad_S1#12, $phys_ptr_cast(P#x, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x))), ==(old(_dryad_S0#11, avl_max_key(x)), old(_dryad_S1#12, avl_max_key(x)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_max_key(_dryad_S0#11, $phys_ptr_cast(P#x, ^a_node)) == F#avl_max_key(_dryad_S1#12, $phys_ptr_cast(P#x, ^a_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#11, avl_reach(right)), old(_dryad_S0#11, avl_reach(x))), ==(old(_dryad_S0#11, avl_min_key(x)), old(_dryad_S1#12, avl_min_key(x)))); 
                assume $oset_disjoint(F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node)), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(P#x, ^a_node))) ==> F#avl_min_key(_dryad_S0#11, $phys_ptr_cast(P#x, ^a_node)) == F#avl_min_key(_dryad_S1#12, $phys_ptr_cast(P#x, ^a_node));
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), ==(avl(new_right#10), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((new_right#10->left))), avl(*((new_right#10->right)))), unchecked!(@_vcc_oset_in(new_right#10, @_vcc_oset_union(avl_reach(*((new_right#10->left))), avl_reach(*((new_right#10->right))))))), unchecked!(@_vcc_intset_in(*((new_right#10->key)), @_vcc_intset_union(avl_keys(*((new_right#10->left))), avl_keys(*((new_right#10->right))))))), @_vcc_oset_disjoint(avl_reach(*((new_right#10->left))), avl_reach(*((new_right#10->right))))), @_vcc_intset_disjoint(avl_keys(*((new_right#10->left))), avl_keys(*((new_right#10->right))))), ==>(@_vcc_ptr_neq_null(*((new_right#10->left))), <(avl_max_key(*((new_right#10->left))), *((new_right#10->key))))), ==>(@_vcc_ptr_neq_null(*((new_right#10->right))), <(*((new_right#10->key)), avl_min_key(*((new_right#10->right)))))), ||(||(&&(==(avl_height(*((new_right#10->left))), avl_height(*((new_right#10->right)))), ==(*((new_right#10->height)), +(avl_height(*((new_right#10->left))), 1))), &&(==(avl_height(*((new_right#10->left))), +(avl_height(*((new_right#10->right))), 1)), ==(*((new_right#10->height)), +(avl_height(*((new_right#10->left))), 1)))), &&(==(avl_height(*((new_right#10->right))), +(avl_height(*((new_right#10->left))), 1)), ==(*((new_right#10->height)), +(avl_height(*((new_right#10->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> F#avl($s, $phys_ptr_cast(new_right#10, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(new_right#10, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(new_right#10, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(new_right#10, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(new_right#10, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), ==(avl_reach(new_right#10), @_vcc_oset_union_one1(new_right#10, @_vcc_oset_union(avl_reach(*((new_right#10->left))), avl_reach(*((new_right#10->right))))))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(new_right#10, ^a_node)) == $oset_union_one1($phys_ptr_cast(new_right#10, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), ==(avl_height(new_right#10), @ite(>(avl_height(*((new_right#10->left))), avl_height(*((new_right#10->right)))), +(avl_height(*((new_right#10->left))), 1), +(avl_height(*((new_right#10->right))), 1)))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(new_right#10, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), ==(avl_keys(new_right#10), @_vcc_intset_union(@_vcc_intset_singleton(*((new_right#10->key))), @_vcc_intset_union(avl_keys(*((new_right#10->left))), avl_keys(*((new_right#10->right))))))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(new_right#10, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right#10->left))), @_vcc_ptr_neq_null(*((new_right#10->right)))), ==(avl_max_key(new_right#10), @\int_max(*((new_right#10->key)), @\int_max(avl_max_key(*((new_right#10->left))), avl_max_key(*((new_right#10->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right#10->left))), @_vcc_ptr_eq_null(*((new_right#10->right)))), ==(avl_max_key(new_right#10), @\int_max(*((new_right#10->key)), avl_max_key(*((new_right#10->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right#10->left))), @_vcc_ptr_neq_null(*((new_right#10->right)))), ==(avl_max_key(new_right#10), @\int_max(*((new_right#10->key)), avl_max_key(*((new_right#10->right)))))))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right#10->left))), @_vcc_ptr_neq_null(*((new_right#10->right)))), ==(avl_min_key(new_right#10), @\int_min(*((new_right#10->key)), @\int_min(avl_min_key(*((new_right#10->left))), avl_min_key(*((new_right#10->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right#10->left))), @_vcc_ptr_eq_null(*((new_right#10->right)))), ==(avl_min_key(new_right#10), @\int_min(*((new_right#10->key)), avl_min_key(*((new_right#10->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right#10->left))), @_vcc_ptr_neq_null(*((new_right#10->right)))), ==(avl_min_key(new_right#10), @\int_min(*((new_right#10->key)), avl_min_key(*((new_right#10->right)))))))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl(right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((right->left))), avl(*((right->right)))), unchecked!(@_vcc_oset_in(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))), unchecked!(@_vcc_intset_in(*((right->key)), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))), @_vcc_oset_disjoint(avl_reach(*((right->left))), avl_reach(*((right->right))))), @_vcc_intset_disjoint(avl_keys(*((right->left))), avl_keys(*((right->right))))), ==>(@_vcc_ptr_neq_null(*((right->left))), <(avl_max_key(*((right->left))), *((right->key))))), ==>(@_vcc_ptr_neq_null(*((right->right))), <(*((right->key)), avl_min_key(*((right->right)))))), ||(||(&&(==(avl_height(*((right->left))), avl_height(*((right->right)))), ==(*((right->height)), +(avl_height(*((right->left))), 1))), &&(==(avl_height(*((right->left))), +(avl_height(*((right->right))), 1)), ==(*((right->height)), +(avl_height(*((right->left))), 1)))), &&(==(avl_height(*((right->right))), +(avl_height(*((right->left))), 1)), ==(*((right->height)), +(avl_height(*((right->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_reach(right), @_vcc_oset_union_one1(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_height(right), @ite(>(avl_height(*((right->left))), avl_height(*((right->right)))), +(avl_height(*((right->left))), 1), +(avl_height(*((right->right))), 1)))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_keys(right), @_vcc_intset_union(@_vcc_intset_singleton(*((right->key))), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), @\int_max(avl_max_key(*((right->left))), avl_max_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), @\int_min(avl_min_key(*((right->left))), avl_min_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl(left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((left->left))), avl(*((left->right)))), unchecked!(@_vcc_oset_in(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))), unchecked!(@_vcc_intset_in(*((left->key)), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))), @_vcc_oset_disjoint(avl_reach(*((left->left))), avl_reach(*((left->right))))), @_vcc_intset_disjoint(avl_keys(*((left->left))), avl_keys(*((left->right))))), ==>(@_vcc_ptr_neq_null(*((left->left))), <(avl_max_key(*((left->left))), *((left->key))))), ==>(@_vcc_ptr_neq_null(*((left->right))), <(*((left->key)), avl_min_key(*((left->right)))))), ||(||(&&(==(avl_height(*((left->left))), avl_height(*((left->right)))), ==(*((left->height)), +(avl_height(*((left->left))), 1))), &&(==(avl_height(*((left->left))), +(avl_height(*((left->right))), 1)), ==(*((left->height)), +(avl_height(*((left->left))), 1)))), &&(==(avl_height(*((left->right))), +(avl_height(*((left->left))), 1)), ==(*((left->height)), +(avl_height(*((left->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_reach(left), @_vcc_oset_union_one1(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_height(left), @ite(>(avl_height(*((left->left))), avl_height(*((left->right)))), +(avl_height(*((left->left))), 1), +(avl_height(*((left->right))), 1)))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_keys(left), @_vcc_intset_union(@_vcc_intset_singleton(*((left->key))), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), @\int_max(avl_max_key(*((left->left))), avl_max_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), @\int_min(avl_min_key(*((left->left))), avl_min_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#11, avl_reach(right)))), @_vcc_ptr_eq_pure(*((x1->left)), old(_dryad_S0#11, *((x1->left))))); 
                assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#11, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#11, avl_reach(right)))), @_vcc_ptr_eq_pure(*((x1->right)), old(_dryad_S0#11, *((x1->right))))); 
                assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#11, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#11, avl_reach(right)))), ==(*((x1->key)), old(_dryad_S0#11, *((x1->key))))); 
                assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(_dryad_S0#11, a_node.key, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#11, avl_reach(right)))), ==(*((x1->height)), old(_dryad_S0#11, *((x1->height))))); 
                assume !$oset_in($phys_ptr_cast(SL#x1, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(_dryad_S0#11, a_node.height, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#11, avl_reach(right)))), @_vcc_ptr_eq_pure(*((x0->left)), old(_dryad_S0#11, *((x0->left))))); 
                assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#11, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#11, avl_reach(right)))), @_vcc_ptr_eq_pure(*((x0->right)), old(_dryad_S0#11, *((x0->right))))); 
                assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#11, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#11, avl_reach(right)))), ==(*((x0->key)), old(_dryad_S0#11, *((x0->key))))); 
                assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(_dryad_S0#11, a_node.key, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#11, avl_reach(right)))), ==(*((x0->height)), old(_dryad_S0#11, *((x0->height))))); 
                assume !$oset_in($phys_ptr_cast(SL#x0, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(_dryad_S0#11, a_node.height, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(!(@_vcc_oset_in(right, old(_dryad_S0#11, avl_reach(right)))), @_vcc_ptr_eq_pure(*((right->left)), old(_dryad_S0#11, *((right->left))))); 
                assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#11, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(right, old(_dryad_S0#11, avl_reach(right)))), @_vcc_ptr_eq_pure(*((right->right)), old(_dryad_S0#11, *((right->right))))); 
                assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#11, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(right, old(_dryad_S0#11, avl_reach(right)))), ==(*((right->key)), old(_dryad_S0#11, *((right->key))))); 
                assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) == $rd_inv(_dryad_S0#11, a_node.key, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(!(@_vcc_oset_in(right, old(_dryad_S0#11, avl_reach(right)))), ==(*((right->height)), old(_dryad_S0#11, *((right->height))))); 
                assume !$oset_in($phys_ptr_cast(L#right, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == $rd_inv(_dryad_S0#11, a_node.height, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(!(@_vcc_oset_in(left, old(_dryad_S0#11, avl_reach(right)))), @_vcc_ptr_eq_pure(*((left->left)), old(_dryad_S0#11, *((left->left))))); 
                assume !$oset_in($phys_ptr_cast(L#left, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#11, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(left, old(_dryad_S0#11, avl_reach(right)))), @_vcc_ptr_eq_pure(*((left->right)), old(_dryad_S0#11, *((left->right))))); 
                assume !$oset_in($phys_ptr_cast(L#left, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#11, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(left, old(_dryad_S0#11, avl_reach(right)))), ==(*((left->key)), old(_dryad_S0#11, *((left->key))))); 
                assume !$oset_in($phys_ptr_cast(L#left, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) == $rd_inv(_dryad_S0#11, a_node.key, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(!(@_vcc_oset_in(left, old(_dryad_S0#11, avl_reach(right)))), ==(*((left->height)), old(_dryad_S0#11, *((left->height))))); 
                assume !$oset_in($phys_ptr_cast(L#left, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == $rd_inv(_dryad_S0#11, a_node.height, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#11, avl_reach(right)))), @_vcc_ptr_eq_pure(*((x->left)), old(_dryad_S0#11, *((x->left))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#11, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#11, avl_reach(right)))), @_vcc_ptr_eq_pure(*((x->right)), old(_dryad_S0#11, *((x->right))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S0#11, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#11, avl_reach(right)))), ==(*((x->key)), old(_dryad_S0#11, *((x->key))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(_dryad_S0#11, a_node.key, $phys_ptr_cast(P#x, ^a_node));
                // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#11, avl_reach(right)))), ==(*((x->height)), old(_dryad_S0#11, *((x->height))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S0#11, $phys_ptr_cast(L#right, ^a_node))) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == $rd_inv(_dryad_S0#11, a_node.height, $phys_ptr_cast(P#x, ^a_node));
                // _math \state _dryad_S2#13; 
                // _dryad_S2#13 := @_vcc_current_state(@state); 
                _dryad_S2#13 := $current_state($s);
                // _math \state stmtexpr3#33; 
                // stmtexpr3#33 := _dryad_S2#13; 
                stmtexpr3#33 := _dryad_S2#13;
                // assert @prim_writes_check((x->right)); 
                assert $writable_prim($s, #wrTime$3^79.3, $dot($phys_ptr_cast(P#x, ^a_node), a_node.right));
                // *(x->right) := new_right#10; 
                call $write_int(a_node.right, $phys_ptr_cast(P#x, ^a_node), $ptr_to_int($phys_ptr_cast(new_right#10, ^a_node)));
                assume $full_stop_ext(#tok$3^136.4, $s);
                // _math \state _dryad_S3#14; 
                // _dryad_S3#14 := @_vcc_current_state(@state); 
                _dryad_S3#14 := $current_state($s);
                // _math \state stmtexpr4#34; 
                // stmtexpr4#34 := _dryad_S3#14; 
                stmtexpr4#34 := _dryad_S3#14;
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(*((x->left)))))), ==(old(_dryad_S2#13, avl(*((x->left)))), old(_dryad_S3#14, avl(*((x->left)))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $rd_phys_ptr(_dryad_S2#13, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl(_dryad_S2#13, $rd_phys_ptr(_dryad_S2#13, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl(_dryad_S3#14, $rd_phys_ptr(_dryad_S3#14, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(*((x->left)))))), ==(old(_dryad_S2#13, avl_reach(*((x->left)))), old(_dryad_S3#14, avl_reach(*((x->left)))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $rd_phys_ptr(_dryad_S2#13, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_reach(_dryad_S2#13, $rd_phys_ptr(_dryad_S2#13, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_reach(_dryad_S3#14, $rd_phys_ptr(_dryad_S3#14, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(*((x->left)))))), ==(old(_dryad_S2#13, avl_height(*((x->left)))), old(_dryad_S3#14, avl_height(*((x->left)))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $rd_phys_ptr(_dryad_S2#13, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_height(_dryad_S2#13, $rd_phys_ptr(_dryad_S2#13, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height(_dryad_S3#14, $rd_phys_ptr(_dryad_S3#14, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(*((x->left)))))), ==(old(_dryad_S2#13, avl_keys(*((x->left)))), old(_dryad_S3#14, avl_keys(*((x->left)))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $rd_phys_ptr(_dryad_S2#13, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_keys(_dryad_S2#13, $rd_phys_ptr(_dryad_S2#13, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_keys(_dryad_S3#14, $rd_phys_ptr(_dryad_S3#14, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(*((x->left)))))), ==(old(_dryad_S2#13, avl_max_key(*((x->left)))), old(_dryad_S3#14, avl_max_key(*((x->left)))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $rd_phys_ptr(_dryad_S2#13, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_max_key(_dryad_S2#13, $rd_phys_ptr(_dryad_S2#13, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_max_key(_dryad_S3#14, $rd_phys_ptr(_dryad_S3#14, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(*((x->left)))))), ==(old(_dryad_S2#13, avl_min_key(*((x->left)))), old(_dryad_S3#14, avl_min_key(*((x->left)))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $rd_phys_ptr(_dryad_S2#13, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node))) ==> F#avl_min_key(_dryad_S2#13, $rd_phys_ptr(_dryad_S2#13, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_min_key(_dryad_S3#14, $rd_phys_ptr(_dryad_S3#14, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(new_right#10)))), ==(old(_dryad_S2#13, avl(new_right#10)), old(_dryad_S3#14, avl(new_right#10)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(new_right#10, ^a_node))) ==> F#avl(_dryad_S2#13, $phys_ptr_cast(new_right#10, ^a_node)) == F#avl(_dryad_S3#14, $phys_ptr_cast(new_right#10, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(new_right#10)))), ==(old(_dryad_S2#13, avl_reach(new_right#10)), old(_dryad_S3#14, avl_reach(new_right#10)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(new_right#10, ^a_node))) ==> F#avl_reach(_dryad_S2#13, $phys_ptr_cast(new_right#10, ^a_node)) == F#avl_reach(_dryad_S3#14, $phys_ptr_cast(new_right#10, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(new_right#10)))), ==(old(_dryad_S2#13, avl_height(new_right#10)), old(_dryad_S3#14, avl_height(new_right#10)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(new_right#10, ^a_node))) ==> F#avl_height(_dryad_S2#13, $phys_ptr_cast(new_right#10, ^a_node)) == F#avl_height(_dryad_S3#14, $phys_ptr_cast(new_right#10, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(new_right#10)))), ==(old(_dryad_S2#13, avl_keys(new_right#10)), old(_dryad_S3#14, avl_keys(new_right#10)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(new_right#10, ^a_node))) ==> F#avl_keys(_dryad_S2#13, $phys_ptr_cast(new_right#10, ^a_node)) == F#avl_keys(_dryad_S3#14, $phys_ptr_cast(new_right#10, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(new_right#10)))), ==(old(_dryad_S2#13, avl_max_key(new_right#10)), old(_dryad_S3#14, avl_max_key(new_right#10)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(new_right#10, ^a_node))) ==> F#avl_max_key(_dryad_S2#13, $phys_ptr_cast(new_right#10, ^a_node)) == F#avl_max_key(_dryad_S3#14, $phys_ptr_cast(new_right#10, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(new_right#10)))), ==(old(_dryad_S2#13, avl_min_key(new_right#10)), old(_dryad_S3#14, avl_min_key(new_right#10)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(new_right#10, ^a_node))) ==> F#avl_min_key(_dryad_S2#13, $phys_ptr_cast(new_right#10, ^a_node)) == F#avl_min_key(_dryad_S3#14, $phys_ptr_cast(new_right#10, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(x1)))), ==(old(_dryad_S2#13, avl(x1)), old(_dryad_S3#14, avl(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl(_dryad_S2#13, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl(_dryad_S3#14, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(x1)))), ==(old(_dryad_S2#13, avl_reach(x1)), old(_dryad_S3#14, avl_reach(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_reach(_dryad_S2#13, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_reach(_dryad_S3#14, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(x1)))), ==(old(_dryad_S2#13, avl_height(x1)), old(_dryad_S3#14, avl_height(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_height(_dryad_S2#13, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height(_dryad_S3#14, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(x1)))), ==(old(_dryad_S2#13, avl_keys(x1)), old(_dryad_S3#14, avl_keys(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_keys(_dryad_S2#13, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_keys(_dryad_S3#14, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(x1)))), ==(old(_dryad_S2#13, avl_max_key(x1)), old(_dryad_S3#14, avl_max_key(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_max_key(_dryad_S2#13, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_max_key(_dryad_S3#14, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(x1)))), ==(old(_dryad_S2#13, avl_min_key(x1)), old(_dryad_S3#14, avl_min_key(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(SL#x1, ^a_node))) ==> F#avl_min_key(_dryad_S2#13, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_min_key(_dryad_S3#14, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(x0)))), ==(old(_dryad_S2#13, avl(x0)), old(_dryad_S3#14, avl(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl(_dryad_S2#13, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl(_dryad_S3#14, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(x0)))), ==(old(_dryad_S2#13, avl_reach(x0)), old(_dryad_S3#14, avl_reach(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_reach(_dryad_S2#13, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_reach(_dryad_S3#14, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(x0)))), ==(old(_dryad_S2#13, avl_height(x0)), old(_dryad_S3#14, avl_height(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_height(_dryad_S2#13, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height(_dryad_S3#14, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(x0)))), ==(old(_dryad_S2#13, avl_keys(x0)), old(_dryad_S3#14, avl_keys(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_keys(_dryad_S2#13, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_keys(_dryad_S3#14, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(x0)))), ==(old(_dryad_S2#13, avl_max_key(x0)), old(_dryad_S3#14, avl_max_key(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_max_key(_dryad_S2#13, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_max_key(_dryad_S3#14, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(x0)))), ==(old(_dryad_S2#13, avl_min_key(x0)), old(_dryad_S3#14, avl_min_key(x0)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(SL#x0, ^a_node))) ==> F#avl_min_key(_dryad_S2#13, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_min_key(_dryad_S3#14, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(right)))), ==(old(_dryad_S2#13, avl(right)), old(_dryad_S3#14, avl(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl(_dryad_S2#13, $phys_ptr_cast(L#right, ^a_node)) == F#avl(_dryad_S3#14, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(right)))), ==(old(_dryad_S2#13, avl_reach(right)), old(_dryad_S3#14, avl_reach(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_reach(_dryad_S2#13, $phys_ptr_cast(L#right, ^a_node)) == F#avl_reach(_dryad_S3#14, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(right)))), ==(old(_dryad_S2#13, avl_height(right)), old(_dryad_S3#14, avl_height(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_height(_dryad_S2#13, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height(_dryad_S3#14, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(right)))), ==(old(_dryad_S2#13, avl_keys(right)), old(_dryad_S3#14, avl_keys(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_keys(_dryad_S2#13, $phys_ptr_cast(L#right, ^a_node)) == F#avl_keys(_dryad_S3#14, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(right)))), ==(old(_dryad_S2#13, avl_max_key(right)), old(_dryad_S3#14, avl_max_key(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_max_key(_dryad_S2#13, $phys_ptr_cast(L#right, ^a_node)) == F#avl_max_key(_dryad_S3#14, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(right)))), ==(old(_dryad_S2#13, avl_min_key(right)), old(_dryad_S3#14, avl_min_key(right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(L#right, ^a_node))) ==> F#avl_min_key(_dryad_S2#13, $phys_ptr_cast(L#right, ^a_node)) == F#avl_min_key(_dryad_S3#14, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(left)))), ==(old(_dryad_S2#13, avl(left)), old(_dryad_S3#14, avl(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl(_dryad_S2#13, $phys_ptr_cast(L#left, ^a_node)) == F#avl(_dryad_S3#14, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(left)))), ==(old(_dryad_S2#13, avl_reach(left)), old(_dryad_S3#14, avl_reach(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_reach(_dryad_S2#13, $phys_ptr_cast(L#left, ^a_node)) == F#avl_reach(_dryad_S3#14, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(left)))), ==(old(_dryad_S2#13, avl_height(left)), old(_dryad_S3#14, avl_height(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_height(_dryad_S2#13, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height(_dryad_S3#14, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(left)))), ==(old(_dryad_S2#13, avl_keys(left)), old(_dryad_S3#14, avl_keys(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_keys(_dryad_S2#13, $phys_ptr_cast(L#left, ^a_node)) == F#avl_keys(_dryad_S3#14, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(left)))), ==(old(_dryad_S2#13, avl_max_key(left)), old(_dryad_S3#14, avl_max_key(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_max_key(_dryad_S2#13, $phys_ptr_cast(L#left, ^a_node)) == F#avl_max_key(_dryad_S3#14, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#13, avl_reach(left)))), ==(old(_dryad_S2#13, avl_min_key(left)), old(_dryad_S3#14, avl_min_key(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^a_node), F#avl_reach(_dryad_S2#13, $phys_ptr_cast(L#left, ^a_node))) ==> F#avl_min_key(_dryad_S2#13, $phys_ptr_cast(L#left, ^a_node)) == F#avl_min_key(_dryad_S3#14, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, new_right#10)), @_vcc_ptr_eq_pure(*((new_right#10->left)), old(_dryad_S2#13, *((new_right#10->left))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(new_right#10, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#13, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, new_right#10)), @_vcc_ptr_eq_pure(*((new_right#10->right)), old(_dryad_S2#13, *((new_right#10->right))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(new_right#10, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#13, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, new_right#10)), ==(*((new_right#10->key)), old(_dryad_S2#13, *((new_right#10->key))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(new_right#10, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)) == $rd_inv(_dryad_S2#13, a_node.key, $phys_ptr_cast(new_right#10, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, new_right#10)), ==(*((new_right#10->height)), old(_dryad_S2#13, *((new_right#10->height))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(new_right#10, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(new_right#10, ^a_node)) == $rd_inv(_dryad_S2#13, a_node.height, $phys_ptr_cast(new_right#10, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), @_vcc_ptr_eq_pure(*((x1->left)), old(_dryad_S2#13, *((x1->left))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#13, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), @_vcc_ptr_eq_pure(*((x1->right)), old(_dryad_S2#13, *((x1->right))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#13, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), ==(*((x1->key)), old(_dryad_S2#13, *((x1->key))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(_dryad_S2#13, a_node.key, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), ==(*((x1->height)), old(_dryad_S2#13, *((x1->height))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x1, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == $rd_inv(_dryad_S2#13, a_node.height, $phys_ptr_cast(SL#x1, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), @_vcc_ptr_eq_pure(*((x0->left)), old(_dryad_S2#13, *((x0->left))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#13, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), @_vcc_ptr_eq_pure(*((x0->right)), old(_dryad_S2#13, *((x0->right))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#13, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), ==(*((x0->key)), old(_dryad_S2#13, *((x0->key))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(_dryad_S2#13, a_node.key, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), ==(*((x0->height)), old(_dryad_S2#13, *((x0->height))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(SL#x0, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == $rd_inv(_dryad_S2#13, a_node.height, $phys_ptr_cast(SL#x0, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right)), @_vcc_ptr_eq_pure(*((right->left)), old(_dryad_S2#13, *((right->left))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#right, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#13, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right)), @_vcc_ptr_eq_pure(*((right->right)), old(_dryad_S2#13, *((right->right))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#right, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#13, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right)), ==(*((right->key)), old(_dryad_S2#13, *((right->key))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#right, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) == $rd_inv(_dryad_S2#13, a_node.key, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right)), ==(*((right->height)), old(_dryad_S2#13, *((right->height))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#right, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == $rd_inv(_dryad_S2#13, a_node.height, $phys_ptr_cast(L#right, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, left)), @_vcc_ptr_eq_pure(*((left->left)), old(_dryad_S2#13, *((left->left))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#left, ^a_node)) ==> $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#13, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, left)), @_vcc_ptr_eq_pure(*((left->right)), old(_dryad_S2#13, *((left->right))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#left, ^a_node)) ==> $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node) == $rd_phys_ptr(_dryad_S2#13, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, left)), ==(*((left->key)), old(_dryad_S2#13, *((left->key))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#left, ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) == $rd_inv(_dryad_S2#13, a_node.key, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, left)), ==(*((left->height)), old(_dryad_S2#13, *((left->height))))); 
                assume !($phys_ptr_cast(P#x, ^a_node) == $phys_ptr_cast(L#left, ^a_node)) ==> $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == $rd_inv(_dryad_S2#13, a_node.height, $phys_ptr_cast(L#left, ^a_node));
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), ==(avl(new_right#10), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((new_right#10->left))), avl(*((new_right#10->right)))), unchecked!(@_vcc_oset_in(new_right#10, @_vcc_oset_union(avl_reach(*((new_right#10->left))), avl_reach(*((new_right#10->right))))))), unchecked!(@_vcc_intset_in(*((new_right#10->key)), @_vcc_intset_union(avl_keys(*((new_right#10->left))), avl_keys(*((new_right#10->right))))))), @_vcc_oset_disjoint(avl_reach(*((new_right#10->left))), avl_reach(*((new_right#10->right))))), @_vcc_intset_disjoint(avl_keys(*((new_right#10->left))), avl_keys(*((new_right#10->right))))), ==>(@_vcc_ptr_neq_null(*((new_right#10->left))), <(avl_max_key(*((new_right#10->left))), *((new_right#10->key))))), ==>(@_vcc_ptr_neq_null(*((new_right#10->right))), <(*((new_right#10->key)), avl_min_key(*((new_right#10->right)))))), ||(||(&&(==(avl_height(*((new_right#10->left))), avl_height(*((new_right#10->right)))), ==(*((new_right#10->height)), +(avl_height(*((new_right#10->left))), 1))), &&(==(avl_height(*((new_right#10->left))), +(avl_height(*((new_right#10->right))), 1)), ==(*((new_right#10->height)), +(avl_height(*((new_right#10->left))), 1)))), &&(==(avl_height(*((new_right#10->right))), +(avl_height(*((new_right#10->left))), 1)), ==(*((new_right#10->height)), +(avl_height(*((new_right#10->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> F#avl($s, $phys_ptr_cast(new_right#10, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(new_right#10, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(new_right#10, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(new_right#10, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(new_right#10, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), ==(avl_reach(new_right#10), @_vcc_oset_union_one1(new_right#10, @_vcc_oset_union(avl_reach(*((new_right#10->left))), avl_reach(*((new_right#10->right))))))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(new_right#10, ^a_node)) == $oset_union_one1($phys_ptr_cast(new_right#10, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), ==(avl_height(new_right#10), @ite(>(avl_height(*((new_right#10->left))), avl_height(*((new_right#10->right)))), +(avl_height(*((new_right#10->left))), 1), +(avl_height(*((new_right#10->right))), 1)))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(new_right#10, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), ==(avl_keys(new_right#10), @_vcc_intset_union(@_vcc_intset_singleton(*((new_right#10->key))), @_vcc_intset_union(avl_keys(*((new_right#10->left))), avl_keys(*((new_right#10->right))))))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(new_right#10, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right#10->left))), @_vcc_ptr_neq_null(*((new_right#10->right)))), ==(avl_max_key(new_right#10), @\int_max(*((new_right#10->key)), @\int_max(avl_max_key(*((new_right#10->left))), avl_max_key(*((new_right#10->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right#10->left))), @_vcc_ptr_eq_null(*((new_right#10->right)))), ==(avl_max_key(new_right#10), @\int_max(*((new_right#10->key)), avl_max_key(*((new_right#10->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right#10->left))), @_vcc_ptr_neq_null(*((new_right#10->right)))), ==(avl_max_key(new_right#10), @\int_max(*((new_right#10->key)), avl_max_key(*((new_right#10->right)))))))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right#10->left))), @_vcc_ptr_neq_null(*((new_right#10->right)))), ==(avl_min_key(new_right#10), @\int_min(*((new_right#10->key)), @\int_min(avl_min_key(*((new_right#10->left))), avl_min_key(*((new_right#10->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right#10->left))), @_vcc_ptr_eq_null(*((new_right#10->right)))), ==(avl_min_key(new_right#10), @\int_min(*((new_right#10->key)), avl_min_key(*((new_right#10->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right#10->left))), @_vcc_ptr_neq_null(*((new_right#10->right)))), ==(avl_min_key(new_right#10), @\int_min(*((new_right#10->key)), avl_min_key(*((new_right#10->right)))))))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl(x1), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x1->left))), avl(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))), @_vcc_oset_disjoint(avl_reach(*((x1->left))), avl_reach(*((x1->right))))), @_vcc_intset_disjoint(avl_keys(*((x1->left))), avl_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(avl_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), avl_min_key(*((x1->right)))))), ||(||(&&(==(avl_height(*((x1->left))), avl_height(*((x1->right)))), ==(*((x1->height)), +(avl_height(*((x1->left))), 1))), &&(==(avl_height(*((x1->left))), +(avl_height(*((x1->right))), 1)), ==(*((x1->height)), +(avl_height(*((x1->left))), 1)))), &&(==(avl_height(*((x1->right))), +(avl_height(*((x1->left))), 1)), ==(*((x1->height)), +(avl_height(*((x1->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x1, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x1, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_reach(x1), @_vcc_oset_union_one1(x1, @_vcc_oset_union(avl_reach(*((x1->left))), avl_reach(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x1, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x1, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_height(x1), @ite(>(avl_height(*((x1->left))), avl_height(*((x1->right)))), +(avl_height(*((x1->left))), 1), +(avl_height(*((x1->right))), 1)))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x1, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(avl_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(avl_keys(*((x1->left))), avl_keys(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x1, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), @\int_max(avl_max_key(*((x1->left))), avl_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_max_key(x1), @\int_max(*((x1->key)), avl_max_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), @\int_min(avl_min_key(*((x1->left))), avl_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(avl_min_key(x1), @\int_min(*((x1->key)), avl_min_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x1, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x1, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x1, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl(x0), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x0->left))), avl(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))), @_vcc_oset_disjoint(avl_reach(*((x0->left))), avl_reach(*((x0->right))))), @_vcc_intset_disjoint(avl_keys(*((x0->left))), avl_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(avl_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), avl_min_key(*((x0->right)))))), ||(||(&&(==(avl_height(*((x0->left))), avl_height(*((x0->right)))), ==(*((x0->height)), +(avl_height(*((x0->left))), 1))), &&(==(avl_height(*((x0->left))), +(avl_height(*((x0->right))), 1)), ==(*((x0->height)), +(avl_height(*((x0->left))), 1)))), &&(==(avl_height(*((x0->right))), +(avl_height(*((x0->left))), 1)), ==(*((x0->height)), +(avl_height(*((x0->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl($s, $phys_ptr_cast(SL#x0, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(SL#x0, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_reach(x0), @_vcc_oset_union_one1(x0, @_vcc_oset_union(avl_reach(*((x0->left))), avl_reach(*((x0->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(SL#x0, ^a_node)) == $oset_union_one1($phys_ptr_cast(SL#x0, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_height(x0), @ite(>(avl_height(*((x0->left))), avl_height(*((x0->right)))), +(avl_height(*((x0->left))), 1), +(avl_height(*((x0->right))), 1)))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(SL#x0, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x0), ==(avl_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(avl_keys(*((x0->left))), avl_keys(*((x0->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(SL#x0, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), @\int_max(avl_max_key(*((x0->left))), avl_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_max_key(x0), @\int_max(*((x0->key)), avl_max_key(*((x0->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), @\int_min(avl_min_key(*((x0->left))), avl_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(avl_min_key(x0), @\int_min(*((x0->key)), avl_min_key(*((x0->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x0, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(SL#x0, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(SL#x0, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(SL#x0, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl(right), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((right->left))), avl(*((right->right)))), unchecked!(@_vcc_oset_in(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))), unchecked!(@_vcc_intset_in(*((right->key)), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))), @_vcc_oset_disjoint(avl_reach(*((right->left))), avl_reach(*((right->right))))), @_vcc_intset_disjoint(avl_keys(*((right->left))), avl_keys(*((right->right))))), ==>(@_vcc_ptr_neq_null(*((right->left))), <(avl_max_key(*((right->left))), *((right->key))))), ==>(@_vcc_ptr_neq_null(*((right->right))), <(*((right->key)), avl_min_key(*((right->right)))))), ||(||(&&(==(avl_height(*((right->left))), avl_height(*((right->right)))), ==(*((right->height)), +(avl_height(*((right->left))), 1))), &&(==(avl_height(*((right->left))), +(avl_height(*((right->right))), 1)), ==(*((right->height)), +(avl_height(*((right->left))), 1)))), &&(==(avl_height(*((right->right))), +(avl_height(*((right->left))), 1)), ==(*((right->height)), +(avl_height(*((right->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#right, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#right, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_reach(right), @_vcc_oset_union_one1(right, @_vcc_oset_union(avl_reach(*((right->left))), avl_reach(*((right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#right, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#right, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_height(right), @ite(>(avl_height(*((right->left))), avl_height(*((right->right)))), +(avl_height(*((right->left))), 1), +(avl_height(*((right->right))), 1)))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#right, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(right), ==(avl_keys(right), @_vcc_intset_union(@_vcc_intset_singleton(*((right->key))), @_vcc_intset_union(avl_keys(*((right->left))), avl_keys(*((right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#right, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), @\int_max(avl_max_key(*((right->left))), avl_max_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_max_key(right), @\int_max(*((right->key)), avl_max_key(*((right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), @\int_min(avl_min_key(*((right->left))), avl_min_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(avl_min_key(right), @\int_min(*((right->key)), avl_min_key(*((right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#right, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#right, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#right, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#right, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl(left), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((left->left))), avl(*((left->right)))), unchecked!(@_vcc_oset_in(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))), unchecked!(@_vcc_intset_in(*((left->key)), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))), @_vcc_oset_disjoint(avl_reach(*((left->left))), avl_reach(*((left->right))))), @_vcc_intset_disjoint(avl_keys(*((left->left))), avl_keys(*((left->right))))), ==>(@_vcc_ptr_neq_null(*((left->left))), <(avl_max_key(*((left->left))), *((left->key))))), ==>(@_vcc_ptr_neq_null(*((left->right))), <(*((left->key)), avl_min_key(*((left->right)))))), ||(||(&&(==(avl_height(*((left->left))), avl_height(*((left->right)))), ==(*((left->height)), +(avl_height(*((left->left))), 1))), &&(==(avl_height(*((left->left))), +(avl_height(*((left->right))), 1)), ==(*((left->height)), +(avl_height(*((left->left))), 1)))), &&(==(avl_height(*((left->right))), +(avl_height(*((left->left))), 1)), ==(*((left->height)), +(avl_height(*((left->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl($s, $phys_ptr_cast(L#left, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(L#left, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_reach(left), @_vcc_oset_union_one1(left, @_vcc_oset_union(avl_reach(*((left->left))), avl_reach(*((left->right))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(L#left, ^a_node)) == $oset_union_one1($phys_ptr_cast(L#left, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_height(left), @ite(>(avl_height(*((left->left))), avl_height(*((left->right)))), +(avl_height(*((left->left))), 1), +(avl_height(*((left->right))), 1)))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(L#left, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(left), ==(avl_keys(left), @_vcc_intset_union(@_vcc_intset_singleton(*((left->key))), @_vcc_intset_union(avl_keys(*((left->left))), avl_keys(*((left->right))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(L#left, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), @\int_max(avl_max_key(*((left->left))), avl_max_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_max_key(left), @\int_max(*((left->key)), avl_max_key(*((left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), @\int_min(avl_min_key(*((left->left))), avl_min_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(avl_min_key(left), @\int_min(*((left->key)), avl_min_key(*((left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(L#left, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(L#left, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(L#left, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(L#left, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl(x), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((x->left))), avl(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))), @_vcc_oset_disjoint(avl_reach(*((x->left))), avl_reach(*((x->right))))), @_vcc_intset_disjoint(avl_keys(*((x->left))), avl_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(avl_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), avl_min_key(*((x->right)))))), ||(||(&&(==(avl_height(*((x->left))), avl_height(*((x->right)))), ==(*((x->height)), +(avl_height(*((x->left))), 1))), &&(==(avl_height(*((x->left))), +(avl_height(*((x->right))), 1)), ==(*((x->height)), +(avl_height(*((x->left))), 1)))), &&(==(avl_height(*((x->right))), +(avl_height(*((x->left))), 1)), ==(*((x->height)), +(avl_height(*((x->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl($s, $phys_ptr_cast(P#x, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(P#x, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_reach(x), @_vcc_oset_union_one1(x, @_vcc_oset_union(avl_reach(*((x->left))), avl_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(P#x, ^a_node)) == $oset_union_one1($phys_ptr_cast(P#x, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_height(x), @ite(>(avl_height(*((x->left))), avl_height(*((x->right)))), +(avl_height(*((x->left))), 1), +(avl_height(*((x->right))), 1)))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(P#x, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(x), ==(avl_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(avl_keys(*((x->left))), avl_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(P#x, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), @\int_max(avl_max_key(*((x->left))), avl_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_max_key(x), @\int_max(*((x->key)), avl_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), @\int_min(avl_min_key(*((x->left))), avl_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(avl_min_key(x), @\int_min(*((x->key)), avl_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(P#x, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(P#x, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(P#x, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(P#x, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), ==(avl(new_right#10), &&(&&(&&(&&(&&(&&(&&(&&(avl(*((new_right#10->left))), avl(*((new_right#10->right)))), unchecked!(@_vcc_oset_in(new_right#10, @_vcc_oset_union(avl_reach(*((new_right#10->left))), avl_reach(*((new_right#10->right))))))), unchecked!(@_vcc_intset_in(*((new_right#10->key)), @_vcc_intset_union(avl_keys(*((new_right#10->left))), avl_keys(*((new_right#10->right))))))), @_vcc_oset_disjoint(avl_reach(*((new_right#10->left))), avl_reach(*((new_right#10->right))))), @_vcc_intset_disjoint(avl_keys(*((new_right#10->left))), avl_keys(*((new_right#10->right))))), ==>(@_vcc_ptr_neq_null(*((new_right#10->left))), <(avl_max_key(*((new_right#10->left))), *((new_right#10->key))))), ==>(@_vcc_ptr_neq_null(*((new_right#10->right))), <(*((new_right#10->key)), avl_min_key(*((new_right#10->right)))))), ||(||(&&(==(avl_height(*((new_right#10->left))), avl_height(*((new_right#10->right)))), ==(*((new_right#10->height)), +(avl_height(*((new_right#10->left))), 1))), &&(==(avl_height(*((new_right#10->left))), +(avl_height(*((new_right#10->right))), 1)), ==(*((new_right#10->height)), +(avl_height(*((new_right#10->left))), 1)))), &&(==(avl_height(*((new_right#10->right))), +(avl_height(*((new_right#10->left))), 1)), ==(*((new_right#10->height)), +(avl_height(*((new_right#10->right))), 1))))))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> F#avl($s, $phys_ptr_cast(new_right#10, ^a_node)) == (F#avl($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && F#avl($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && !$oset_in($phys_ptr_cast(new_right#10, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)))) && !$intset_in($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)))) && $oset_disjoint(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))) && $intset_disjoint(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) < $rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node))) && ($non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> $rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)) < F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))) && ((F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $rd_inv($s, a_node.height, $phys_ptr_cast(new_right#10, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(new_right#10, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1) || (F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1 && $rd_inv($s, a_node.height, $phys_ptr_cast(new_right#10, ^a_node)) == F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1)));
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), ==(avl_reach(new_right#10), @_vcc_oset_union_one1(new_right#10, @_vcc_oset_union(avl_reach(*((new_right#10->left))), avl_reach(*((new_right#10->right))))))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> F#avl_reach($s, $phys_ptr_cast(new_right#10, ^a_node)) == $oset_union_one1($phys_ptr_cast(new_right#10, ^a_node), $oset_union(F#avl_reach($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_reach($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), ==(avl_height(new_right#10), @ite(>(avl_height(*((new_right#10->left))), avl_height(*((new_right#10->right)))), +(avl_height(*((new_right#10->left))), 1), +(avl_height(*((new_right#10->right))), 1)))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> F#avl_height($s, $phys_ptr_cast(new_right#10, ^a_node)) == (if F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) > F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) then F#avl_height($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1 else F#avl_height($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) + 1);
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), ==(avl_keys(new_right#10), @_vcc_intset_union(@_vcc_intset_singleton(*((new_right#10->key))), @_vcc_intset_union(avl_keys(*((new_right#10->left))), avl_keys(*((new_right#10->right))))))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> F#avl_keys($s, $phys_ptr_cast(new_right#10, ^a_node)) == $intset_union($intset_singleton($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node))), $intset_union(F#avl_keys($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_keys($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right#10->left))), @_vcc_ptr_neq_null(*((new_right#10->right)))), ==(avl_max_key(new_right#10), @\int_max(*((new_right#10->key)), @\int_max(avl_max_key(*((new_right#10->left))), avl_max_key(*((new_right#10->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right#10->left))), @_vcc_ptr_eq_null(*((new_right#10->right)))), ==(avl_max_key(new_right#10), @\int_max(*((new_right#10->key)), avl_max_key(*((new_right#10->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right#10->left))), @_vcc_ptr_neq_null(*((new_right#10->right)))), ==(avl_max_key(new_right#10), @\int_max(*((new_right#10->key)), avl_max_key(*((new_right#10->right)))))))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), $int_max(F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_max_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_max($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), F#avl_max_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))));
                // assume ==>(@_vcc_ptr_neq_null(new_right#10), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((new_right#10->left))), @_vcc_ptr_neq_null(*((new_right#10->right)))), ==(avl_min_key(new_right#10), @\int_min(*((new_right#10->key)), @\int_min(avl_min_key(*((new_right#10->left))), avl_min_key(*((new_right#10->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((new_right#10->left))), @_vcc_ptr_eq_null(*((new_right#10->right)))), ==(avl_min_key(new_right#10), @\int_min(*((new_right#10->key)), avl_min_key(*((new_right#10->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((new_right#10->left))), @_vcc_ptr_neq_null(*((new_right#10->right)))), ==(avl_min_key(new_right#10), @\int_min(*((new_right#10->key)), avl_min_key(*((new_right#10->right)))))))); 
                assume $non_null($phys_ptr_cast(new_right#10, ^a_node)) ==> ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), $int_min(F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))))) && ($non_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $is_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)))) && ($is_null($rd_phys_ptr($s, a_node.left, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) && $non_null($rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node)) ==> F#avl_min_key($s, $phys_ptr_cast(new_right#10, ^a_node)) == $int_min($rd_inv($s, a_node.key, $phys_ptr_cast(new_right#10, ^a_node)), F#avl_min_key($s, $rd_phys_ptr($s, a_node.right, $phys_ptr_cast(new_right#10, ^a_node), ^a_node))));
                // struct a_node* res_avl_balance#7; 
                // res_avl_balance#7 := avl_balance(x); 
                call res_avl_balance#7 := avl_balance($phys_ptr_cast(P#x, ^a_node));
                assume $full_stop_ext(#tok$3^138.11, $s);
                // return res_avl_balance#7; 
                $result := $phys_ptr_cast(res_avl_balance#7, ^a_node);
                assume true;
                assert $position_marker();
                goto #exit;
            }
        }
    }

  anon14:
    // skip

  #exit:
// INV:LOOPTAIL
}



axiom (forall Q#__vcc_state$2^206.9#tc3#1404: $state, Q#x$2^206.9#dt1#1315: $ptr, Q#i$2^206.9#tc1#1316: int :: {:weight 10} { $intset_in(Q#i$2^206.9#tc1#1316, F#avl_keys(Q#__vcc_state$2^206.9#tc3#1404, $phys_ptr_cast(Q#x$2^206.9#dt1#1315, ^a_node))) } $good_state(Q#__vcc_state$2^206.9#tc3#1404) && $in_range_i4(Q#i$2^206.9#tc1#1316) ==> Q#i$2^206.9#tc1#1316 < F#avl_min_key(Q#__vcc_state$2^206.9#tc3#1404, $phys_ptr_cast(Q#x$2^206.9#dt1#1315, ^a_node)) ==> !$intset_in(Q#i$2^206.9#tc1#1316, F#avl_keys(Q#__vcc_state$2^206.9#tc3#1404, $phys_ptr_cast(Q#x$2^206.9#dt1#1315, ^a_node))));

axiom (forall Q#__vcc_state$2^207.9#tc3#1405: $state, Q#x$2^207.9#dt1#1317: $ptr, Q#i$2^207.9#tc1#1318: int :: {:weight 10} { $intset_in(Q#i$2^207.9#tc1#1318, F#avl_keys(Q#__vcc_state$2^207.9#tc3#1405, $phys_ptr_cast(Q#x$2^207.9#dt1#1317, ^a_node))) } $good_state(Q#__vcc_state$2^207.9#tc3#1405) && $in_range_i4(Q#i$2^207.9#tc1#1318) ==> Q#i$2^207.9#tc1#1318 > F#avl_max_key(Q#__vcc_state$2^207.9#tc3#1405, $phys_ptr_cast(Q#x$2^207.9#dt1#1317, ^a_node)) ==> !$intset_in(Q#i$2^207.9#tc1#1318, F#avl_keys(Q#__vcc_state$2^207.9#tc3#1405, $phys_ptr_cast(Q#x$2^207.9#dt1#1317, ^a_node))));

const unique l#public: $label;

axiom $type_code_is(3, ^$#state_t);

axiom $type_code_is(1, ^^i4);

const unique #tok$3^138.11: $token;

const unique #tok$3^136.4: $token;

const unique #tok$3^134.26: $token;

const unique #tok$3^130.11: $token;

const unique #tok$3^128.4: $token;

const unique #tok$3^126.25: $token;

const unique #tok$3^123.12: $token;

const unique #tok$3^121.5: $token;

const unique #tok$3^119.5: $token;

const unique #tok$3^117.27: $token;

const unique #tok$3^115.16: $token;

const unique #tok$3^112.5: $token;

const unique #tok$3^109.5: $token;

const unique #tok$3^106.5: $token;

const unique #tok$4^0.0: $token;

const unique #file^?3Cno?20file?3E: $token;

axiom $file_name_is(4, #file^?3Cno?20file?3E);

const unique #tok$3^79.3: $token;

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cavl?5Cavl?2Ddelete?2Drec.c: $token;

axiom $file_name_is(3, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cavl?5Cavl?2Ddelete?2Drec.c);

const unique #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cavl?5Cdryad_avl.h: $token;

axiom $file_name_is(2, #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cavl?5Cdryad_avl.h);

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h: $token;

axiom $file_name_is(1, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h);

const unique #distTp1: $ctype;

axiom #distTp1 == $ptr_to(^a_node);
