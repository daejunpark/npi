
const {:existential true} b0000 : bool;
const {:existential true} b0001 : bool;
const {:existential true} b0002 : bool;
const {:existential true} b0003 : bool;
const {:existential true} b0004 : bool;
const {:existential true} b0005 : bool;
const {:existential true} b0006 : bool;
const {:existential true} b0007 : bool;
const {:existential true} b0008 : bool;
const {:existential true} b0009 : bool;
const {:existential true} b0010 : bool;
const {:existential true} b0011 : bool;
const {:existential true} b0012 : bool;
const {:existential true} b0013 : bool;
const {:existential true} b0014 : bool;
const {:existential true} b0015 : bool;
const {:existential true} b0016 : bool;
const {:existential true} b0017 : bool;
const {:existential true} b0018 : bool;
const {:existential true} b0019 : bool;
const {:existential true} b0020 : bool;
const {:existential true} b0021 : bool;
const {:existential true} b0022 : bool;
const {:existential true} b0023 : bool;
const {:existential true} b0024 : bool;
const {:existential true} b0025 : bool;
const {:existential true} b0026 : bool;
const {:existential true} b0027 : bool;
const {:existential true} b0028 : bool;
const {:existential true} b0029 : bool;
const {:existential true} b0030 : bool;
const {:existential true} b0031 : bool;
const {:existential true} b0032 : bool;
const {:existential true} b0033 : bool;
const {:existential true} b0034 : bool;
const {:existential true} b0035 : bool;
const {:existential true} b0036 : bool;
const {:existential true} b0037 : bool;
const {:existential true} b0038 : bool;
const {:existential true} b0039 : bool;
const {:existential true} b0040 : bool;
const {:existential true} b0041 : bool;
const {:existential true} b0042 : bool;
const {:existential true} b0043 : bool;
const {:existential true} b0044 : bool;
const {:existential true} b0045 : bool;
const {:existential true} b0046 : bool;
const {:existential true} b0047 : bool;
const {:existential true} b0048 : bool;
const {:existential true} b0049 : bool;
const {:existential true} b0050 : bool;
const {:existential true} b0051 : bool;
const {:existential true} b0052 : bool;
const {:existential true} b0053 : bool;
const {:existential true} b0054 : bool;
const {:existential true} b0055 : bool;
const {:existential true} b0056 : bool;
const {:existential true} b0057 : bool;
const {:existential true} b0058 : bool;
const {:existential true} b0059 : bool;
const {:existential true} b0060 : bool;
const {:existential true} b0061 : bool;
const {:existential true} b0062 : bool;
const {:existential true} b0063 : bool;
const {:existential true} b0064 : bool;
const {:existential true} b0065 : bool;
const {:existential true} b0066 : bool;
const {:existential true} b0067 : bool;

axiom $arch_ptr_size == 8;

axiom $arch_spec_ptr_start == $max.u8;

const unique ^$##thread_id: $ctype;

axiom $def_math_type(^$##thread_id);

type $##thread_id;

const unique ^$##club: $ctype;

axiom $def_math_type(^$##club);

type $##club;

const unique ^b_node: $ctype;

axiom $is_span_sequential(^b_node);

axiom $def_struct_type(^b_node, 24, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^b_node) } $inv2(#s1, #s2, #p, ^b_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^b_node) } $inv2_without_lemmas(#s1, #s2, #p, ^b_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^b_node)) } $in(q, $composite_extent(s, p, ^b_node)) == (q == p));

const unique b_node.left: $field;

axiom $def_phys_field(^b_node, b_node.left, $ptr_to(^b_node), false, 0);

const unique b_node.right: $field;

axiom $def_phys_field(^b_node, b_node.right, $ptr_to(^b_node), false, 8);

const unique b_node.key: $field;

axiom $def_phys_field(^b_node, b_node.key, ^^i4, false, 16);

function F#glob_reach() : $oset;

const unique cf#glob_reach: $pure_function;

axiom $function_arg_type(cf#glob_reach, 0, ^$#oset);

procedure glob_reach() returns ($result: $oset);
  free ensures $result == F#glob_reach();
  free ensures $call_transition(old($s), $s);



const unique ^$#_purecall_handler#1: $ctype;

axiom $def_fnptr_type(^$#_purecall_handler#1);

type $#_purecall_handler#1;

const unique ^$#_invalid_parameter_handler#2: $ctype;

axiom $def_fnptr_type(^$#_invalid_parameter_handler#2);

type $#_invalid_parameter_handler#2;

const unique ^$#bst_insert_rec.c..36261#3: $ctype;

axiom $def_fnptr_type(^$#bst_insert_rec.c..36261#3);

type $#bst_insert_rec.c..36261#3;

const unique ^$#_PtFuncCompare#4: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#4);

type $#_PtFuncCompare#4;

const unique ^$#_PtFuncCompare#5: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#5);

type $#_PtFuncCompare#5;

const unique ^$#_PtFuncCompare#6: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#6);

type $#_PtFuncCompare#6;

const unique ^$#_PtFuncCompare#7: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#7);

type $#_PtFuncCompare#7;

const unique ^$#_onexit_t#8: $ctype;

axiom $def_fnptr_type(^$#_onexit_t#8);

type $#_onexit_t#8;

function F##int_max(SP#x: int, SP#y: int) : int;

const unique cf##int_max: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_max(SP#x, SP#y) } $in_range_i4(F##int_max(SP#x, SP#y)));

axiom $function_arg_type(cf##int_max, 0, ^^i4);

axiom $function_arg_type(cf##int_max, 1, ^^i4);

axiom $function_arg_type(cf##int_max, 2, ^^i4);

procedure #int_max(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_max(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F##int_min(SP#x: int, SP#y: int) : int;

const unique cf##int_min: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_min(SP#x, SP#y) } $in_range_i4(F##int_min(SP#x, SP#y)));

axiom $function_arg_type(cf##int_min, 0, ^^i4);

axiom $function_arg_type(cf##int_min, 1, ^^i4);

axiom $function_arg_type(cf##int_min, 2, ^^i4);

procedure #int_min(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_min(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F#bst(#s: $state, SP#root: $ptr) : bool;

const unique cf#bst: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#bst(#s, SP#root) } 1 < $decreases_level ==> $is_null($phys_ptr_cast(SP#root, ^b_node)) ==> F#bst(#s, SP#root));

axiom $function_arg_type(cf#bst, 0, ^^bool);

axiom $function_arg_type(cf#bst, 1, $ptr_to(^b_node));

procedure bst(SP#root: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#root, ^b_node)) ==> $result;
  free ensures $result == F#bst($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#bst_reach(#s: $state, SP#root: $ptr) : $oset;

const unique cf#bst_reach: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#bst_reach(#s, SP#root) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#root, ^b_node)) ==> $oset_in($phys_ptr_cast(SP#root, ^b_node), F#bst_reach(#s, SP#root))) && ($is_null($phys_ptr_cast(SP#root, ^b_node)) ==> F#bst_reach(#s, SP#root) == $oset_empty()));

axiom $function_arg_type(cf#bst_reach, 0, ^$#oset);

axiom $function_arg_type(cf#bst_reach, 1, $ptr_to(^b_node));

procedure bst_reach(SP#root: $ptr) returns ($result: $oset);
  ensures $non_null($phys_ptr_cast(SP#root, ^b_node)) ==> $oset_in($phys_ptr_cast(SP#root, ^b_node), $result);
  ensures $is_null($phys_ptr_cast(SP#root, ^b_node)) ==> $result == $oset_empty();
  free ensures $result == F#bst_reach($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#bst_keys(#s: $state, SP#root: $ptr) : $intset;

const unique cf#bst_keys: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#bst_keys(#s, SP#root) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#root, ^b_node)) ==> $intset_in($rd_inv(#s, b_node.key, $phys_ptr_cast(SP#root, ^b_node)), F#bst_keys(#s, SP#root))) && ($is_null($phys_ptr_cast(SP#root, ^b_node)) ==> F#bst_keys(#s, SP#root) == $intset_empty()));

axiom $function_arg_type(cf#bst_keys, 0, ^$#intset);

axiom $function_arg_type(cf#bst_keys, 1, $ptr_to(^b_node));

procedure bst_keys(SP#root: $ptr) returns ($result: $intset);
  ensures $non_null($phys_ptr_cast(SP#root, ^b_node)) ==> $intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(SP#root, ^b_node)), $result);
  ensures $is_null($phys_ptr_cast(SP#root, ^b_node)) ==> $result == $intset_empty();
  free ensures $result == F#bst_keys($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#bst_min_key(#s: $state, SP#root: $ptr) : int;

const unique cf#bst_min_key: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#bst_min_key(#s, SP#root) } 1 < $decreases_level ==> $in_range_i4(F#bst_min_key(#s, SP#root)) && ($non_null($phys_ptr_cast(SP#root, ^b_node)) && $is_null($rd_phys_ptr(#s, b_node.left, $phys_ptr_cast(SP#root, ^b_node), ^b_node)) && $is_null($rd_phys_ptr(#s, b_node.right, $phys_ptr_cast(SP#root, ^b_node), ^b_node)) ==> F#bst_min_key(#s, SP#root) == $rd_inv(#s, b_node.key, $phys_ptr_cast(SP#root, ^b_node))));

axiom $function_arg_type(cf#bst_min_key, 0, ^^i4);

axiom $function_arg_type(cf#bst_min_key, 1, $ptr_to(^b_node));

procedure bst_min_key(SP#root: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#root, ^b_node)) && $is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SP#root, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SP#root, ^b_node), ^b_node)) ==> $result == $rd_inv($s, b_node.key, $phys_ptr_cast(SP#root, ^b_node));
  free ensures $result == F#bst_min_key($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#bst_max_key(#s: $state, SP#root: $ptr) : int;

const unique cf#bst_max_key: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#bst_max_key(#s, SP#root) } 1 < $decreases_level ==> $in_range_i4(F#bst_max_key(#s, SP#root)) && ($non_null($phys_ptr_cast(SP#root, ^b_node)) && $is_null($rd_phys_ptr(#s, b_node.left, $phys_ptr_cast(SP#root, ^b_node), ^b_node)) && $is_null($rd_phys_ptr(#s, b_node.right, $phys_ptr_cast(SP#root, ^b_node), ^b_node)) ==> F#bst_max_key(#s, SP#root) == $rd_inv(#s, b_node.key, $phys_ptr_cast(SP#root, ^b_node))));

axiom $function_arg_type(cf#bst_max_key, 0, ^^i4);

axiom $function_arg_type(cf#bst_max_key, 1, $ptr_to(^b_node));

procedure bst_max_key(SP#root: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#root, ^b_node)) && $is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SP#root, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SP#root, ^b_node), ^b_node)) ==> $result == $rd_inv($s, b_node.key, $phys_ptr_cast(SP#root, ^b_node));
  free ensures $result == F#bst_max_key($s, SP#root);
  free ensures $call_transition(old($s), $s);



procedure bst_insert_rec(P#x: $ptr, P#k: int) returns ($result: $ptr);
  requires F#bst($s, $phys_ptr_cast(P#x, ^b_node));
  requires !$intset_in(P#k, F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)));
  modifies $s, $cev_pc;
  ensures F#bst($s, $phys_ptr_cast($result, ^b_node));
  ensures F#bst_keys($s, $phys_ptr_cast($result, ^b_node)) == $intset_union(F#bst_keys(old($s), $phys_ptr_cast(P#x, ^b_node)), $intset_singleton(P#k));
ensures b0000 ==> (F#bst($s,$phys_ptr_cast(P#x,^b_node)));
ensures b0001 ==> (F#bst($s,$phys_ptr_cast($result,^b_node)));
ensures b0002 ==> ((F#bst_reach($s,$phys_ptr_cast(P#x,^b_node)) == F#bst_reach($s,$phys_ptr_cast($result,^b_node))));
ensures b0003 ==> ((F#bst_reach($s,$phys_ptr_cast($result,^b_node)) == F#bst_reach($s,$phys_ptr_cast(P#x,^b_node))));
ensures b0004 ==> ((F#bst_reach($s,$phys_ptr_cast(P#x,^b_node)) == F#bst_reach(old($s),$phys_ptr_cast(P#x,^b_node))));
ensures b0005 ==> ((F#bst_reach($s,$phys_ptr_cast($result,^b_node)) == F#bst_reach(old($s),$phys_ptr_cast($result,^b_node))));
ensures b0006 ==> ($non_null($phys_ptr_cast(P#x,^b_node)));
ensures b0007 ==> ($non_null($phys_ptr_cast($result,^b_node)));
ensures b0008 ==> ($is_null($phys_ptr_cast(P#x,^b_node)));
ensures b0009 ==> ($is_null($phys_ptr_cast($result,^b_node)));
ensures b0010 ==> (($phys_ptr_cast(P#x,^b_node) == $phys_ptr_cast($result,^b_node)));
ensures b0011 ==> (($phys_ptr_cast($result,^b_node) == $phys_ptr_cast(P#x,^b_node)));
ensures b0012 ==> (($non_null($phys_ptr_cast(P#x,^b_node)) ==> $non_null($rd_phys_ptr($s,b_node.left,$phys_ptr_cast(P#x,^b_node),^b_node))));
ensures b0013 ==> (($non_null($phys_ptr_cast($result,^b_node)) ==> $non_null($rd_phys_ptr($s,b_node.left,$phys_ptr_cast($result,^b_node),^b_node))));
ensures b0014 ==> (($non_null($phys_ptr_cast(P#x,^b_node)) ==> $is_null($rd_phys_ptr($s,b_node.left,$phys_ptr_cast(P#x,^b_node),^b_node))));
ensures b0015 ==> (($non_null($phys_ptr_cast($result,^b_node)) ==> $is_null($rd_phys_ptr($s,b_node.left,$phys_ptr_cast($result,^b_node),^b_node))));
ensures b0016 ==> (($non_null($phys_ptr_cast(P#x,^b_node)) ==> ($rd_phys_ptr($s,b_node.left,$phys_ptr_cast(P#x,^b_node),^b_node) == $phys_ptr_cast($result,^b_node))));
ensures b0017 ==> (($non_null($phys_ptr_cast($result,^b_node)) ==> ($rd_phys_ptr($s,b_node.left,$phys_ptr_cast($result,^b_node),^b_node) == $phys_ptr_cast(P#x,^b_node))));
ensures b0018 ==> (($non_null($phys_ptr_cast(P#x,^b_node)) ==> $non_null($rd_phys_ptr($s,b_node.right,$phys_ptr_cast(P#x,^b_node),^b_node))));
ensures b0019 ==> (($non_null($phys_ptr_cast($result,^b_node)) ==> $non_null($rd_phys_ptr($s,b_node.right,$phys_ptr_cast($result,^b_node),^b_node))));
ensures b0020 ==> (($non_null($phys_ptr_cast(P#x,^b_node)) ==> $is_null($rd_phys_ptr($s,b_node.right,$phys_ptr_cast(P#x,^b_node),^b_node))));
ensures b0021 ==> (($non_null($phys_ptr_cast($result,^b_node)) ==> $is_null($rd_phys_ptr($s,b_node.right,$phys_ptr_cast($result,^b_node),^b_node))));
ensures b0022 ==> (($non_null($phys_ptr_cast(P#x,^b_node)) ==> ($rd_phys_ptr($s,b_node.right,$phys_ptr_cast(P#x,^b_node),^b_node) == $phys_ptr_cast($result,^b_node))));
ensures b0023 ==> (($non_null($phys_ptr_cast($result,^b_node)) ==> ($rd_phys_ptr($s,b_node.right,$phys_ptr_cast($result,^b_node),^b_node) == $phys_ptr_cast(P#x,^b_node))));
ensures b0024 ==> ((F#bst_keys($s,$phys_ptr_cast(P#x,^b_node)) == F#bst_keys($s,$phys_ptr_cast($result,^b_node))));
ensures b0025 ==> ((F#bst_keys($s,$phys_ptr_cast($result,^b_node)) == F#bst_keys($s,$phys_ptr_cast(P#x,^b_node))));
ensures b0026 ==> ((F#bst_keys($s,$phys_ptr_cast(P#x,^b_node)) == F#bst_keys(old($s),$phys_ptr_cast(P#x,^b_node))));
ensures b0027 ==> ((F#bst_keys($s,$phys_ptr_cast($result,^b_node)) == F#bst_keys(old($s),$phys_ptr_cast($result,^b_node))));
ensures b0028 ==> ((F#bst_keys($s,$phys_ptr_cast(P#x,^b_node)) == $intset_union(F#bst_keys(old($s),$phys_ptr_cast(P#x,^b_node)),$intset_singleton(P#k))));
ensures b0029 ==> ((F#bst_keys($s,$phys_ptr_cast($result,^b_node)) == $intset_union(F#bst_keys(old($s),$phys_ptr_cast($result,^b_node)),$intset_singleton(P#k))));
ensures b0030 ==> ((F#bst_keys($s,$phys_ptr_cast(P#x,^b_node)) == $intset_union(F#bst_keys(old($s),$phys_ptr_cast($result,^b_node)),$intset_singleton(P#k))));
ensures b0031 ==> ((F#bst_keys($s,$phys_ptr_cast($result,^b_node)) == $intset_union(F#bst_keys(old($s),$phys_ptr_cast(P#x,^b_node)),$intset_singleton(P#k))));
ensures b0032 ==> ((F#bst_keys(old($s),$phys_ptr_cast(P#x,^b_node)) == $intset_union(F#bst_keys($s,$phys_ptr_cast(P#x,^b_node)),$intset_singleton(P#k))));
ensures b0033 ==> ((F#bst_keys(old($s),$phys_ptr_cast($result,^b_node)) == $intset_union(F#bst_keys($s,$phys_ptr_cast($result,^b_node)),$intset_singleton(P#k))));
ensures b0034 ==> ((F#bst_keys(old($s),$phys_ptr_cast(P#x,^b_node)) == $intset_union(F#bst_keys($s,$phys_ptr_cast($result,^b_node)),$intset_singleton(P#k))));
ensures b0035 ==> ((F#bst_keys(old($s),$phys_ptr_cast($result,^b_node)) == $intset_union(F#bst_keys($s,$phys_ptr_cast(P#x,^b_node)),$intset_singleton(P#k))));
ensures b0036 ==> ((P#k < 2147483647));
ensures b0037 ==> ((P#k < 2147483647));
ensures b0038 ==> ((P#k < 4294967295));
ensures b0039 ==> ((P#k < 4294967295));
ensures b0040 ==> ((P#k >= 0));
ensures b0041 ==> ((P#k >= 0));
ensures b0042 ==> (($rd_inv($s,b_node.key,$phys_ptr_cast(P#x,^b_node)) < P#k));
ensures b0043 ==> (($rd_inv($s,b_node.key,$phys_ptr_cast($result,^b_node)) < P#k));
ensures b0044 ==> (($rd_inv($s,b_node.key,$phys_ptr_cast(P#x,^b_node)) <= $rd_inv($s,b_node.key,$phys_ptr_cast($result,^b_node))));
ensures b0045 ==> (($rd_inv($s,b_node.key,$phys_ptr_cast($result,^b_node)) <= $rd_inv($s,b_node.key,$phys_ptr_cast(P#x,^b_node))));
ensures b0046 ==> (($rd_inv($s,b_node.key,$phys_ptr_cast(P#x,^b_node)) == $rd_inv($s,b_node.key,$phys_ptr_cast($result,^b_node))));
ensures b0047 ==> (($rd_inv($s,b_node.key,$phys_ptr_cast($result,^b_node)) == $rd_inv($s,b_node.key,$phys_ptr_cast(P#x,^b_node))));
ensures b0048 ==> (($non_null($phys_ptr_cast(P#x,^b_node)) ==> (F#bst_min_key($s,$phys_ptr_cast($result,^b_node)) == $int_min(F#bst_min_key(old($s),$phys_ptr_cast(P#x,^b_node)),P#k))));
ensures b0049 ==> (($non_null($phys_ptr_cast($result,^b_node)) ==> (F#bst_min_key($s,$phys_ptr_cast(P#x,^b_node)) == $int_min(F#bst_min_key(old($s),$phys_ptr_cast($result,^b_node)),P#k))));
ensures b0050 ==> (($non_null($phys_ptr_cast(P#x,^b_node)) ==> (F#bst_max_key($s,$phys_ptr_cast($result,^b_node)) == $int_max(F#bst_max_key(old($s),$phys_ptr_cast(P#x,^b_node)),P#k))));
ensures b0051 ==> (($non_null($phys_ptr_cast($result,^b_node)) ==> (F#bst_max_key($s,$phys_ptr_cast(P#x,^b_node)) == $int_max(F#bst_max_key(old($s),$phys_ptr_cast($result,^b_node)),P#k))));
ensures b0052 ==> (($is_null($phys_ptr_cast(P#x,^b_node)) ==> (F#bst_min_key($s,$phys_ptr_cast($result,^b_node)) == P#k)));
ensures b0053 ==> (($is_null($phys_ptr_cast($result,^b_node)) ==> (F#bst_min_key($s,$phys_ptr_cast(P#x,^b_node)) == P#k)));
ensures b0054 ==> (($is_null($phys_ptr_cast(P#x,^b_node)) ==> (F#bst_max_key($s,$phys_ptr_cast($result,^b_node)) == P#k)));
ensures b0055 ==> (($is_null($phys_ptr_cast($result,^b_node)) ==> (F#bst_max_key($s,$phys_ptr_cast(P#x,^b_node)) == P#k)));
ensures b0056 ==> ((F#bst_min_key($s,$phys_ptr_cast(P#x,^b_node)) == F#bst_min_key(old($s),$phys_ptr_cast(P#x,^b_node))));
ensures b0057 ==> ((F#bst_min_key($s,$phys_ptr_cast($result,^b_node)) == F#bst_min_key(old($s),$phys_ptr_cast($result,^b_node))));
ensures b0058 ==> ((F#bst_max_key($s,$phys_ptr_cast(P#x,^b_node)) == F#bst_max_key(old($s),$phys_ptr_cast(P#x,^b_node))));
ensures b0059 ==> ((F#bst_max_key($s,$phys_ptr_cast($result,^b_node)) == F#bst_max_key(old($s),$phys_ptr_cast($result,^b_node))));
ensures b0060 ==> ((($non_null($phys_ptr_cast(P#x,^b_node)) && $non_null($phys_ptr_cast($result,^b_node))) ==> (F#bst_min_key($s,$phys_ptr_cast($result,^b_node)) <= F#bst_min_key(old($s),$phys_ptr_cast(P#x,^b_node)))));
ensures b0061 ==> ((($non_null($phys_ptr_cast($result,^b_node)) && $non_null($phys_ptr_cast(P#x,^b_node))) ==> (F#bst_min_key($s,$phys_ptr_cast(P#x,^b_node)) <= F#bst_min_key(old($s),$phys_ptr_cast($result,^b_node)))));
ensures b0062 ==> ((($non_null($phys_ptr_cast(P#x,^b_node)) && $non_null($phys_ptr_cast($result,^b_node))) ==> (F#bst_max_key($s,$phys_ptr_cast($result,^b_node)) <= F#bst_max_key(old($s),$phys_ptr_cast(P#x,^b_node)))));
ensures b0063 ==> ((($non_null($phys_ptr_cast($result,^b_node)) && $non_null($phys_ptr_cast(P#x,^b_node))) ==> (F#bst_max_key($s,$phys_ptr_cast(P#x,^b_node)) <= F#bst_max_key(old($s),$phys_ptr_cast($result,^b_node)))));
ensures b0064 ==> ((($non_null($phys_ptr_cast(P#x,^b_node)) && $non_null($phys_ptr_cast($result,^b_node))) ==> (F#bst_min_key(old($s),$phys_ptr_cast($result,^b_node)) <= F#bst_min_key($s,$phys_ptr_cast(P#x,^b_node)))));
ensures b0065 ==> ((($non_null($phys_ptr_cast($result,^b_node)) && $non_null($phys_ptr_cast(P#x,^b_node))) ==> (F#bst_min_key(old($s),$phys_ptr_cast(P#x,^b_node)) <= F#bst_min_key($s,$phys_ptr_cast($result,^b_node)))));
ensures b0066 ==> ((($non_null($phys_ptr_cast(P#x,^b_node)) && $non_null($phys_ptr_cast($result,^b_node))) ==> (F#bst_max_key(old($s),$phys_ptr_cast($result,^b_node)) <= F#bst_max_key($s,$phys_ptr_cast(P#x,^b_node)))));
ensures b0067 ==> ((($non_null($phys_ptr_cast($result,^b_node)) && $non_null($phys_ptr_cast(P#x,^b_node))) ==> (F#bst_max_key(old($s),$phys_ptr_cast(P#x,^b_node)) <= F#bst_max_key($s,$phys_ptr_cast($result,^b_node)))));

  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);

// INV:PTR: P#x, $result
// INV:INT: P#k
// INV:LST: bst


implementation bst_insert_rec(P#x: $ptr, P#k: int) returns ($result: $ptr)
{
  var stmtexpr6#25: $state;
  var _dryad_S3#12: $state;
  var stmtexpr5#24: $state;
  var _dryad_S2#11: $state;
  var stmtexpr4#23: $oset;
  var res_bst_reach#2: $oset;
  var stmtexpr3#22: $state;
  var _dryad_S1#10: $state;
  var stmtexpr2#21: $state;
  var _dryad_S0#9: $state;
  var stmtexpr1#20: $ptr;
  var x1#8: $ptr;
  var stmtexpr0#19: $ptr;
  var x0#7: $ptr;
  var l#6: $ptr;
  var r#5: $ptr;
  var tmp#4: $ptr;
  var stmtexpr6#18: $state;
  var _dryad_S3#3: $state;
  var stmtexpr5#17: $state;
  var _dryad_S2#2: $state;
  var stmtexpr4#16: $oset;
  var res_bst_reach#1: $oset;
  var stmtexpr3#15: $state;
  var _dryad_S1#1: $state;
  var stmtexpr2#14: $state;
  var _dryad_S0#0: $state;
  var stmtexpr1#13: $ptr;
  var SL#x1: $ptr;
  var stmtexpr0#12: $ptr;
  var SL#x0: $ptr;
  var L#l: $ptr;
  var L#r: $ptr;
  var L#tmp: $ptr;
  var stmtexpr8#11: $state;
  var SL#_dryad_S7: $state;
  var stmtexpr7#10: $state;
  var SL#_dryad_S6: $state;
  var stmtexpr6#9: $state;
  var SL#_dryad_S5: $state;
  var stmtexpr5#8: $state;
  var SL#_dryad_S4: $state;
  var stmtexpr4#7: $state;
  var SL#_dryad_S3: $state;
  var stmtexpr3#6: $state;
  var SL#_dryad_S2: $state;
  var stmtexpr2#5: $state;
  var SL#_dryad_S1: $state;
  var stmtexpr1#4: $oset;
  var stmtexpr0#3: $state;
  var SL#_dryad_S0: $state;
  var L#leaf: $ptr;
  var stmtexpr1#27: $oset;
  var stmtexpr0#26: $oset;
  var SL#_dryad_G1: $oset;
  var SL#_dryad_G0: $oset;
  var #wrTime$3^5.3: int;
  var #stackframe: int;

  anon5:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$3^5.3, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$3^5.3 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$3^5.3, (lambda #p: $ptr :: false));
    // assume true
    // assume @in_range_i4(k); 
    assume $in_range_i4(P#k);
    // assume @decreases_level_is(2147483647); 
    assume 2147483647 == $decreases_level;
    // assume true
    //  --- Dryad annotated function --- 
    // _math \oset _dryad_G0; 
    // _math \oset _dryad_G1; 
    // _dryad_G0 := bst_reach(x); 
    call SL#_dryad_G0 := bst_reach($phys_ptr_cast(P#x, ^b_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset stmtexpr0#26; 
    // stmtexpr0#26 := _dryad_G0; 
    stmtexpr0#26 := SL#_dryad_G0;
    // _dryad_G1 := _dryad_G0; 
    SL#_dryad_G1 := SL#_dryad_G0;
    // _math \oset stmtexpr1#27; 
    // stmtexpr1#27 := _dryad_G1; 
    stmtexpr1#27 := SL#_dryad_G1;
    // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), &&(@_vcc_mutable(@state, x), @writes_check(x))); 
    assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> $mutable($s, $phys_ptr_cast(P#x, ^b_node)) && $top_writable($s, #wrTime$3^5.3, $phys_ptr_cast(P#x, ^b_node));
    assume true;
    // if (@_vcc_ptr_eq_null(x)) ...
    if ($is_null($phys_ptr_cast(P#x, ^b_node)))
    {
      anon1:
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // struct b_node* leaf; 
        // _math \state _dryad_S0; 
        // _dryad_S0 := @_vcc_current_state(@state); 
        SL#_dryad_S0 := $current_state($s);
        // _math \state stmtexpr0#3; 
        // stmtexpr0#3 := _dryad_S0; 
        stmtexpr0#3 := SL#_dryad_S0;
        // leaf := _vcc_alloc(@_vcc_typeof((struct b_node*)@null)); 
        call L#leaf := $alloc(^b_node);
        assume $full_stop_ext(#tok$3^20.20, $s);
        // assume !(@_vcc_oset_in(leaf, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
        // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(leaf)); 
        SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#leaf, ^b_node)));
        // _math \oset stmtexpr1#4; 
        // stmtexpr1#4 := _dryad_G1; 
        stmtexpr1#4 := SL#_dryad_G1;
        // assume ==(glob_reach(), _dryad_G1); 
        assume F#glob_reach() == SL#_dryad_G1;
        // _math \state _dryad_S1; 
        // _dryad_S1 := @_vcc_current_state(@state); 
        SL#_dryad_S1 := $current_state($s);
        // _math \state stmtexpr2#5; 
        // stmtexpr2#5 := _dryad_S1; 
        stmtexpr2#5 := SL#_dryad_S1;
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(bst(leaf), &&(&&(&&(&&(&&(&&(&&(bst(*((leaf->left))), bst(*((leaf->right)))), unchecked!(@_vcc_oset_in(leaf, @_vcc_oset_union(bst_reach(*((leaf->left))), bst_reach(*((leaf->right))))))), unchecked!(@_vcc_intset_in(*((leaf->key)), @_vcc_intset_union(bst_keys(*((leaf->left))), bst_keys(*((leaf->right))))))), @_vcc_oset_disjoint(bst_reach(*((leaf->left))), bst_reach(*((leaf->right))))), @_vcc_intset_disjoint(bst_keys(*((leaf->left))), bst_keys(*((leaf->right))))), ==>(@_vcc_ptr_neq_null(*((leaf->left))), <(bst_max_key(*((leaf->left))), *((leaf->key))))), ==>(@_vcc_ptr_neq_null(*((leaf->right))), <(*((leaf->key)), bst_min_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#leaf, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#leaf, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(bst_reach(leaf), @_vcc_oset_union(@_vcc_oset_singleton(leaf), @_vcc_oset_union(bst_reach(*((leaf->left))), bst_reach(*((leaf->right))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#leaf, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#leaf, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(bst_keys(leaf), @_vcc_intset_union(@_vcc_intset_singleton(*((leaf->key))), @_vcc_intset_union(bst_keys(*((leaf->left))), bst_keys(*((leaf->right))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#leaf, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(bst_max_key(leaf), @\int_max(*((leaf->key)), @\int_max(bst_max_key(*((leaf->left))), bst_max_key(*((leaf->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_eq_null(*((leaf->right)))), ==(bst_max_key(leaf), @\int_max(*((leaf->key)), bst_max_key(*((leaf->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(bst_max_key(leaf), @\int_max(*((leaf->key)), bst_max_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(bst_min_key(leaf), @\int_min(*((leaf->key)), @\int_min(bst_min_key(*((leaf->left))), bst_min_key(*((leaf->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_eq_null(*((leaf->right)))), ==(bst_min_key(leaf), @\int_min(*((leaf->key)), bst_min_key(*((leaf->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(bst_min_key(leaf), @\int_min(*((leaf->key)), bst_min_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S0, bst_reach(x)))), ==(old(_dryad_S0, bst(x)), old(_dryad_S1, bst(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst(SL#_dryad_S0, $phys_ptr_cast(P#x, ^b_node)) == F#bst(SL#_dryad_S1, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S0, bst_reach(x)))), ==(old(_dryad_S0, bst_reach(x)), old(_dryad_S1, bst_reach(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^b_node)) == F#bst_reach(SL#_dryad_S1, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S0, bst_reach(x)))), ==(old(_dryad_S0, bst_keys(x)), old(_dryad_S1, bst_keys(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_keys(SL#_dryad_S0, $phys_ptr_cast(P#x, ^b_node)) == F#bst_keys(SL#_dryad_S1, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S0, bst_reach(x)))), ==(old(_dryad_S0, bst_max_key(x)), old(_dryad_S1, bst_max_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_max_key(SL#_dryad_S0, $phys_ptr_cast(P#x, ^b_node)) == F#bst_max_key(SL#_dryad_S1, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S0, bst_reach(x)))), ==(old(_dryad_S0, bst_min_key(x)), old(_dryad_S1, bst_min_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_min_key(SL#_dryad_S0, $phys_ptr_cast(P#x, ^b_node)) == F#bst_min_key(SL#_dryad_S1, $phys_ptr_cast(P#x, ^b_node));
        // assume @_vcc_ptr_neq_null(leaf); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node));
        // _math \state _dryad_S2; 
        // _dryad_S2 := @_vcc_current_state(@state); 
        SL#_dryad_S2 := $current_state($s);
        // _math \state stmtexpr3#6; 
        // stmtexpr3#6 := _dryad_S2; 
        stmtexpr3#6 := SL#_dryad_S2;
        // assert @prim_writes_check((leaf->key)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#leaf, ^b_node), b_node.key));
        // *(leaf->key) := k; 
        call $write_int(b_node.key, $phys_ptr_cast(L#leaf, ^b_node), P#k);
        assume $full_stop_ext(#tok$3^23.5, $s);
        // _math \state _dryad_S3; 
        // _dryad_S3 := @_vcc_current_state(@state); 
        SL#_dryad_S3 := $current_state($s);
        // _math \state stmtexpr4#7; 
        // stmtexpr4#7 := _dryad_S3; 
        stmtexpr4#7 := SL#_dryad_S3;
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, bst_reach(*((leaf->left)))))), ==(old(_dryad_S2, bst(*((leaf->left)))), old(_dryad_S3, bst(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, bst_reach(*((leaf->left)))))), ==(old(_dryad_S2, bst_reach(*((leaf->left)))), old(_dryad_S3, bst_reach(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, bst_reach(*((leaf->left)))))), ==(old(_dryad_S2, bst_keys(*((leaf->left)))), old(_dryad_S3, bst_keys(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst_keys(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst_keys(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, bst_reach(*((leaf->left)))))), ==(old(_dryad_S2, bst_max_key(*((leaf->left)))), old(_dryad_S3, bst_max_key(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst_max_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst_max_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, bst_reach(*((leaf->left)))))), ==(old(_dryad_S2, bst_min_key(*((leaf->left)))), old(_dryad_S3, bst_min_key(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst_min_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst_min_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, bst_reach(*((leaf->right)))))), ==(old(_dryad_S2, bst(*((leaf->right)))), old(_dryad_S3, bst(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, bst_reach(*((leaf->right)))))), ==(old(_dryad_S2, bst_reach(*((leaf->right)))), old(_dryad_S3, bst_reach(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, bst_reach(*((leaf->right)))))), ==(old(_dryad_S2, bst_keys(*((leaf->right)))), old(_dryad_S3, bst_keys(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst_keys(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst_keys(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, bst_reach(*((leaf->right)))))), ==(old(_dryad_S2, bst_max_key(*((leaf->right)))), old(_dryad_S3, bst_max_key(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst_max_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst_max_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, bst_reach(*((leaf->right)))))), ==(old(_dryad_S2, bst_min_key(*((leaf->right)))), old(_dryad_S3, bst_min_key(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst_min_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst_min_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==(old(_dryad_S2, bst_reach(leaf)), old(_dryad_S3, bst_reach(leaf))); 
        assume F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(L#leaf, ^b_node)) == F#bst_reach(SL#_dryad_S3, $phys_ptr_cast(L#leaf, ^b_node));
        // assume ==(old(_dryad_S2, bst_reach(x)), old(_dryad_S3, bst_reach(x))); 
        assume F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)) == F#bst_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, bst_reach(x)))), ==(old(_dryad_S2, bst(x)), old(_dryad_S3, bst(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)) == F#bst(SL#_dryad_S3, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, bst_reach(x)))), ==(old(_dryad_S2, bst_reach(x)), old(_dryad_S3, bst_reach(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)) == F#bst_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, bst_reach(x)))), ==(old(_dryad_S2, bst_keys(x)), old(_dryad_S3, bst_keys(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_keys(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)) == F#bst_keys(SL#_dryad_S3, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, bst_reach(x)))), ==(old(_dryad_S2, bst_max_key(x)), old(_dryad_S3, bst_max_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_max_key(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)) == F#bst_max_key(SL#_dryad_S3, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S2, bst_reach(x)))), ==(old(_dryad_S2, bst_min_key(x)), old(_dryad_S3, bst_min_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_min_key(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)) == F#bst_min_key(SL#_dryad_S3, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), @_vcc_ptr_eq_pure(*((x->left)), old(_dryad_S2, *((x->left))))); 
        assume !($phys_ptr_cast(L#leaf, ^b_node) == $phys_ptr_cast(P#x, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), @_vcc_ptr_eq_pure(*((x->right)), old(_dryad_S2, *((x->right))))); 
        assume !($phys_ptr_cast(L#leaf, ^b_node) == $phys_ptr_cast(P#x, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), ==(*((x->key)), old(_dryad_S2, *((x->key))))); 
        assume !($phys_ptr_cast(L#leaf, ^b_node) == $phys_ptr_cast(P#x, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) == $rd_inv(SL#_dryad_S2, b_node.key, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(bst(leaf), &&(&&(&&(&&(&&(&&(&&(bst(*((leaf->left))), bst(*((leaf->right)))), unchecked!(@_vcc_oset_in(leaf, @_vcc_oset_union(bst_reach(*((leaf->left))), bst_reach(*((leaf->right))))))), unchecked!(@_vcc_intset_in(*((leaf->key)), @_vcc_intset_union(bst_keys(*((leaf->left))), bst_keys(*((leaf->right))))))), @_vcc_oset_disjoint(bst_reach(*((leaf->left))), bst_reach(*((leaf->right))))), @_vcc_intset_disjoint(bst_keys(*((leaf->left))), bst_keys(*((leaf->right))))), ==>(@_vcc_ptr_neq_null(*((leaf->left))), <(bst_max_key(*((leaf->left))), *((leaf->key))))), ==>(@_vcc_ptr_neq_null(*((leaf->right))), <(*((leaf->key)), bst_min_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#leaf, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#leaf, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(bst_keys(leaf), @_vcc_intset_union(@_vcc_intset_singleton(*((leaf->key))), @_vcc_intset_union(bst_keys(*((leaf->left))), bst_keys(*((leaf->right))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#leaf, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(bst_max_key(leaf), @\int_max(*((leaf->key)), @\int_max(bst_max_key(*((leaf->left))), bst_max_key(*((leaf->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_eq_null(*((leaf->right)))), ==(bst_max_key(leaf), @\int_max(*((leaf->key)), bst_max_key(*((leaf->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(bst_max_key(leaf), @\int_max(*((leaf->key)), bst_max_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(bst_min_key(leaf), @\int_min(*((leaf->key)), @\int_min(bst_min_key(*((leaf->left))), bst_min_key(*((leaf->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_eq_null(*((leaf->right)))), ==(bst_min_key(leaf), @\int_min(*((leaf->key)), bst_min_key(*((leaf->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(bst_min_key(leaf), @\int_min(*((leaf->key)), bst_min_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // _math \state _dryad_S4; 
        // _dryad_S4 := @_vcc_current_state(@state); 
        SL#_dryad_S4 := $current_state($s);
        // _math \state stmtexpr5#8; 
        // stmtexpr5#8 := _dryad_S4; 
        stmtexpr5#8 := SL#_dryad_S4;
        // assert @prim_writes_check((leaf->left)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#leaf, ^b_node), b_node.left));
        // *(leaf->left) := (struct b_node*)@null; 
        call $write_int(b_node.left, $phys_ptr_cast(L#leaf, ^b_node), $ptr_to_int($phys_ptr_cast($null, ^b_node)));
        assume $full_stop_ext(#tok$3^24.5, $s);
        // _math \state _dryad_S5; 
        // _dryad_S5 := @_vcc_current_state(@state); 
        SL#_dryad_S5 := $current_state($s);
        // _math \state stmtexpr6#9; 
        // stmtexpr6#9 := _dryad_S5; 
        stmtexpr6#9 := SL#_dryad_S5;
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, bst_reach(*((leaf->right)))))), ==(old(_dryad_S4, bst(*((leaf->right)))), old(_dryad_S5, bst(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, bst_reach(*((leaf->right)))))), ==(old(_dryad_S4, bst_reach(*((leaf->right)))), old(_dryad_S5, bst_reach(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst_reach(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, bst_reach(*((leaf->right)))))), ==(old(_dryad_S4, bst_keys(*((leaf->right)))), old(_dryad_S5, bst_keys(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst_keys(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst_keys(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, bst_reach(*((leaf->right)))))), ==(old(_dryad_S4, bst_max_key(*((leaf->right)))), old(_dryad_S5, bst_max_key(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst_max_key(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst_max_key(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, bst_reach(*((leaf->right)))))), ==(old(_dryad_S4, bst_min_key(*((leaf->right)))), old(_dryad_S5, bst_min_key(*((leaf->right)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst_min_key(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst_min_key(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, bst_reach(x)))), ==(old(_dryad_S4, bst(x)), old(_dryad_S5, bst(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node)) == F#bst(SL#_dryad_S5, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, bst_reach(x)))), ==(old(_dryad_S4, bst_reach(x)), old(_dryad_S5, bst_reach(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node)) == F#bst_reach(SL#_dryad_S5, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, bst_reach(x)))), ==(old(_dryad_S4, bst_keys(x)), old(_dryad_S5, bst_keys(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_keys(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node)) == F#bst_keys(SL#_dryad_S5, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, bst_reach(x)))), ==(old(_dryad_S4, bst_max_key(x)), old(_dryad_S5, bst_max_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_max_key(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node)) == F#bst_max_key(SL#_dryad_S5, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S4, bst_reach(x)))), ==(old(_dryad_S4, bst_min_key(x)), old(_dryad_S5, bst_min_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_min_key(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node)) == F#bst_min_key(SL#_dryad_S5, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), @_vcc_ptr_eq_pure(*((x->left)), old(_dryad_S4, *((x->left))))); 
        assume !($phys_ptr_cast(L#leaf, ^b_node) == $phys_ptr_cast(P#x, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), @_vcc_ptr_eq_pure(*((x->right)), old(_dryad_S4, *((x->right))))); 
        assume !($phys_ptr_cast(L#leaf, ^b_node) == $phys_ptr_cast(P#x, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), ==(*((x->key)), old(_dryad_S4, *((x->key))))); 
        assume !($phys_ptr_cast(L#leaf, ^b_node) == $phys_ptr_cast(P#x, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) == $rd_inv(SL#_dryad_S4, b_node.key, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(bst(leaf), &&(&&(&&(&&(&&(&&(&&(bst(*((leaf->left))), bst(*((leaf->right)))), unchecked!(@_vcc_oset_in(leaf, @_vcc_oset_union(bst_reach(*((leaf->left))), bst_reach(*((leaf->right))))))), unchecked!(@_vcc_intset_in(*((leaf->key)), @_vcc_intset_union(bst_keys(*((leaf->left))), bst_keys(*((leaf->right))))))), @_vcc_oset_disjoint(bst_reach(*((leaf->left))), bst_reach(*((leaf->right))))), @_vcc_intset_disjoint(bst_keys(*((leaf->left))), bst_keys(*((leaf->right))))), ==>(@_vcc_ptr_neq_null(*((leaf->left))), <(bst_max_key(*((leaf->left))), *((leaf->key))))), ==>(@_vcc_ptr_neq_null(*((leaf->right))), <(*((leaf->key)), bst_min_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#leaf, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#leaf, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(bst_reach(leaf), @_vcc_oset_union(@_vcc_oset_singleton(leaf), @_vcc_oset_union(bst_reach(*((leaf->left))), bst_reach(*((leaf->right))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#leaf, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#leaf, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(bst_keys(leaf), @_vcc_intset_union(@_vcc_intset_singleton(*((leaf->key))), @_vcc_intset_union(bst_keys(*((leaf->left))), bst_keys(*((leaf->right))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#leaf, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(bst_max_key(leaf), @\int_max(*((leaf->key)), @\int_max(bst_max_key(*((leaf->left))), bst_max_key(*((leaf->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_eq_null(*((leaf->right)))), ==(bst_max_key(leaf), @\int_max(*((leaf->key)), bst_max_key(*((leaf->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(bst_max_key(leaf), @\int_max(*((leaf->key)), bst_max_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(bst_min_key(leaf), @\int_min(*((leaf->key)), @\int_min(bst_min_key(*((leaf->left))), bst_min_key(*((leaf->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_eq_null(*((leaf->right)))), ==(bst_min_key(leaf), @\int_min(*((leaf->key)), bst_min_key(*((leaf->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(bst_min_key(leaf), @\int_min(*((leaf->key)), bst_min_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // _math \state _dryad_S6; 
        // _dryad_S6 := @_vcc_current_state(@state); 
        SL#_dryad_S6 := $current_state($s);
        // _math \state stmtexpr7#10; 
        // stmtexpr7#10 := _dryad_S6; 
        stmtexpr7#10 := SL#_dryad_S6;
        // assert @prim_writes_check((leaf->right)); 
        assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(L#leaf, ^b_node), b_node.right));
        // *(leaf->right) := (struct b_node*)@null; 
        call $write_int(b_node.right, $phys_ptr_cast(L#leaf, ^b_node), $ptr_to_int($phys_ptr_cast($null, ^b_node)));
        assume $full_stop_ext(#tok$3^25.5, $s);
        // _math \state _dryad_S7; 
        // _dryad_S7 := @_vcc_current_state(@state); 
        SL#_dryad_S7 := $current_state($s);
        // _math \state stmtexpr8#11; 
        // stmtexpr8#11 := _dryad_S7; 
        stmtexpr8#11 := SL#_dryad_S7;
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, bst_reach(*((leaf->left)))))), ==(old(_dryad_S6, bst(*((leaf->left)))), old(_dryad_S7, bst(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, bst_reach(*((leaf->left)))))), ==(old(_dryad_S6, bst_reach(*((leaf->left)))), old(_dryad_S7, bst_reach(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst_reach(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, bst_reach(*((leaf->left)))))), ==(old(_dryad_S6, bst_keys(*((leaf->left)))), old(_dryad_S7, bst_keys(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst_keys(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst_keys(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, bst_reach(*((leaf->left)))))), ==(old(_dryad_S6, bst_max_key(*((leaf->left)))), old(_dryad_S7, bst_max_key(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst_max_key(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst_max_key(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, bst_reach(*((leaf->left)))))), ==(old(_dryad_S6, bst_min_key(*((leaf->left)))), old(_dryad_S7, bst_min_key(*((leaf->left)))))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) ==> F#bst_min_key(SL#_dryad_S6, $rd_phys_ptr(SL#_dryad_S6, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) == F#bst_min_key(SL#_dryad_S7, $rd_phys_ptr(SL#_dryad_S7, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, bst_reach(x)))), ==(old(_dryad_S6, bst(x)), old(_dryad_S7, bst(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst(SL#_dryad_S6, $phys_ptr_cast(P#x, ^b_node)) == F#bst(SL#_dryad_S7, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, bst_reach(x)))), ==(old(_dryad_S6, bst_reach(x)), old(_dryad_S7, bst_reach(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^b_node)) == F#bst_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, bst_reach(x)))), ==(old(_dryad_S6, bst_keys(x)), old(_dryad_S7, bst_keys(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_keys(SL#_dryad_S6, $phys_ptr_cast(P#x, ^b_node)) == F#bst_keys(SL#_dryad_S7, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, bst_reach(x)))), ==(old(_dryad_S6, bst_max_key(x)), old(_dryad_S7, bst_max_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_max_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^b_node)) == F#bst_max_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(unchecked!(@_vcc_oset_in(leaf, old(_dryad_S6, bst_reach(x)))), ==(old(_dryad_S6, bst_min_key(x)), old(_dryad_S7, bst_min_key(x)))); 
        assume !$oset_in($phys_ptr_cast(L#leaf, ^b_node), F#bst_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_min_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^b_node)) == F#bst_min_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), @_vcc_ptr_eq_pure(*((x->left)), old(_dryad_S6, *((x->left))))); 
        assume !($phys_ptr_cast(L#leaf, ^b_node) == $phys_ptr_cast(P#x, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S6, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), @_vcc_ptr_eq_pure(*((x->right)), old(_dryad_S6, *((x->right))))); 
        assume !($phys_ptr_cast(L#leaf, ^b_node) == $phys_ptr_cast(P#x, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S6, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(leaf, x)), ==(*((x->key)), old(_dryad_S6, *((x->key))))); 
        assume !($phys_ptr_cast(L#leaf, ^b_node) == $phys_ptr_cast(P#x, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) == $rd_inv(SL#_dryad_S6, b_node.key, $phys_ptr_cast(P#x, ^b_node));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(bst(leaf), &&(&&(&&(&&(&&(&&(&&(bst(*((leaf->left))), bst(*((leaf->right)))), unchecked!(@_vcc_oset_in(leaf, @_vcc_oset_union(bst_reach(*((leaf->left))), bst_reach(*((leaf->right))))))), unchecked!(@_vcc_intset_in(*((leaf->key)), @_vcc_intset_union(bst_keys(*((leaf->left))), bst_keys(*((leaf->right))))))), @_vcc_oset_disjoint(bst_reach(*((leaf->left))), bst_reach(*((leaf->right))))), @_vcc_intset_disjoint(bst_keys(*((leaf->left))), bst_keys(*((leaf->right))))), ==>(@_vcc_ptr_neq_null(*((leaf->left))), <(bst_max_key(*((leaf->left))), *((leaf->key))))), ==>(@_vcc_ptr_neq_null(*((leaf->right))), <(*((leaf->key)), bst_min_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#leaf, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#leaf, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(bst_reach(leaf), @_vcc_oset_union(@_vcc_oset_singleton(leaf), @_vcc_oset_union(bst_reach(*((leaf->left))), bst_reach(*((leaf->right))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#leaf, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#leaf, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), ==(bst_keys(leaf), @_vcc_intset_union(@_vcc_intset_singleton(*((leaf->key))), @_vcc_intset_union(bst_keys(*((leaf->left))), bst_keys(*((leaf->right))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#leaf, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(bst_max_key(leaf), @\int_max(*((leaf->key)), @\int_max(bst_max_key(*((leaf->left))), bst_max_key(*((leaf->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_eq_null(*((leaf->right)))), ==(bst_max_key(leaf), @\int_max(*((leaf->key)), bst_max_key(*((leaf->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(bst_max_key(leaf), @\int_max(*((leaf->key)), bst_max_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(leaf), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(bst_min_key(leaf), @\int_min(*((leaf->key)), @\int_min(bst_min_key(*((leaf->left))), bst_min_key(*((leaf->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((leaf->left))), @_vcc_ptr_eq_null(*((leaf->right)))), ==(bst_min_key(leaf), @\int_min(*((leaf->key)), bst_min_key(*((leaf->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((leaf->left))), @_vcc_ptr_neq_null(*((leaf->right)))), ==(bst_min_key(leaf), @\int_min(*((leaf->key)), bst_min_key(*((leaf->right)))))))); 
        assume $non_null($phys_ptr_cast(L#leaf, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#leaf, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#leaf, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#leaf, ^b_node), ^b_node))));
        // return leaf; 
        $result := $phys_ptr_cast(L#leaf, ^b_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon4:
        // assert @reads_check_normal((x->key)); 
        assert $thread_local($s, $phys_ptr_cast(P#x, ^b_node));
        assume true;
        // if (<(k, *((x->key)))) ...
        if (P#k < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)))
        {
          anon2:
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // struct b_node* tmp; 
            // struct b_node* r; 
            // struct b_node* l; 
            // struct b_node* x0; 
            // x0 := x; 
            SL#x0 := $phys_ptr_cast(P#x, ^b_node);
            // struct b_node* stmtexpr0#12; 
            // stmtexpr0#12 := x0; 
            stmtexpr0#12 := $phys_ptr_cast(SL#x0, ^b_node);
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assert @reads_check_normal((x->left)); 
            assert $thread_local($s, $phys_ptr_cast(P#x, ^b_node));
            // l := *((x->left)); 
            L#l := $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node);
            // assume ==>(@_vcc_ptr_neq_null(l), ==(bst(l), &&(&&(&&(&&(&&(&&(&&(bst(*((l->left))), bst(*((l->right)))), unchecked!(@_vcc_oset_in(l, @_vcc_oset_union(bst_reach(*((l->left))), bst_reach(*((l->right))))))), unchecked!(@_vcc_intset_in(*((l->key)), @_vcc_intset_union(bst_keys(*((l->left))), bst_keys(*((l->right))))))), @_vcc_oset_disjoint(bst_reach(*((l->left))), bst_reach(*((l->right))))), @_vcc_intset_disjoint(bst_keys(*((l->left))), bst_keys(*((l->right))))), ==>(@_vcc_ptr_neq_null(*((l->left))), <(bst_max_key(*((l->left))), *((l->key))))), ==>(@_vcc_ptr_neq_null(*((l->right))), <(*((l->key)), bst_min_key(*((l->right)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#l, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#l, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(bst_reach(l), @_vcc_oset_union(@_vcc_oset_singleton(l), @_vcc_oset_union(bst_reach(*((l->left))), bst_reach(*((l->right))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#l, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#l, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(bst_keys(l), @_vcc_intset_union(@_vcc_intset_singleton(*((l->key))), @_vcc_intset_union(bst_keys(*((l->left))), bst_keys(*((l->right))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#l, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((l->left))), @_vcc_ptr_neq_null(*((l->right)))), ==(bst_max_key(l), @\int_max(*((l->key)), @\int_max(bst_max_key(*((l->left))), bst_max_key(*((l->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((l->left))), @_vcc_ptr_eq_null(*((l->right)))), ==(bst_max_key(l), @\int_max(*((l->key)), bst_max_key(*((l->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((l->left))), @_vcc_ptr_neq_null(*((l->right)))), ==(bst_max_key(l), @\int_max(*((l->key)), bst_max_key(*((l->right)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((l->left))), @_vcc_ptr_neq_null(*((l->right)))), ==(bst_min_key(l), @\int_min(*((l->key)), @\int_min(bst_min_key(*((l->left))), bst_min_key(*((l->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((l->left))), @_vcc_ptr_eq_null(*((l->right)))), ==(bst_min_key(l), @\int_min(*((l->key)), bst_min_key(*((l->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((l->left))), @_vcc_ptr_neq_null(*((l->right)))), ==(bst_min_key(l), @\int_min(*((l->key)), bst_min_key(*((l->right)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // struct b_node* x1; 
            // x1 := x; 
            SL#x1 := $phys_ptr_cast(P#x, ^b_node);
            // struct b_node* stmtexpr1#13; 
            // stmtexpr1#13 := x1; 
            stmtexpr1#13 := $phys_ptr_cast(SL#x1, ^b_node);
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assert @reads_check_normal((x->right)); 
            assert $thread_local($s, $phys_ptr_cast(P#x, ^b_node));
            // r := *((x->right)); 
            L#r := $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node);
            // assume ==>(@_vcc_ptr_neq_null(r), ==(bst(r), &&(&&(&&(&&(&&(&&(&&(bst(*((r->left))), bst(*((r->right)))), unchecked!(@_vcc_oset_in(r, @_vcc_oset_union(bst_reach(*((r->left))), bst_reach(*((r->right))))))), unchecked!(@_vcc_intset_in(*((r->key)), @_vcc_intset_union(bst_keys(*((r->left))), bst_keys(*((r->right))))))), @_vcc_oset_disjoint(bst_reach(*((r->left))), bst_reach(*((r->right))))), @_vcc_intset_disjoint(bst_keys(*((r->left))), bst_keys(*((r->right))))), ==>(@_vcc_ptr_neq_null(*((r->left))), <(bst_max_key(*((r->left))), *((r->key))))), ==>(@_vcc_ptr_neq_null(*((r->right))), <(*((r->key)), bst_min_key(*((r->right)))))))); 
            assume $non_null($phys_ptr_cast(L#r, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#r, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#r, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r), ==(bst_reach(r), @_vcc_oset_union(@_vcc_oset_singleton(r), @_vcc_oset_union(bst_reach(*((r->left))), bst_reach(*((r->right))))))); 
            assume $non_null($phys_ptr_cast(L#r, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#r, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#r, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r), ==(bst_keys(r), @_vcc_intset_union(@_vcc_intset_singleton(*((r->key))), @_vcc_intset_union(bst_keys(*((r->left))), bst_keys(*((r->right))))))); 
            assume $non_null($phys_ptr_cast(L#r, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#r, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((r->left))), @_vcc_ptr_neq_null(*((r->right)))), ==(bst_max_key(r), @\int_max(*((r->key)), @\int_max(bst_max_key(*((r->left))), bst_max_key(*((r->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((r->left))), @_vcc_ptr_eq_null(*((r->right)))), ==(bst_max_key(r), @\int_max(*((r->key)), bst_max_key(*((r->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((r->left))), @_vcc_ptr_neq_null(*((r->right)))), ==(bst_max_key(r), @\int_max(*((r->key)), bst_max_key(*((r->right)))))))); 
            assume $non_null($phys_ptr_cast(L#r, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((r->left))), @_vcc_ptr_neq_null(*((r->right)))), ==(bst_min_key(r), @\int_min(*((r->key)), @\int_min(bst_min_key(*((r->left))), bst_min_key(*((r->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((r->left))), @_vcc_ptr_eq_null(*((r->right)))), ==(bst_min_key(r), @\int_min(*((r->key)), bst_min_key(*((r->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((r->left))), @_vcc_ptr_neq_null(*((r->right)))), ==(bst_min_key(r), @\int_min(*((r->key)), bst_min_key(*((r->right)))))))); 
            assume $non_null($phys_ptr_cast(L#r, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // _math \state _dryad_S0#0; 
            // _dryad_S0#0 := @_vcc_current_state(@state); 
            _dryad_S0#0 := $current_state($s);
            // _math \state stmtexpr2#14; 
            // stmtexpr2#14 := _dryad_S0#0; 
            stmtexpr2#14 := _dryad_S0#0;
            // non-pure function
            // tmp := bst_insert_rec(l, k); 
            call L#tmp := bst_insert_rec($phys_ptr_cast(L#l, ^b_node), P#k);
            assume $full_stop_ext(#tok$3^31.19, $s);
            // _math \state _dryad_S1#1; 
            // _dryad_S1#1 := @_vcc_current_state(@state); 
            _dryad_S1#1 := $current_state($s);
            // _math \state stmtexpr3#15; 
            // stmtexpr3#15 := _dryad_S1#1; 
            stmtexpr3#15 := _dryad_S1#1;
            // assume @_vcc_oset_disjoint(bst_reach(tmp), @_vcc_oset_diff(_dryad_G1, old(_dryad_S0#0, bst_reach(l)))); 
            assume $oset_disjoint(F#bst_reach($s, $phys_ptr_cast(L#tmp, ^b_node)), $oset_diff(SL#_dryad_G1, F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))));
            // _math \oset res_bst_reach#1; 
            // res_bst_reach#1 := bst_reach(tmp); 
            call res_bst_reach#1 := bst_reach($phys_ptr_cast(L#tmp, ^b_node));
            assume $full_stop_ext(#tok$4^0.0, $s);
            // _dryad_G1 := @_vcc_oset_union(res_bst_reach#1, @_vcc_oset_diff(_dryad_G1, pure(old(_dryad_S0#0, bst_reach(l))))); 
            SL#_dryad_G1 := $oset_union(res_bst_reach#1, $oset_diff(SL#_dryad_G1, F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))));
            // _math \oset stmtexpr4#16; 
            // stmtexpr4#16 := _dryad_G1; 
            stmtexpr4#16 := SL#_dryad_G1;
            // assume ==(glob_reach(), _dryad_G1); 
            assume F#glob_reach() == SL#_dryad_G1;
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(x1))), ==(old(_dryad_S0#0, bst(x1)), old(_dryad_S1#1, bst(x1)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst(_dryad_S1#1, $phys_ptr_cast(SL#x1, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(x1))), ==(old(_dryad_S0#0, bst_reach(x1)), old(_dryad_S1#1, bst_reach(x1)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_reach(_dryad_S1#1, $phys_ptr_cast(SL#x1, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(x1))), ==(old(_dryad_S0#0, bst_keys(x1)), old(_dryad_S1#1, bst_keys(x1)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_keys(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_keys(_dryad_S1#1, $phys_ptr_cast(SL#x1, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(x1))), ==(old(_dryad_S0#0, bst_max_key(x1)), old(_dryad_S1#1, bst_max_key(x1)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_max_key(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_max_key(_dryad_S1#1, $phys_ptr_cast(SL#x1, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(x1))), ==(old(_dryad_S0#0, bst_min_key(x1)), old(_dryad_S1#1, bst_min_key(x1)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_min_key(_dryad_S0#0, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_min_key(_dryad_S1#1, $phys_ptr_cast(SL#x1, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(x0))), ==(old(_dryad_S0#0, bst(x0)), old(_dryad_S1#1, bst(x0)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node))) ==> F#bst(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node)) == F#bst(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(x0))), ==(old(_dryad_S0#0, bst_reach(x0)), old(_dryad_S1#1, bst_reach(x0)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node))) ==> F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node)) == F#bst_reach(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(x0))), ==(old(_dryad_S0#0, bst_keys(x0)), old(_dryad_S1#1, bst_keys(x0)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node))) ==> F#bst_keys(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node)) == F#bst_keys(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(x0))), ==(old(_dryad_S0#0, bst_max_key(x0)), old(_dryad_S1#1, bst_max_key(x0)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node))) ==> F#bst_max_key(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node)) == F#bst_max_key(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(x0))), ==(old(_dryad_S0#0, bst_min_key(x0)), old(_dryad_S1#1, bst_min_key(x0)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node))) ==> F#bst_min_key(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node)) == F#bst_min_key(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(l))), ==(old(_dryad_S0#0, bst(l)), old(_dryad_S1#1, bst(l)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> F#bst(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)) == F#bst(_dryad_S1#1, $phys_ptr_cast(L#l, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(l))), ==(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S1#1, bst_reach(l)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)) == F#bst_reach(_dryad_S1#1, $phys_ptr_cast(L#l, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(l))), ==(old(_dryad_S0#0, bst_keys(l)), old(_dryad_S1#1, bst_keys(l)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> F#bst_keys(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)) == F#bst_keys(_dryad_S1#1, $phys_ptr_cast(L#l, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(l))), ==(old(_dryad_S0#0, bst_max_key(l)), old(_dryad_S1#1, bst_max_key(l)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> F#bst_max_key(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)) == F#bst_max_key(_dryad_S1#1, $phys_ptr_cast(L#l, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(l))), ==(old(_dryad_S0#0, bst_min_key(l)), old(_dryad_S1#1, bst_min_key(l)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> F#bst_min_key(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)) == F#bst_min_key(_dryad_S1#1, $phys_ptr_cast(L#l, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(r))), ==(old(_dryad_S0#0, bst(r)), old(_dryad_S1#1, bst(r)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#r, ^b_node))) ==> F#bst(_dryad_S0#0, $phys_ptr_cast(L#r, ^b_node)) == F#bst(_dryad_S1#1, $phys_ptr_cast(L#r, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(r))), ==(old(_dryad_S0#0, bst_reach(r)), old(_dryad_S1#1, bst_reach(r)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#r, ^b_node))) ==> F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#r, ^b_node)) == F#bst_reach(_dryad_S1#1, $phys_ptr_cast(L#r, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(r))), ==(old(_dryad_S0#0, bst_keys(r)), old(_dryad_S1#1, bst_keys(r)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#r, ^b_node))) ==> F#bst_keys(_dryad_S0#0, $phys_ptr_cast(L#r, ^b_node)) == F#bst_keys(_dryad_S1#1, $phys_ptr_cast(L#r, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(r))), ==(old(_dryad_S0#0, bst_max_key(r)), old(_dryad_S1#1, bst_max_key(r)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#r, ^b_node))) ==> F#bst_max_key(_dryad_S0#0, $phys_ptr_cast(L#r, ^b_node)) == F#bst_max_key(_dryad_S1#1, $phys_ptr_cast(L#r, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(r))), ==(old(_dryad_S0#0, bst_min_key(r)), old(_dryad_S1#1, bst_min_key(r)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#r, ^b_node))) ==> F#bst_min_key(_dryad_S0#0, $phys_ptr_cast(L#r, ^b_node)) == F#bst_min_key(_dryad_S1#1, $phys_ptr_cast(L#r, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(x))), ==(old(_dryad_S0#0, bst(x)), old(_dryad_S1#1, bst(x)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst(_dryad_S0#0, $phys_ptr_cast(P#x, ^b_node)) == F#bst(_dryad_S1#1, $phys_ptr_cast(P#x, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(x))), ==(old(_dryad_S0#0, bst_reach(x)), old(_dryad_S1#1, bst_reach(x)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_reach(_dryad_S0#0, $phys_ptr_cast(P#x, ^b_node)) == F#bst_reach(_dryad_S1#1, $phys_ptr_cast(P#x, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(x))), ==(old(_dryad_S0#0, bst_keys(x)), old(_dryad_S1#1, bst_keys(x)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_keys(_dryad_S0#0, $phys_ptr_cast(P#x, ^b_node)) == F#bst_keys(_dryad_S1#1, $phys_ptr_cast(P#x, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(x))), ==(old(_dryad_S0#0, bst_max_key(x)), old(_dryad_S1#1, bst_max_key(x)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_max_key(_dryad_S0#0, $phys_ptr_cast(P#x, ^b_node)) == F#bst_max_key(_dryad_S1#1, $phys_ptr_cast(P#x, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#0, bst_reach(l)), old(_dryad_S0#0, bst_reach(x))), ==(old(_dryad_S0#0, bst_min_key(x)), old(_dryad_S1#1, bst_min_key(x)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node)), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_min_key(_dryad_S0#0, $phys_ptr_cast(P#x, ^b_node)) == F#bst_min_key(_dryad_S1#1, $phys_ptr_cast(P#x, ^b_node));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(bst(x1), &&(&&(&&(&&(&&(&&(&&(bst(*((x1->left))), bst(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(bst_reach(*((x1->left))), bst_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(bst_keys(*((x1->left))), bst_keys(*((x1->right))))))), @_vcc_oset_disjoint(bst_reach(*((x1->left))), bst_reach(*((x1->right))))), @_vcc_intset_disjoint(bst_keys(*((x1->left))), bst_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(bst_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), bst_min_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> F#bst($s, $phys_ptr_cast(SL#x1, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(bst_reach(x1), @_vcc_oset_union(@_vcc_oset_singleton(x1), @_vcc_oset_union(bst_reach(*((x1->left))), bst_reach(*((x1->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(SL#x1, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(SL#x1, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(bst_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(bst_keys(*((x1->left))), bst_keys(*((x1->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(SL#x1, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_max_key(x1), @\int_max(*((x1->key)), @\int_max(bst_max_key(*((x1->left))), bst_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(bst_max_key(x1), @\int_max(*((x1->key)), bst_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_max_key(x1), @\int_max(*((x1->key)), bst_max_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_min_key(x1), @\int_min(*((x1->key)), @\int_min(bst_min_key(*((x1->left))), bst_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(bst_min_key(x1), @\int_min(*((x1->key)), bst_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_min_key(x1), @\int_min(*((x1->key)), bst_min_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(bst(x0), &&(&&(&&(&&(&&(&&(&&(bst(*((x0->left))), bst(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(bst_reach(*((x0->left))), bst_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(bst_keys(*((x0->left))), bst_keys(*((x0->right))))))), @_vcc_oset_disjoint(bst_reach(*((x0->left))), bst_reach(*((x0->right))))), @_vcc_intset_disjoint(bst_keys(*((x0->left))), bst_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(bst_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), bst_min_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^b_node)) ==> F#bst($s, $phys_ptr_cast(SL#x0, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(bst_reach(x0), @_vcc_oset_union(@_vcc_oset_singleton(x0), @_vcc_oset_union(bst_reach(*((x0->left))), bst_reach(*((x0->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(SL#x0, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(SL#x0, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(bst_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(bst_keys(*((x0->left))), bst_keys(*((x0->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(SL#x0, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(bst_max_key(x0), @\int_max(*((x0->key)), @\int_max(bst_max_key(*((x0->left))), bst_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(bst_max_key(x0), @\int_max(*((x0->key)), bst_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(bst_max_key(x0), @\int_max(*((x0->key)), bst_max_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x0, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x0, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x0, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(bst_min_key(x0), @\int_min(*((x0->key)), @\int_min(bst_min_key(*((x0->left))), bst_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(bst_min_key(x0), @\int_min(*((x0->key)), bst_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(bst_min_key(x0), @\int_min(*((x0->key)), bst_min_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x0, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x0, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x0, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(bst(l), &&(&&(&&(&&(&&(&&(&&(bst(*((l->left))), bst(*((l->right)))), unchecked!(@_vcc_oset_in(l, @_vcc_oset_union(bst_reach(*((l->left))), bst_reach(*((l->right))))))), unchecked!(@_vcc_intset_in(*((l->key)), @_vcc_intset_union(bst_keys(*((l->left))), bst_keys(*((l->right))))))), @_vcc_oset_disjoint(bst_reach(*((l->left))), bst_reach(*((l->right))))), @_vcc_intset_disjoint(bst_keys(*((l->left))), bst_keys(*((l->right))))), ==>(@_vcc_ptr_neq_null(*((l->left))), <(bst_max_key(*((l->left))), *((l->key))))), ==>(@_vcc_ptr_neq_null(*((l->right))), <(*((l->key)), bst_min_key(*((l->right)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#l, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#l, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(bst_reach(l), @_vcc_oset_union(@_vcc_oset_singleton(l), @_vcc_oset_union(bst_reach(*((l->left))), bst_reach(*((l->right))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#l, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#l, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(bst_keys(l), @_vcc_intset_union(@_vcc_intset_singleton(*((l->key))), @_vcc_intset_union(bst_keys(*((l->left))), bst_keys(*((l->right))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#l, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((l->left))), @_vcc_ptr_neq_null(*((l->right)))), ==(bst_max_key(l), @\int_max(*((l->key)), @\int_max(bst_max_key(*((l->left))), bst_max_key(*((l->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((l->left))), @_vcc_ptr_eq_null(*((l->right)))), ==(bst_max_key(l), @\int_max(*((l->key)), bst_max_key(*((l->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((l->left))), @_vcc_ptr_neq_null(*((l->right)))), ==(bst_max_key(l), @\int_max(*((l->key)), bst_max_key(*((l->right)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((l->left))), @_vcc_ptr_neq_null(*((l->right)))), ==(bst_min_key(l), @\int_min(*((l->key)), @\int_min(bst_min_key(*((l->left))), bst_min_key(*((l->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((l->left))), @_vcc_ptr_eq_null(*((l->right)))), ==(bst_min_key(l), @\int_min(*((l->key)), bst_min_key(*((l->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((l->left))), @_vcc_ptr_neq_null(*((l->right)))), ==(bst_min_key(l), @\int_min(*((l->key)), bst_min_key(*((l->right)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r), ==(bst(r), &&(&&(&&(&&(&&(&&(&&(bst(*((r->left))), bst(*((r->right)))), unchecked!(@_vcc_oset_in(r, @_vcc_oset_union(bst_reach(*((r->left))), bst_reach(*((r->right))))))), unchecked!(@_vcc_intset_in(*((r->key)), @_vcc_intset_union(bst_keys(*((r->left))), bst_keys(*((r->right))))))), @_vcc_oset_disjoint(bst_reach(*((r->left))), bst_reach(*((r->right))))), @_vcc_intset_disjoint(bst_keys(*((r->left))), bst_keys(*((r->right))))), ==>(@_vcc_ptr_neq_null(*((r->left))), <(bst_max_key(*((r->left))), *((r->key))))), ==>(@_vcc_ptr_neq_null(*((r->right))), <(*((r->key)), bst_min_key(*((r->right)))))))); 
            assume $non_null($phys_ptr_cast(L#r, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#r, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#r, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r), ==(bst_reach(r), @_vcc_oset_union(@_vcc_oset_singleton(r), @_vcc_oset_union(bst_reach(*((r->left))), bst_reach(*((r->right))))))); 
            assume $non_null($phys_ptr_cast(L#r, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#r, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#r, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r), ==(bst_keys(r), @_vcc_intset_union(@_vcc_intset_singleton(*((r->key))), @_vcc_intset_union(bst_keys(*((r->left))), bst_keys(*((r->right))))))); 
            assume $non_null($phys_ptr_cast(L#r, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#r, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((r->left))), @_vcc_ptr_neq_null(*((r->right)))), ==(bst_max_key(r), @\int_max(*((r->key)), @\int_max(bst_max_key(*((r->left))), bst_max_key(*((r->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((r->left))), @_vcc_ptr_eq_null(*((r->right)))), ==(bst_max_key(r), @\int_max(*((r->key)), bst_max_key(*((r->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((r->left))), @_vcc_ptr_neq_null(*((r->right)))), ==(bst_max_key(r), @\int_max(*((r->key)), bst_max_key(*((r->right)))))))); 
            assume $non_null($phys_ptr_cast(L#r, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((r->left))), @_vcc_ptr_neq_null(*((r->right)))), ==(bst_min_key(r), @\int_min(*((r->key)), @\int_min(bst_min_key(*((r->left))), bst_min_key(*((r->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((r->left))), @_vcc_ptr_eq_null(*((r->right)))), ==(bst_min_key(r), @\int_min(*((r->key)), bst_min_key(*((r->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((r->left))), @_vcc_ptr_neq_null(*((r->right)))), ==(bst_min_key(r), @\int_min(*((r->key)), bst_min_key(*((r->right)))))))); 
            assume $non_null($phys_ptr_cast(L#r, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst(tmp), &&(&&(&&(&&(&&(&&(&&(bst(*((tmp->left))), bst(*((tmp->right)))), unchecked!(@_vcc_oset_in(tmp, @_vcc_oset_union(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))))), unchecked!(@_vcc_intset_in(*((tmp->key)), @_vcc_intset_union(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))))), @_vcc_oset_disjoint(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))), @_vcc_intset_disjoint(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))), ==>(@_vcc_ptr_neq_null(*((tmp->left))), <(bst_max_key(*((tmp->left))), *((tmp->key))))), ==>(@_vcc_ptr_neq_null(*((tmp->right))), <(*((tmp->key)), bst_min_key(*((tmp->right)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#tmp, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst_reach(tmp), @_vcc_oset_union(@_vcc_oset_singleton(tmp), @_vcc_oset_union(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#tmp, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#tmp, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst_keys(tmp), @_vcc_intset_union(@_vcc_intset_singleton(*((tmp->key))), @_vcc_intset_union(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#tmp, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), @\int_max(bst_max_key(*((tmp->left))), bst_max_key(*((tmp->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_eq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), bst_max_key(*((tmp->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), bst_max_key(*((tmp->right)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), @\int_min(bst_min_key(*((tmp->left))), bst_min_key(*((tmp->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_eq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), bst_min_key(*((tmp->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), bst_min_key(*((tmp->right)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#0, bst_reach(l)))), @_vcc_ptr_eq_pure(*((x1->left)), old(_dryad_S0#0, *((x1->left))))); 
            assume !$oset_in($phys_ptr_cast(SL#x1, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#0, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#0, bst_reach(l)))), @_vcc_ptr_eq_pure(*((x1->right)), old(_dryad_S0#0, *((x1->right))))); 
            assume !$oset_in($phys_ptr_cast(SL#x1, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#0, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S0#0, bst_reach(l)))), ==(*((x1->key)), old(_dryad_S0#0, *((x1->key))))); 
            assume !$oset_in($phys_ptr_cast(SL#x1, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)) == $rd_inv(_dryad_S0#0, b_node.key, $phys_ptr_cast(SL#x1, ^b_node));
            // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#0, bst_reach(l)))), @_vcc_ptr_eq_pure(*((x0->left)), old(_dryad_S0#0, *((x0->left))))); 
            assume !$oset_in($phys_ptr_cast(SL#x0, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#0, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#0, bst_reach(l)))), @_vcc_ptr_eq_pure(*((x0->right)), old(_dryad_S0#0, *((x0->right))))); 
            assume !$oset_in($phys_ptr_cast(SL#x0, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#0, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(x0, old(_dryad_S0#0, bst_reach(l)))), ==(*((x0->key)), old(_dryad_S0#0, *((x0->key))))); 
            assume !$oset_in($phys_ptr_cast(SL#x0, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)) == $rd_inv(_dryad_S0#0, b_node.key, $phys_ptr_cast(SL#x0, ^b_node));
            // assume ==>(!(@_vcc_oset_in(l, old(_dryad_S0#0, bst_reach(l)))), @_vcc_ptr_eq_pure(*((l->left)), old(_dryad_S0#0, *((l->left))))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#0, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(l, old(_dryad_S0#0, bst_reach(l)))), @_vcc_ptr_eq_pure(*((l->right)), old(_dryad_S0#0, *((l->right))))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#0, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(l, old(_dryad_S0#0, bst_reach(l)))), ==(*((l->key)), old(_dryad_S0#0, *((l->key))))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)) == $rd_inv(_dryad_S0#0, b_node.key, $phys_ptr_cast(L#l, ^b_node));
            // assume ==>(!(@_vcc_oset_in(r, old(_dryad_S0#0, bst_reach(l)))), @_vcc_ptr_eq_pure(*((r->left)), old(_dryad_S0#0, *((r->left))))); 
            assume !$oset_in($phys_ptr_cast(L#r, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#0, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(r, old(_dryad_S0#0, bst_reach(l)))), @_vcc_ptr_eq_pure(*((r->right)), old(_dryad_S0#0, *((r->right))))); 
            assume !$oset_in($phys_ptr_cast(L#r, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#0, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(r, old(_dryad_S0#0, bst_reach(l)))), ==(*((r->key)), old(_dryad_S0#0, *((r->key))))); 
            assume !$oset_in($phys_ptr_cast(L#r, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)) == $rd_inv(_dryad_S0#0, b_node.key, $phys_ptr_cast(L#r, ^b_node));
            // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#0, bst_reach(l)))), @_vcc_ptr_eq_pure(*((x->left)), old(_dryad_S0#0, *((x->left))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#0, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#0, bst_reach(l)))), @_vcc_ptr_eq_pure(*((x->right)), old(_dryad_S0#0, *((x->right))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#0, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#0, bst_reach(l)))), ==(*((x->key)), old(_dryad_S0#0, *((x->key))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#l, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) == $rd_inv(_dryad_S0#0, b_node.key, $phys_ptr_cast(P#x, ^b_node));
            // _math \state _dryad_S2#2; 
            // _dryad_S2#2 := @_vcc_current_state(@state); 
            _dryad_S2#2 := $current_state($s);
            // _math \state stmtexpr5#17; 
            // stmtexpr5#17 := _dryad_S2#2; 
            stmtexpr5#17 := _dryad_S2#2;
            // assert @prim_writes_check((x->left)); 
            assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(P#x, ^b_node), b_node.left));
            // *(x->left) := tmp; 
            call $write_int(b_node.left, $phys_ptr_cast(P#x, ^b_node), $ptr_to_int($phys_ptr_cast(L#tmp, ^b_node)));
            assume $full_stop_ext(#tok$3^33.5, $s);
            // _math \state _dryad_S3#3; 
            // _dryad_S3#3 := @_vcc_current_state(@state); 
            _dryad_S3#3 := $current_state($s);
            // _math \state stmtexpr6#18; 
            // stmtexpr6#18 := _dryad_S3#3; 
            stmtexpr6#18 := _dryad_S3#3;
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(*((x->right)))))), ==(old(_dryad_S2#2, bst(*((x->right)))), old(_dryad_S3#3, bst(*((x->right)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) ==> F#bst(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) == F#bst(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(*((x->right)))))), ==(old(_dryad_S2#2, bst_reach(*((x->right)))), old(_dryad_S3#3, bst_reach(*((x->right)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) ==> F#bst_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) == F#bst_reach(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(*((x->right)))))), ==(old(_dryad_S2#2, bst_keys(*((x->right)))), old(_dryad_S3#3, bst_keys(*((x->right)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) ==> F#bst_keys(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) == F#bst_keys(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(*((x->right)))))), ==(old(_dryad_S2#2, bst_max_key(*((x->right)))), old(_dryad_S3#3, bst_max_key(*((x->right)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) ==> F#bst_max_key(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) == F#bst_max_key(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(*((x->right)))))), ==(old(_dryad_S2#2, bst_min_key(*((x->right)))), old(_dryad_S3#3, bst_min_key(*((x->right)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) ==> F#bst_min_key(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) == F#bst_min_key(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(x1)))), ==(old(_dryad_S2#2, bst(x1)), old(_dryad_S3#3, bst(x1)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst(_dryad_S3#3, $phys_ptr_cast(SL#x1, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(x1)))), ==(old(_dryad_S2#2, bst_reach(x1)), old(_dryad_S3#3, bst_reach(x1)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_reach(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_reach(_dryad_S3#3, $phys_ptr_cast(SL#x1, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(x1)))), ==(old(_dryad_S2#2, bst_keys(x1)), old(_dryad_S3#3, bst_keys(x1)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_keys(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_keys(_dryad_S3#3, $phys_ptr_cast(SL#x1, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(x1)))), ==(old(_dryad_S2#2, bst_max_key(x1)), old(_dryad_S3#3, bst_max_key(x1)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_max_key(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_max_key(_dryad_S3#3, $phys_ptr_cast(SL#x1, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(x1)))), ==(old(_dryad_S2#2, bst_min_key(x1)), old(_dryad_S3#3, bst_min_key(x1)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_min_key(_dryad_S2#2, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_min_key(_dryad_S3#3, $phys_ptr_cast(SL#x1, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(x0)))), ==(old(_dryad_S2#2, bst(x0)), old(_dryad_S3#3, bst(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^b_node))) ==> F#bst(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^b_node)) == F#bst(_dryad_S3#3, $phys_ptr_cast(SL#x0, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(x0)))), ==(old(_dryad_S2#2, bst_reach(x0)), old(_dryad_S3#3, bst_reach(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^b_node))) ==> F#bst_reach(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^b_node)) == F#bst_reach(_dryad_S3#3, $phys_ptr_cast(SL#x0, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(x0)))), ==(old(_dryad_S2#2, bst_keys(x0)), old(_dryad_S3#3, bst_keys(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^b_node))) ==> F#bst_keys(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^b_node)) == F#bst_keys(_dryad_S3#3, $phys_ptr_cast(SL#x0, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(x0)))), ==(old(_dryad_S2#2, bst_max_key(x0)), old(_dryad_S3#3, bst_max_key(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^b_node))) ==> F#bst_max_key(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^b_node)) == F#bst_max_key(_dryad_S3#3, $phys_ptr_cast(SL#x0, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(x0)))), ==(old(_dryad_S2#2, bst_min_key(x0)), old(_dryad_S3#3, bst_min_key(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^b_node))) ==> F#bst_min_key(_dryad_S2#2, $phys_ptr_cast(SL#x0, ^b_node)) == F#bst_min_key(_dryad_S3#3, $phys_ptr_cast(SL#x0, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(l)))), ==(old(_dryad_S2#2, bst(l)), old(_dryad_S3#3, bst(l)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#l, ^b_node))) ==> F#bst(_dryad_S2#2, $phys_ptr_cast(L#l, ^b_node)) == F#bst(_dryad_S3#3, $phys_ptr_cast(L#l, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(l)))), ==(old(_dryad_S2#2, bst_reach(l)), old(_dryad_S3#3, bst_reach(l)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#l, ^b_node))) ==> F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#l, ^b_node)) == F#bst_reach(_dryad_S3#3, $phys_ptr_cast(L#l, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(l)))), ==(old(_dryad_S2#2, bst_keys(l)), old(_dryad_S3#3, bst_keys(l)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#l, ^b_node))) ==> F#bst_keys(_dryad_S2#2, $phys_ptr_cast(L#l, ^b_node)) == F#bst_keys(_dryad_S3#3, $phys_ptr_cast(L#l, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(l)))), ==(old(_dryad_S2#2, bst_max_key(l)), old(_dryad_S3#3, bst_max_key(l)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#l, ^b_node))) ==> F#bst_max_key(_dryad_S2#2, $phys_ptr_cast(L#l, ^b_node)) == F#bst_max_key(_dryad_S3#3, $phys_ptr_cast(L#l, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(l)))), ==(old(_dryad_S2#2, bst_min_key(l)), old(_dryad_S3#3, bst_min_key(l)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#l, ^b_node))) ==> F#bst_min_key(_dryad_S2#2, $phys_ptr_cast(L#l, ^b_node)) == F#bst_min_key(_dryad_S3#3, $phys_ptr_cast(L#l, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(r)))), ==(old(_dryad_S2#2, bst(r)), old(_dryad_S3#3, bst(r)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#r, ^b_node))) ==> F#bst(_dryad_S2#2, $phys_ptr_cast(L#r, ^b_node)) == F#bst(_dryad_S3#3, $phys_ptr_cast(L#r, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(r)))), ==(old(_dryad_S2#2, bst_reach(r)), old(_dryad_S3#3, bst_reach(r)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#r, ^b_node))) ==> F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#r, ^b_node)) == F#bst_reach(_dryad_S3#3, $phys_ptr_cast(L#r, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(r)))), ==(old(_dryad_S2#2, bst_keys(r)), old(_dryad_S3#3, bst_keys(r)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#r, ^b_node))) ==> F#bst_keys(_dryad_S2#2, $phys_ptr_cast(L#r, ^b_node)) == F#bst_keys(_dryad_S3#3, $phys_ptr_cast(L#r, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(r)))), ==(old(_dryad_S2#2, bst_max_key(r)), old(_dryad_S3#3, bst_max_key(r)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#r, ^b_node))) ==> F#bst_max_key(_dryad_S2#2, $phys_ptr_cast(L#r, ^b_node)) == F#bst_max_key(_dryad_S3#3, $phys_ptr_cast(L#r, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(r)))), ==(old(_dryad_S2#2, bst_min_key(r)), old(_dryad_S3#3, bst_min_key(r)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#r, ^b_node))) ==> F#bst_min_key(_dryad_S2#2, $phys_ptr_cast(L#r, ^b_node)) == F#bst_min_key(_dryad_S3#3, $phys_ptr_cast(L#r, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(tmp)))), ==(old(_dryad_S2#2, bst(tmp)), old(_dryad_S3#3, bst(tmp)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^b_node))) ==> F#bst(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^b_node)) == F#bst(_dryad_S3#3, $phys_ptr_cast(L#tmp, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(tmp)))), ==(old(_dryad_S2#2, bst_reach(tmp)), old(_dryad_S3#3, bst_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^b_node))) ==> F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^b_node)) == F#bst_reach(_dryad_S3#3, $phys_ptr_cast(L#tmp, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(tmp)))), ==(old(_dryad_S2#2, bst_keys(tmp)), old(_dryad_S3#3, bst_keys(tmp)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^b_node))) ==> F#bst_keys(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^b_node)) == F#bst_keys(_dryad_S3#3, $phys_ptr_cast(L#tmp, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(tmp)))), ==(old(_dryad_S2#2, bst_max_key(tmp)), old(_dryad_S3#3, bst_max_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^b_node))) ==> F#bst_max_key(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^b_node)) == F#bst_max_key(_dryad_S3#3, $phys_ptr_cast(L#tmp, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#2, bst_reach(tmp)))), ==(old(_dryad_S2#2, bst_min_key(tmp)), old(_dryad_S3#3, bst_min_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^b_node))) ==> F#bst_min_key(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^b_node)) == F#bst_min_key(_dryad_S3#3, $phys_ptr_cast(L#tmp, ^b_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), @_vcc_ptr_eq_pure(*((x1->left)), old(_dryad_S2#2, *((x1->left))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(SL#x1, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#2, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), @_vcc_ptr_eq_pure(*((x1->right)), old(_dryad_S2#2, *((x1->right))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(SL#x1, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#2, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), ==(*((x1->key)), old(_dryad_S2#2, *((x1->key))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(SL#x1, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)) == $rd_inv(_dryad_S2#2, b_node.key, $phys_ptr_cast(SL#x1, ^b_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), @_vcc_ptr_eq_pure(*((x0->left)), old(_dryad_S2#2, *((x0->left))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(SL#x0, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#2, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), @_vcc_ptr_eq_pure(*((x0->right)), old(_dryad_S2#2, *((x0->right))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(SL#x0, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#2, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x0)), ==(*((x0->key)), old(_dryad_S2#2, *((x0->key))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(SL#x0, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)) == $rd_inv(_dryad_S2#2, b_node.key, $phys_ptr_cast(SL#x0, ^b_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, l)), @_vcc_ptr_eq_pure(*((l->left)), old(_dryad_S2#2, *((l->left))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#l, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#2, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, l)), @_vcc_ptr_eq_pure(*((l->right)), old(_dryad_S2#2, *((l->right))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#l, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#2, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, l)), ==(*((l->key)), old(_dryad_S2#2, *((l->key))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#l, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)) == $rd_inv(_dryad_S2#2, b_node.key, $phys_ptr_cast(L#l, ^b_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, r)), @_vcc_ptr_eq_pure(*((r->left)), old(_dryad_S2#2, *((r->left))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#r, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#2, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, r)), @_vcc_ptr_eq_pure(*((r->right)), old(_dryad_S2#2, *((r->right))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#r, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#2, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, r)), ==(*((r->key)), old(_dryad_S2#2, *((r->key))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#r, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)) == $rd_inv(_dryad_S2#2, b_node.key, $phys_ptr_cast(L#r, ^b_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, tmp)), @_vcc_ptr_eq_pure(*((tmp->left)), old(_dryad_S2#2, *((tmp->left))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#tmp, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#2, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, tmp)), @_vcc_ptr_eq_pure(*((tmp->right)), old(_dryad_S2#2, *((tmp->right))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#tmp, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#2, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, tmp)), ==(*((tmp->key)), old(_dryad_S2#2, *((tmp->key))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#tmp, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)) == $rd_inv(_dryad_S2#2, b_node.key, $phys_ptr_cast(L#tmp, ^b_node));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(bst(x1), &&(&&(&&(&&(&&(&&(&&(bst(*((x1->left))), bst(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(bst_reach(*((x1->left))), bst_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(bst_keys(*((x1->left))), bst_keys(*((x1->right))))))), @_vcc_oset_disjoint(bst_reach(*((x1->left))), bst_reach(*((x1->right))))), @_vcc_intset_disjoint(bst_keys(*((x1->left))), bst_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(bst_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), bst_min_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> F#bst($s, $phys_ptr_cast(SL#x1, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(bst_reach(x1), @_vcc_oset_union(@_vcc_oset_singleton(x1), @_vcc_oset_union(bst_reach(*((x1->left))), bst_reach(*((x1->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(SL#x1, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(SL#x1, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), ==(bst_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(bst_keys(*((x1->left))), bst_keys(*((x1->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(SL#x1, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_max_key(x1), @\int_max(*((x1->key)), @\int_max(bst_max_key(*((x1->left))), bst_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(bst_max_key(x1), @\int_max(*((x1->key)), bst_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_max_key(x1), @\int_max(*((x1->key)), bst_max_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_min_key(x1), @\int_min(*((x1->key)), @\int_min(bst_min_key(*((x1->left))), bst_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(bst_min_key(x1), @\int_min(*((x1->key)), bst_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_min_key(x1), @\int_min(*((x1->key)), bst_min_key(*((x1->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(bst(x0), &&(&&(&&(&&(&&(&&(&&(bst(*((x0->left))), bst(*((x0->right)))), unchecked!(@_vcc_oset_in(x0, @_vcc_oset_union(bst_reach(*((x0->left))), bst_reach(*((x0->right))))))), unchecked!(@_vcc_intset_in(*((x0->key)), @_vcc_intset_union(bst_keys(*((x0->left))), bst_keys(*((x0->right))))))), @_vcc_oset_disjoint(bst_reach(*((x0->left))), bst_reach(*((x0->right))))), @_vcc_intset_disjoint(bst_keys(*((x0->left))), bst_keys(*((x0->right))))), ==>(@_vcc_ptr_neq_null(*((x0->left))), <(bst_max_key(*((x0->left))), *((x0->key))))), ==>(@_vcc_ptr_neq_null(*((x0->right))), <(*((x0->key)), bst_min_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^b_node)) ==> F#bst($s, $phys_ptr_cast(SL#x0, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(SL#x0, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(bst_reach(x0), @_vcc_oset_union(@_vcc_oset_singleton(x0), @_vcc_oset_union(bst_reach(*((x0->left))), bst_reach(*((x0->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(SL#x0, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(SL#x0, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), ==(bst_keys(x0), @_vcc_intset_union(@_vcc_intset_singleton(*((x0->key))), @_vcc_intset_union(bst_keys(*((x0->left))), bst_keys(*((x0->right))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(SL#x0, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(bst_max_key(x0), @\int_max(*((x0->key)), @\int_max(bst_max_key(*((x0->left))), bst_max_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(bst_max_key(x0), @\int_max(*((x0->key)), bst_max_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(bst_max_key(x0), @\int_max(*((x0->key)), bst_max_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x0, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x0, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x0, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(bst_min_key(x0), @\int_min(*((x0->key)), @\int_min(bst_min_key(*((x0->left))), bst_min_key(*((x0->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0->left))), @_vcc_ptr_eq_null(*((x0->right)))), ==(bst_min_key(x0), @\int_min(*((x0->key)), bst_min_key(*((x0->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0->left))), @_vcc_ptr_neq_null(*((x0->right)))), ==(bst_min_key(x0), @\int_min(*((x0->key)), bst_min_key(*((x0->right)))))))); 
            assume $non_null($phys_ptr_cast(SL#x0, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x0, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x0, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x0, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x0, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x0, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(bst(l), &&(&&(&&(&&(&&(&&(&&(bst(*((l->left))), bst(*((l->right)))), unchecked!(@_vcc_oset_in(l, @_vcc_oset_union(bst_reach(*((l->left))), bst_reach(*((l->right))))))), unchecked!(@_vcc_intset_in(*((l->key)), @_vcc_intset_union(bst_keys(*((l->left))), bst_keys(*((l->right))))))), @_vcc_oset_disjoint(bst_reach(*((l->left))), bst_reach(*((l->right))))), @_vcc_intset_disjoint(bst_keys(*((l->left))), bst_keys(*((l->right))))), ==>(@_vcc_ptr_neq_null(*((l->left))), <(bst_max_key(*((l->left))), *((l->key))))), ==>(@_vcc_ptr_neq_null(*((l->right))), <(*((l->key)), bst_min_key(*((l->right)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#l, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#l, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(bst_reach(l), @_vcc_oset_union(@_vcc_oset_singleton(l), @_vcc_oset_union(bst_reach(*((l->left))), bst_reach(*((l->right))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#l, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#l, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(bst_keys(l), @_vcc_intset_union(@_vcc_intset_singleton(*((l->key))), @_vcc_intset_union(bst_keys(*((l->left))), bst_keys(*((l->right))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#l, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((l->left))), @_vcc_ptr_neq_null(*((l->right)))), ==(bst_max_key(l), @\int_max(*((l->key)), @\int_max(bst_max_key(*((l->left))), bst_max_key(*((l->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((l->left))), @_vcc_ptr_eq_null(*((l->right)))), ==(bst_max_key(l), @\int_max(*((l->key)), bst_max_key(*((l->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((l->left))), @_vcc_ptr_neq_null(*((l->right)))), ==(bst_max_key(l), @\int_max(*((l->key)), bst_max_key(*((l->right)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((l->left))), @_vcc_ptr_neq_null(*((l->right)))), ==(bst_min_key(l), @\int_min(*((l->key)), @\int_min(bst_min_key(*((l->left))), bst_min_key(*((l->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((l->left))), @_vcc_ptr_eq_null(*((l->right)))), ==(bst_min_key(l), @\int_min(*((l->key)), bst_min_key(*((l->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((l->left))), @_vcc_ptr_neq_null(*((l->right)))), ==(bst_min_key(l), @\int_min(*((l->key)), bst_min_key(*((l->right)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#l, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#l, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#l, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#l, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r), ==(bst(r), &&(&&(&&(&&(&&(&&(&&(bst(*((r->left))), bst(*((r->right)))), unchecked!(@_vcc_oset_in(r, @_vcc_oset_union(bst_reach(*((r->left))), bst_reach(*((r->right))))))), unchecked!(@_vcc_intset_in(*((r->key)), @_vcc_intset_union(bst_keys(*((r->left))), bst_keys(*((r->right))))))), @_vcc_oset_disjoint(bst_reach(*((r->left))), bst_reach(*((r->right))))), @_vcc_intset_disjoint(bst_keys(*((r->left))), bst_keys(*((r->right))))), ==>(@_vcc_ptr_neq_null(*((r->left))), <(bst_max_key(*((r->left))), *((r->key))))), ==>(@_vcc_ptr_neq_null(*((r->right))), <(*((r->key)), bst_min_key(*((r->right)))))))); 
            assume $non_null($phys_ptr_cast(L#r, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#r, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#r, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r), ==(bst_reach(r), @_vcc_oset_union(@_vcc_oset_singleton(r), @_vcc_oset_union(bst_reach(*((r->left))), bst_reach(*((r->right))))))); 
            assume $non_null($phys_ptr_cast(L#r, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#r, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#r, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r), ==(bst_keys(r), @_vcc_intset_union(@_vcc_intset_singleton(*((r->key))), @_vcc_intset_union(bst_keys(*((r->left))), bst_keys(*((r->right))))))); 
            assume $non_null($phys_ptr_cast(L#r, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#r, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((r->left))), @_vcc_ptr_neq_null(*((r->right)))), ==(bst_max_key(r), @\int_max(*((r->key)), @\int_max(bst_max_key(*((r->left))), bst_max_key(*((r->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((r->left))), @_vcc_ptr_eq_null(*((r->right)))), ==(bst_max_key(r), @\int_max(*((r->key)), bst_max_key(*((r->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((r->left))), @_vcc_ptr_neq_null(*((r->right)))), ==(bst_max_key(r), @\int_max(*((r->key)), bst_max_key(*((r->right)))))))); 
            assume $non_null($phys_ptr_cast(L#r, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((r->left))), @_vcc_ptr_neq_null(*((r->right)))), ==(bst_min_key(r), @\int_min(*((r->key)), @\int_min(bst_min_key(*((r->left))), bst_min_key(*((r->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((r->left))), @_vcc_ptr_eq_null(*((r->right)))), ==(bst_min_key(r), @\int_min(*((r->key)), bst_min_key(*((r->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((r->left))), @_vcc_ptr_neq_null(*((r->right)))), ==(bst_min_key(r), @\int_min(*((r->key)), bst_min_key(*((r->right)))))))); 
            assume $non_null($phys_ptr_cast(L#r, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#r, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#r, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#r, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#r, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst(tmp), &&(&&(&&(&&(&&(&&(&&(bst(*((tmp->left))), bst(*((tmp->right)))), unchecked!(@_vcc_oset_in(tmp, @_vcc_oset_union(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))))), unchecked!(@_vcc_intset_in(*((tmp->key)), @_vcc_intset_union(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))))), @_vcc_oset_disjoint(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))), @_vcc_intset_disjoint(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))), ==>(@_vcc_ptr_neq_null(*((tmp->left))), <(bst_max_key(*((tmp->left))), *((tmp->key))))), ==>(@_vcc_ptr_neq_null(*((tmp->right))), <(*((tmp->key)), bst_min_key(*((tmp->right)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#tmp, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst_reach(tmp), @_vcc_oset_union(@_vcc_oset_singleton(tmp), @_vcc_oset_union(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#tmp, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#tmp, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst_keys(tmp), @_vcc_intset_union(@_vcc_intset_singleton(*((tmp->key))), @_vcc_intset_union(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#tmp, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), @\int_max(bst_max_key(*((tmp->left))), bst_max_key(*((tmp->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_eq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), bst_max_key(*((tmp->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), bst_max_key(*((tmp->right)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), @\int_min(bst_min_key(*((tmp->left))), bst_min_key(*((tmp->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_eq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), bst_min_key(*((tmp->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), bst_min_key(*((tmp->right)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst(tmp), &&(&&(&&(&&(&&(&&(&&(bst(*((tmp->left))), bst(*((tmp->right)))), unchecked!(@_vcc_oset_in(tmp, @_vcc_oset_union(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))))), unchecked!(@_vcc_intset_in(*((tmp->key)), @_vcc_intset_union(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))))), @_vcc_oset_disjoint(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))), @_vcc_intset_disjoint(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))), ==>(@_vcc_ptr_neq_null(*((tmp->left))), <(bst_max_key(*((tmp->left))), *((tmp->key))))), ==>(@_vcc_ptr_neq_null(*((tmp->right))), <(*((tmp->key)), bst_min_key(*((tmp->right)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#tmp, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst_reach(tmp), @_vcc_oset_union(@_vcc_oset_singleton(tmp), @_vcc_oset_union(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#tmp, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#tmp, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst_keys(tmp), @_vcc_intset_union(@_vcc_intset_singleton(*((tmp->key))), @_vcc_intset_union(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#tmp, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), @\int_max(bst_max_key(*((tmp->left))), bst_max_key(*((tmp->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_eq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), bst_max_key(*((tmp->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), bst_max_key(*((tmp->right)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), @\int_min(bst_min_key(*((tmp->left))), bst_min_key(*((tmp->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_eq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), bst_min_key(*((tmp->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), bst_min_key(*((tmp->right)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
            // return x; 
            $result := $phys_ptr_cast(P#x, ^b_node);
            assume true;
            assert $position_marker();
            goto #exit;
        }
        else
        {
          anon3:
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // struct b_node* tmp#4; 
            // struct b_node* r#5; 
            // struct b_node* l#6; 
            // struct b_node* x0#7; 
            // x0#7 := x; 
            x0#7 := $phys_ptr_cast(P#x, ^b_node);
            // struct b_node* stmtexpr0#19; 
            // stmtexpr0#19 := x0#7; 
            stmtexpr0#19 := $phys_ptr_cast(x0#7, ^b_node);
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assert @reads_check_normal((x->left)); 
            assert $thread_local($s, $phys_ptr_cast(P#x, ^b_node));
            // l#6 := *((x->left)); 
            l#6 := $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node);
            // assume ==>(@_vcc_ptr_neq_null(l#6), ==(bst(l#6), &&(&&(&&(&&(&&(&&(&&(bst(*((l#6->left))), bst(*((l#6->right)))), unchecked!(@_vcc_oset_in(l#6, @_vcc_oset_union(bst_reach(*((l#6->left))), bst_reach(*((l#6->right))))))), unchecked!(@_vcc_intset_in(*((l#6->key)), @_vcc_intset_union(bst_keys(*((l#6->left))), bst_keys(*((l#6->right))))))), @_vcc_oset_disjoint(bst_reach(*((l#6->left))), bst_reach(*((l#6->right))))), @_vcc_intset_disjoint(bst_keys(*((l#6->left))), bst_keys(*((l#6->right))))), ==>(@_vcc_ptr_neq_null(*((l#6->left))), <(bst_max_key(*((l#6->left))), *((l#6->key))))), ==>(@_vcc_ptr_neq_null(*((l#6->right))), <(*((l#6->key)), bst_min_key(*((l#6->right)))))))); 
            assume $non_null($phys_ptr_cast(l#6, ^b_node)) ==> F#bst($s, $phys_ptr_cast(l#6, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(l#6, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l#6), ==(bst_reach(l#6), @_vcc_oset_union(@_vcc_oset_singleton(l#6), @_vcc_oset_union(bst_reach(*((l#6->left))), bst_reach(*((l#6->right))))))); 
            assume $non_null($phys_ptr_cast(l#6, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(l#6, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(l#6, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l#6), ==(bst_keys(l#6), @_vcc_intset_union(@_vcc_intset_singleton(*((l#6->key))), @_vcc_intset_union(bst_keys(*((l#6->left))), bst_keys(*((l#6->right))))))); 
            assume $non_null($phys_ptr_cast(l#6, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(l#6, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((l#6->left))), @_vcc_ptr_neq_null(*((l#6->right)))), ==(bst_max_key(l#6), @\int_max(*((l#6->key)), @\int_max(bst_max_key(*((l#6->left))), bst_max_key(*((l#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((l#6->left))), @_vcc_ptr_eq_null(*((l#6->right)))), ==(bst_max_key(l#6), @\int_max(*((l#6->key)), bst_max_key(*((l#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((l#6->left))), @_vcc_ptr_neq_null(*((l#6->right)))), ==(bst_max_key(l#6), @\int_max(*((l#6->key)), bst_max_key(*((l#6->right)))))))); 
            assume $non_null($phys_ptr_cast(l#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((l#6->left))), @_vcc_ptr_neq_null(*((l#6->right)))), ==(bst_min_key(l#6), @\int_min(*((l#6->key)), @\int_min(bst_min_key(*((l#6->left))), bst_min_key(*((l#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((l#6->left))), @_vcc_ptr_eq_null(*((l#6->right)))), ==(bst_min_key(l#6), @\int_min(*((l#6->key)), bst_min_key(*((l#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((l#6->left))), @_vcc_ptr_neq_null(*((l#6->right)))), ==(bst_min_key(l#6), @\int_min(*((l#6->key)), bst_min_key(*((l#6->right)))))))); 
            assume $non_null($phys_ptr_cast(l#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // struct b_node* x1#8; 
            // x1#8 := x; 
            x1#8 := $phys_ptr_cast(P#x, ^b_node);
            // struct b_node* stmtexpr1#20; 
            // stmtexpr1#20 := x1#8; 
            stmtexpr1#20 := $phys_ptr_cast(x1#8, ^b_node);
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assert @reads_check_normal((x->right)); 
            assert $thread_local($s, $phys_ptr_cast(P#x, ^b_node));
            // r#5 := *((x->right)); 
            r#5 := $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node);
            // assume ==>(@_vcc_ptr_neq_null(r#5), ==(bst(r#5), &&(&&(&&(&&(&&(&&(&&(bst(*((r#5->left))), bst(*((r#5->right)))), unchecked!(@_vcc_oset_in(r#5, @_vcc_oset_union(bst_reach(*((r#5->left))), bst_reach(*((r#5->right))))))), unchecked!(@_vcc_intset_in(*((r#5->key)), @_vcc_intset_union(bst_keys(*((r#5->left))), bst_keys(*((r#5->right))))))), @_vcc_oset_disjoint(bst_reach(*((r#5->left))), bst_reach(*((r#5->right))))), @_vcc_intset_disjoint(bst_keys(*((r#5->left))), bst_keys(*((r#5->right))))), ==>(@_vcc_ptr_neq_null(*((r#5->left))), <(bst_max_key(*((r#5->left))), *((r#5->key))))), ==>(@_vcc_ptr_neq_null(*((r#5->right))), <(*((r#5->key)), bst_min_key(*((r#5->right)))))))); 
            assume $non_null($phys_ptr_cast(r#5, ^b_node)) ==> F#bst($s, $phys_ptr_cast(r#5, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(r#5, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r#5), ==(bst_reach(r#5), @_vcc_oset_union(@_vcc_oset_singleton(r#5), @_vcc_oset_union(bst_reach(*((r#5->left))), bst_reach(*((r#5->right))))))); 
            assume $non_null($phys_ptr_cast(r#5, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(r#5, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(r#5, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r#5), ==(bst_keys(r#5), @_vcc_intset_union(@_vcc_intset_singleton(*((r#5->key))), @_vcc_intset_union(bst_keys(*((r#5->left))), bst_keys(*((r#5->right))))))); 
            assume $non_null($phys_ptr_cast(r#5, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(r#5, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r#5), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((r#5->left))), @_vcc_ptr_neq_null(*((r#5->right)))), ==(bst_max_key(r#5), @\int_max(*((r#5->key)), @\int_max(bst_max_key(*((r#5->left))), bst_max_key(*((r#5->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((r#5->left))), @_vcc_ptr_eq_null(*((r#5->right)))), ==(bst_max_key(r#5), @\int_max(*((r#5->key)), bst_max_key(*((r#5->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((r#5->left))), @_vcc_ptr_neq_null(*((r#5->right)))), ==(bst_max_key(r#5), @\int_max(*((r#5->key)), bst_max_key(*((r#5->right)))))))); 
            assume $non_null($phys_ptr_cast(r#5, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r#5), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((r#5->left))), @_vcc_ptr_neq_null(*((r#5->right)))), ==(bst_min_key(r#5), @\int_min(*((r#5->key)), @\int_min(bst_min_key(*((r#5->left))), bst_min_key(*((r#5->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((r#5->left))), @_vcc_ptr_eq_null(*((r#5->right)))), ==(bst_min_key(r#5), @\int_min(*((r#5->key)), bst_min_key(*((r#5->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((r#5->left))), @_vcc_ptr_neq_null(*((r#5->right)))), ==(bst_min_key(r#5), @\int_min(*((r#5->key)), bst_min_key(*((r#5->right)))))))); 
            assume $non_null($phys_ptr_cast(r#5, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // _math \state _dryad_S0#9; 
            // _dryad_S0#9 := @_vcc_current_state(@state); 
            _dryad_S0#9 := $current_state($s);
            // _math \state stmtexpr2#21; 
            // stmtexpr2#21 := _dryad_S0#9; 
            stmtexpr2#21 := _dryad_S0#9;
            // non-pure function
            // tmp#4 := bst_insert_rec(r#5, k); 
            call tmp#4 := bst_insert_rec($phys_ptr_cast(r#5, ^b_node), P#k);
            assume $full_stop_ext(#tok$3^39.19, $s);
            // _math \state _dryad_S1#10; 
            // _dryad_S1#10 := @_vcc_current_state(@state); 
            _dryad_S1#10 := $current_state($s);
            // _math \state stmtexpr3#22; 
            // stmtexpr3#22 := _dryad_S1#10; 
            stmtexpr3#22 := _dryad_S1#10;
            // assume @_vcc_oset_disjoint(bst_reach(tmp#4), @_vcc_oset_diff(_dryad_G1, old(_dryad_S0#9, bst_reach(r#5)))); 
            assume $oset_disjoint(F#bst_reach($s, $phys_ptr_cast(tmp#4, ^b_node)), $oset_diff(SL#_dryad_G1, F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))));
            // _math \oset res_bst_reach#2; 
            // res_bst_reach#2 := bst_reach(tmp#4); 
            call res_bst_reach#2 := bst_reach($phys_ptr_cast(tmp#4, ^b_node));
            assume $full_stop_ext(#tok$4^0.0, $s);
            // _dryad_G1 := @_vcc_oset_union(res_bst_reach#2, @_vcc_oset_diff(_dryad_G1, pure(old(_dryad_S0#9, bst_reach(r#5))))); 
            SL#_dryad_G1 := $oset_union(res_bst_reach#2, $oset_diff(SL#_dryad_G1, F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))));
            // _math \oset stmtexpr4#23; 
            // stmtexpr4#23 := _dryad_G1; 
            stmtexpr4#23 := SL#_dryad_G1;
            // assume ==(glob_reach(), _dryad_G1); 
            assume F#glob_reach() == SL#_dryad_G1;
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(x1#8))), ==(old(_dryad_S0#9, bst(x1#8)), old(_dryad_S1#10, bst(x1#8)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(x1#8, ^b_node))) ==> F#bst(_dryad_S0#9, $phys_ptr_cast(x1#8, ^b_node)) == F#bst(_dryad_S1#10, $phys_ptr_cast(x1#8, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(x1#8))), ==(old(_dryad_S0#9, bst_reach(x1#8)), old(_dryad_S1#10, bst_reach(x1#8)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(x1#8, ^b_node))) ==> F#bst_reach(_dryad_S0#9, $phys_ptr_cast(x1#8, ^b_node)) == F#bst_reach(_dryad_S1#10, $phys_ptr_cast(x1#8, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(x1#8))), ==(old(_dryad_S0#9, bst_keys(x1#8)), old(_dryad_S1#10, bst_keys(x1#8)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(x1#8, ^b_node))) ==> F#bst_keys(_dryad_S0#9, $phys_ptr_cast(x1#8, ^b_node)) == F#bst_keys(_dryad_S1#10, $phys_ptr_cast(x1#8, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(x1#8))), ==(old(_dryad_S0#9, bst_max_key(x1#8)), old(_dryad_S1#10, bst_max_key(x1#8)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(x1#8, ^b_node))) ==> F#bst_max_key(_dryad_S0#9, $phys_ptr_cast(x1#8, ^b_node)) == F#bst_max_key(_dryad_S1#10, $phys_ptr_cast(x1#8, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(x1#8))), ==(old(_dryad_S0#9, bst_min_key(x1#8)), old(_dryad_S1#10, bst_min_key(x1#8)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(x1#8, ^b_node))) ==> F#bst_min_key(_dryad_S0#9, $phys_ptr_cast(x1#8, ^b_node)) == F#bst_min_key(_dryad_S1#10, $phys_ptr_cast(x1#8, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(x0#7))), ==(old(_dryad_S0#9, bst(x0#7)), old(_dryad_S1#10, bst(x0#7)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst(_dryad_S0#9, $phys_ptr_cast(x0#7, ^b_node)) == F#bst(_dryad_S1#10, $phys_ptr_cast(x0#7, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(x0#7))), ==(old(_dryad_S0#9, bst_reach(x0#7)), old(_dryad_S1#10, bst_reach(x0#7)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_reach(_dryad_S0#9, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_reach(_dryad_S1#10, $phys_ptr_cast(x0#7, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(x0#7))), ==(old(_dryad_S0#9, bst_keys(x0#7)), old(_dryad_S1#10, bst_keys(x0#7)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_keys(_dryad_S0#9, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_keys(_dryad_S1#10, $phys_ptr_cast(x0#7, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(x0#7))), ==(old(_dryad_S0#9, bst_max_key(x0#7)), old(_dryad_S1#10, bst_max_key(x0#7)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_max_key(_dryad_S0#9, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_max_key(_dryad_S1#10, $phys_ptr_cast(x0#7, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(x0#7))), ==(old(_dryad_S0#9, bst_min_key(x0#7)), old(_dryad_S1#10, bst_min_key(x0#7)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_min_key(_dryad_S0#9, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_min_key(_dryad_S1#10, $phys_ptr_cast(x0#7, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(l#6))), ==(old(_dryad_S0#9, bst(l#6)), old(_dryad_S1#10, bst(l#6)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(l#6, ^b_node))) ==> F#bst(_dryad_S0#9, $phys_ptr_cast(l#6, ^b_node)) == F#bst(_dryad_S1#10, $phys_ptr_cast(l#6, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(l#6))), ==(old(_dryad_S0#9, bst_reach(l#6)), old(_dryad_S1#10, bst_reach(l#6)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(l#6, ^b_node))) ==> F#bst_reach(_dryad_S0#9, $phys_ptr_cast(l#6, ^b_node)) == F#bst_reach(_dryad_S1#10, $phys_ptr_cast(l#6, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(l#6))), ==(old(_dryad_S0#9, bst_keys(l#6)), old(_dryad_S1#10, bst_keys(l#6)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(l#6, ^b_node))) ==> F#bst_keys(_dryad_S0#9, $phys_ptr_cast(l#6, ^b_node)) == F#bst_keys(_dryad_S1#10, $phys_ptr_cast(l#6, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(l#6))), ==(old(_dryad_S0#9, bst_max_key(l#6)), old(_dryad_S1#10, bst_max_key(l#6)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(l#6, ^b_node))) ==> F#bst_max_key(_dryad_S0#9, $phys_ptr_cast(l#6, ^b_node)) == F#bst_max_key(_dryad_S1#10, $phys_ptr_cast(l#6, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(l#6))), ==(old(_dryad_S0#9, bst_min_key(l#6)), old(_dryad_S1#10, bst_min_key(l#6)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(l#6, ^b_node))) ==> F#bst_min_key(_dryad_S0#9, $phys_ptr_cast(l#6, ^b_node)) == F#bst_min_key(_dryad_S1#10, $phys_ptr_cast(l#6, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(r#5))), ==(old(_dryad_S0#9, bst(r#5)), old(_dryad_S1#10, bst(r#5)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> F#bst(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)) == F#bst(_dryad_S1#10, $phys_ptr_cast(r#5, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(r#5))), ==(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S1#10, bst_reach(r#5)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)) == F#bst_reach(_dryad_S1#10, $phys_ptr_cast(r#5, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(r#5))), ==(old(_dryad_S0#9, bst_keys(r#5)), old(_dryad_S1#10, bst_keys(r#5)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> F#bst_keys(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)) == F#bst_keys(_dryad_S1#10, $phys_ptr_cast(r#5, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(r#5))), ==(old(_dryad_S0#9, bst_max_key(r#5)), old(_dryad_S1#10, bst_max_key(r#5)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> F#bst_max_key(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)) == F#bst_max_key(_dryad_S1#10, $phys_ptr_cast(r#5, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(r#5))), ==(old(_dryad_S0#9, bst_min_key(r#5)), old(_dryad_S1#10, bst_min_key(r#5)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> F#bst_min_key(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)) == F#bst_min_key(_dryad_S1#10, $phys_ptr_cast(r#5, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(x))), ==(old(_dryad_S0#9, bst(x)), old(_dryad_S1#10, bst(x)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst(_dryad_S0#9, $phys_ptr_cast(P#x, ^b_node)) == F#bst(_dryad_S1#10, $phys_ptr_cast(P#x, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(x))), ==(old(_dryad_S0#9, bst_reach(x)), old(_dryad_S1#10, bst_reach(x)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_reach(_dryad_S0#9, $phys_ptr_cast(P#x, ^b_node)) == F#bst_reach(_dryad_S1#10, $phys_ptr_cast(P#x, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(x))), ==(old(_dryad_S0#9, bst_keys(x)), old(_dryad_S1#10, bst_keys(x)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_keys(_dryad_S0#9, $phys_ptr_cast(P#x, ^b_node)) == F#bst_keys(_dryad_S1#10, $phys_ptr_cast(P#x, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(x))), ==(old(_dryad_S0#9, bst_max_key(x)), old(_dryad_S1#10, bst_max_key(x)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_max_key(_dryad_S0#9, $phys_ptr_cast(P#x, ^b_node)) == F#bst_max_key(_dryad_S1#10, $phys_ptr_cast(P#x, ^b_node));
            // assume ==>(@_vcc_oset_disjoint(old(_dryad_S0#9, bst_reach(r#5)), old(_dryad_S0#9, bst_reach(x))), ==(old(_dryad_S0#9, bst_min_key(x)), old(_dryad_S1#10, bst_min_key(x)))); 
            assume $oset_disjoint(F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node)), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_min_key(_dryad_S0#9, $phys_ptr_cast(P#x, ^b_node)) == F#bst_min_key(_dryad_S1#10, $phys_ptr_cast(P#x, ^b_node));
            // assume ==>(@_vcc_ptr_neq_null(x1#8), ==(bst(x1#8), &&(&&(&&(&&(&&(&&(&&(bst(*((x1#8->left))), bst(*((x1#8->right)))), unchecked!(@_vcc_oset_in(x1#8, @_vcc_oset_union(bst_reach(*((x1#8->left))), bst_reach(*((x1#8->right))))))), unchecked!(@_vcc_intset_in(*((x1#8->key)), @_vcc_intset_union(bst_keys(*((x1#8->left))), bst_keys(*((x1#8->right))))))), @_vcc_oset_disjoint(bst_reach(*((x1#8->left))), bst_reach(*((x1#8->right))))), @_vcc_intset_disjoint(bst_keys(*((x1#8->left))), bst_keys(*((x1#8->right))))), ==>(@_vcc_ptr_neq_null(*((x1#8->left))), <(bst_max_key(*((x1#8->left))), *((x1#8->key))))), ==>(@_vcc_ptr_neq_null(*((x1#8->right))), <(*((x1#8->key)), bst_min_key(*((x1#8->right)))))))); 
            assume $non_null($phys_ptr_cast(x1#8, ^b_node)) ==> F#bst($s, $phys_ptr_cast(x1#8, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(x1#8, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1#8), ==(bst_reach(x1#8), @_vcc_oset_union(@_vcc_oset_singleton(x1#8), @_vcc_oset_union(bst_reach(*((x1#8->left))), bst_reach(*((x1#8->right))))))); 
            assume $non_null($phys_ptr_cast(x1#8, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(x1#8, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(x1#8, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1#8), ==(bst_keys(x1#8), @_vcc_intset_union(@_vcc_intset_singleton(*((x1#8->key))), @_vcc_intset_union(bst_keys(*((x1#8->left))), bst_keys(*((x1#8->right))))))); 
            assume $non_null($phys_ptr_cast(x1#8, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(x1#8, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1#8), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1#8->left))), @_vcc_ptr_neq_null(*((x1#8->right)))), ==(bst_max_key(x1#8), @\int_max(*((x1#8->key)), @\int_max(bst_max_key(*((x1#8->left))), bst_max_key(*((x1#8->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1#8->left))), @_vcc_ptr_eq_null(*((x1#8->right)))), ==(bst_max_key(x1#8), @\int_max(*((x1#8->key)), bst_max_key(*((x1#8->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1#8->left))), @_vcc_ptr_neq_null(*((x1#8->right)))), ==(bst_max_key(x1#8), @\int_max(*((x1#8->key)), bst_max_key(*((x1#8->right)))))))); 
            assume $non_null($phys_ptr_cast(x1#8, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x1#8, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x1#8, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x1#8, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1#8), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1#8->left))), @_vcc_ptr_neq_null(*((x1#8->right)))), ==(bst_min_key(x1#8), @\int_min(*((x1#8->key)), @\int_min(bst_min_key(*((x1#8->left))), bst_min_key(*((x1#8->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1#8->left))), @_vcc_ptr_eq_null(*((x1#8->right)))), ==(bst_min_key(x1#8), @\int_min(*((x1#8->key)), bst_min_key(*((x1#8->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1#8->left))), @_vcc_ptr_neq_null(*((x1#8->right)))), ==(bst_min_key(x1#8), @\int_min(*((x1#8->key)), bst_min_key(*((x1#8->right)))))))); 
            assume $non_null($phys_ptr_cast(x1#8, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x1#8, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x1#8, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x1#8, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0#7), ==(bst(x0#7), &&(&&(&&(&&(&&(&&(&&(bst(*((x0#7->left))), bst(*((x0#7->right)))), unchecked!(@_vcc_oset_in(x0#7, @_vcc_oset_union(bst_reach(*((x0#7->left))), bst_reach(*((x0#7->right))))))), unchecked!(@_vcc_intset_in(*((x0#7->key)), @_vcc_intset_union(bst_keys(*((x0#7->left))), bst_keys(*((x0#7->right))))))), @_vcc_oset_disjoint(bst_reach(*((x0#7->left))), bst_reach(*((x0#7->right))))), @_vcc_intset_disjoint(bst_keys(*((x0#7->left))), bst_keys(*((x0#7->right))))), ==>(@_vcc_ptr_neq_null(*((x0#7->left))), <(bst_max_key(*((x0#7->left))), *((x0#7->key))))), ==>(@_vcc_ptr_neq_null(*((x0#7->right))), <(*((x0#7->key)), bst_min_key(*((x0#7->right)))))))); 
            assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> F#bst($s, $phys_ptr_cast(x0#7, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(x0#7, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0#7), ==(bst_reach(x0#7), @_vcc_oset_union(@_vcc_oset_singleton(x0#7), @_vcc_oset_union(bst_reach(*((x0#7->left))), bst_reach(*((x0#7->right))))))); 
            assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(x0#7, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(x0#7, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0#7), ==(bst_keys(x0#7), @_vcc_intset_union(@_vcc_intset_singleton(*((x0#7->key))), @_vcc_intset_union(bst_keys(*((x0#7->left))), bst_keys(*((x0#7->right))))))); 
            assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(x0#7, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0#7), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_max_key(x0#7), @\int_max(*((x0#7->key)), @\int_max(bst_max_key(*((x0#7->left))), bst_max_key(*((x0#7->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_eq_null(*((x0#7->right)))), ==(bst_max_key(x0#7), @\int_max(*((x0#7->key)), bst_max_key(*((x0#7->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_max_key(x0#7), @\int_max(*((x0#7->key)), bst_max_key(*((x0#7->right)))))))); 
            assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0#7), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_min_key(x0#7), @\int_min(*((x0#7->key)), @\int_min(bst_min_key(*((x0#7->left))), bst_min_key(*((x0#7->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_eq_null(*((x0#7->right)))), ==(bst_min_key(x0#7), @\int_min(*((x0#7->key)), bst_min_key(*((x0#7->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_min_key(x0#7), @\int_min(*((x0#7->key)), bst_min_key(*((x0#7->right)))))))); 
            assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l#6), ==(bst(l#6), &&(&&(&&(&&(&&(&&(&&(bst(*((l#6->left))), bst(*((l#6->right)))), unchecked!(@_vcc_oset_in(l#6, @_vcc_oset_union(bst_reach(*((l#6->left))), bst_reach(*((l#6->right))))))), unchecked!(@_vcc_intset_in(*((l#6->key)), @_vcc_intset_union(bst_keys(*((l#6->left))), bst_keys(*((l#6->right))))))), @_vcc_oset_disjoint(bst_reach(*((l#6->left))), bst_reach(*((l#6->right))))), @_vcc_intset_disjoint(bst_keys(*((l#6->left))), bst_keys(*((l#6->right))))), ==>(@_vcc_ptr_neq_null(*((l#6->left))), <(bst_max_key(*((l#6->left))), *((l#6->key))))), ==>(@_vcc_ptr_neq_null(*((l#6->right))), <(*((l#6->key)), bst_min_key(*((l#6->right)))))))); 
            assume $non_null($phys_ptr_cast(l#6, ^b_node)) ==> F#bst($s, $phys_ptr_cast(l#6, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(l#6, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l#6), ==(bst_reach(l#6), @_vcc_oset_union(@_vcc_oset_singleton(l#6), @_vcc_oset_union(bst_reach(*((l#6->left))), bst_reach(*((l#6->right))))))); 
            assume $non_null($phys_ptr_cast(l#6, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(l#6, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(l#6, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l#6), ==(bst_keys(l#6), @_vcc_intset_union(@_vcc_intset_singleton(*((l#6->key))), @_vcc_intset_union(bst_keys(*((l#6->left))), bst_keys(*((l#6->right))))))); 
            assume $non_null($phys_ptr_cast(l#6, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(l#6, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((l#6->left))), @_vcc_ptr_neq_null(*((l#6->right)))), ==(bst_max_key(l#6), @\int_max(*((l#6->key)), @\int_max(bst_max_key(*((l#6->left))), bst_max_key(*((l#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((l#6->left))), @_vcc_ptr_eq_null(*((l#6->right)))), ==(bst_max_key(l#6), @\int_max(*((l#6->key)), bst_max_key(*((l#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((l#6->left))), @_vcc_ptr_neq_null(*((l#6->right)))), ==(bst_max_key(l#6), @\int_max(*((l#6->key)), bst_max_key(*((l#6->right)))))))); 
            assume $non_null($phys_ptr_cast(l#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((l#6->left))), @_vcc_ptr_neq_null(*((l#6->right)))), ==(bst_min_key(l#6), @\int_min(*((l#6->key)), @\int_min(bst_min_key(*((l#6->left))), bst_min_key(*((l#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((l#6->left))), @_vcc_ptr_eq_null(*((l#6->right)))), ==(bst_min_key(l#6), @\int_min(*((l#6->key)), bst_min_key(*((l#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((l#6->left))), @_vcc_ptr_neq_null(*((l#6->right)))), ==(bst_min_key(l#6), @\int_min(*((l#6->key)), bst_min_key(*((l#6->right)))))))); 
            assume $non_null($phys_ptr_cast(l#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r#5), ==(bst(r#5), &&(&&(&&(&&(&&(&&(&&(bst(*((r#5->left))), bst(*((r#5->right)))), unchecked!(@_vcc_oset_in(r#5, @_vcc_oset_union(bst_reach(*((r#5->left))), bst_reach(*((r#5->right))))))), unchecked!(@_vcc_intset_in(*((r#5->key)), @_vcc_intset_union(bst_keys(*((r#5->left))), bst_keys(*((r#5->right))))))), @_vcc_oset_disjoint(bst_reach(*((r#5->left))), bst_reach(*((r#5->right))))), @_vcc_intset_disjoint(bst_keys(*((r#5->left))), bst_keys(*((r#5->right))))), ==>(@_vcc_ptr_neq_null(*((r#5->left))), <(bst_max_key(*((r#5->left))), *((r#5->key))))), ==>(@_vcc_ptr_neq_null(*((r#5->right))), <(*((r#5->key)), bst_min_key(*((r#5->right)))))))); 
            assume $non_null($phys_ptr_cast(r#5, ^b_node)) ==> F#bst($s, $phys_ptr_cast(r#5, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(r#5, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r#5), ==(bst_reach(r#5), @_vcc_oset_union(@_vcc_oset_singleton(r#5), @_vcc_oset_union(bst_reach(*((r#5->left))), bst_reach(*((r#5->right))))))); 
            assume $non_null($phys_ptr_cast(r#5, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(r#5, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(r#5, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r#5), ==(bst_keys(r#5), @_vcc_intset_union(@_vcc_intset_singleton(*((r#5->key))), @_vcc_intset_union(bst_keys(*((r#5->left))), bst_keys(*((r#5->right))))))); 
            assume $non_null($phys_ptr_cast(r#5, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(r#5, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r#5), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((r#5->left))), @_vcc_ptr_neq_null(*((r#5->right)))), ==(bst_max_key(r#5), @\int_max(*((r#5->key)), @\int_max(bst_max_key(*((r#5->left))), bst_max_key(*((r#5->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((r#5->left))), @_vcc_ptr_eq_null(*((r#5->right)))), ==(bst_max_key(r#5), @\int_max(*((r#5->key)), bst_max_key(*((r#5->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((r#5->left))), @_vcc_ptr_neq_null(*((r#5->right)))), ==(bst_max_key(r#5), @\int_max(*((r#5->key)), bst_max_key(*((r#5->right)))))))); 
            assume $non_null($phys_ptr_cast(r#5, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r#5), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((r#5->left))), @_vcc_ptr_neq_null(*((r#5->right)))), ==(bst_min_key(r#5), @\int_min(*((r#5->key)), @\int_min(bst_min_key(*((r#5->left))), bst_min_key(*((r#5->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((r#5->left))), @_vcc_ptr_eq_null(*((r#5->right)))), ==(bst_min_key(r#5), @\int_min(*((r#5->key)), bst_min_key(*((r#5->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((r#5->left))), @_vcc_ptr_neq_null(*((r#5->right)))), ==(bst_min_key(r#5), @\int_min(*((r#5->key)), bst_min_key(*((r#5->right)))))))); 
            assume $non_null($phys_ptr_cast(r#5, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp#4), ==(bst(tmp#4), &&(&&(&&(&&(&&(&&(&&(bst(*((tmp#4->left))), bst(*((tmp#4->right)))), unchecked!(@_vcc_oset_in(tmp#4, @_vcc_oset_union(bst_reach(*((tmp#4->left))), bst_reach(*((tmp#4->right))))))), unchecked!(@_vcc_intset_in(*((tmp#4->key)), @_vcc_intset_union(bst_keys(*((tmp#4->left))), bst_keys(*((tmp#4->right))))))), @_vcc_oset_disjoint(bst_reach(*((tmp#4->left))), bst_reach(*((tmp#4->right))))), @_vcc_intset_disjoint(bst_keys(*((tmp#4->left))), bst_keys(*((tmp#4->right))))), ==>(@_vcc_ptr_neq_null(*((tmp#4->left))), <(bst_max_key(*((tmp#4->left))), *((tmp#4->key))))), ==>(@_vcc_ptr_neq_null(*((tmp#4->right))), <(*((tmp#4->key)), bst_min_key(*((tmp#4->right)))))))); 
            assume $non_null($phys_ptr_cast(tmp#4, ^b_node)) ==> F#bst($s, $phys_ptr_cast(tmp#4, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(tmp#4, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp#4), ==(bst_reach(tmp#4), @_vcc_oset_union(@_vcc_oset_singleton(tmp#4), @_vcc_oset_union(bst_reach(*((tmp#4->left))), bst_reach(*((tmp#4->right))))))); 
            assume $non_null($phys_ptr_cast(tmp#4, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(tmp#4, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(tmp#4, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp#4), ==(bst_keys(tmp#4), @_vcc_intset_union(@_vcc_intset_singleton(*((tmp#4->key))), @_vcc_intset_union(bst_keys(*((tmp#4->left))), bst_keys(*((tmp#4->right))))))); 
            assume $non_null($phys_ptr_cast(tmp#4, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(tmp#4, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp#4), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp#4->left))), @_vcc_ptr_neq_null(*((tmp#4->right)))), ==(bst_max_key(tmp#4), @\int_max(*((tmp#4->key)), @\int_max(bst_max_key(*((tmp#4->left))), bst_max_key(*((tmp#4->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp#4->left))), @_vcc_ptr_eq_null(*((tmp#4->right)))), ==(bst_max_key(tmp#4), @\int_max(*((tmp#4->key)), bst_max_key(*((tmp#4->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp#4->left))), @_vcc_ptr_neq_null(*((tmp#4->right)))), ==(bst_max_key(tmp#4), @\int_max(*((tmp#4->key)), bst_max_key(*((tmp#4->right)))))))); 
            assume $non_null($phys_ptr_cast(tmp#4, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp#4), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp#4->left))), @_vcc_ptr_neq_null(*((tmp#4->right)))), ==(bst_min_key(tmp#4), @\int_min(*((tmp#4->key)), @\int_min(bst_min_key(*((tmp#4->left))), bst_min_key(*((tmp#4->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp#4->left))), @_vcc_ptr_eq_null(*((tmp#4->right)))), ==(bst_min_key(tmp#4), @\int_min(*((tmp#4->key)), bst_min_key(*((tmp#4->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp#4->left))), @_vcc_ptr_neq_null(*((tmp#4->right)))), ==(bst_min_key(tmp#4), @\int_min(*((tmp#4->key)), bst_min_key(*((tmp#4->right)))))))); 
            assume $non_null($phys_ptr_cast(tmp#4, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(!(@_vcc_oset_in(x1#8, old(_dryad_S0#9, bst_reach(r#5)))), @_vcc_ptr_eq_pure(*((x1#8->left)), old(_dryad_S0#9, *((x1#8->left))))); 
            assume !$oset_in($phys_ptr_cast(x1#8, ^b_node), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#9, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(x1#8, old(_dryad_S0#9, bst_reach(r#5)))), @_vcc_ptr_eq_pure(*((x1#8->right)), old(_dryad_S0#9, *((x1#8->right))))); 
            assume !$oset_in($phys_ptr_cast(x1#8, ^b_node), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#9, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(x1#8, old(_dryad_S0#9, bst_reach(r#5)))), ==(*((x1#8->key)), old(_dryad_S0#9, *((x1#8->key))))); 
            assume !$oset_in($phys_ptr_cast(x1#8, ^b_node), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)) == $rd_inv(_dryad_S0#9, b_node.key, $phys_ptr_cast(x1#8, ^b_node));
            // assume ==>(!(@_vcc_oset_in(x0#7, old(_dryad_S0#9, bst_reach(r#5)))), @_vcc_ptr_eq_pure(*((x0#7->left)), old(_dryad_S0#9, *((x0#7->left))))); 
            assume !$oset_in($phys_ptr_cast(x0#7, ^b_node), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#9, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(x0#7, old(_dryad_S0#9, bst_reach(r#5)))), @_vcc_ptr_eq_pure(*((x0#7->right)), old(_dryad_S0#9, *((x0#7->right))))); 
            assume !$oset_in($phys_ptr_cast(x0#7, ^b_node), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#9, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(x0#7, old(_dryad_S0#9, bst_reach(r#5)))), ==(*((x0#7->key)), old(_dryad_S0#9, *((x0#7->key))))); 
            assume !$oset_in($phys_ptr_cast(x0#7, ^b_node), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)) == $rd_inv(_dryad_S0#9, b_node.key, $phys_ptr_cast(x0#7, ^b_node));
            // assume ==>(!(@_vcc_oset_in(l#6, old(_dryad_S0#9, bst_reach(r#5)))), @_vcc_ptr_eq_pure(*((l#6->left)), old(_dryad_S0#9, *((l#6->left))))); 
            assume !$oset_in($phys_ptr_cast(l#6, ^b_node), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#9, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(l#6, old(_dryad_S0#9, bst_reach(r#5)))), @_vcc_ptr_eq_pure(*((l#6->right)), old(_dryad_S0#9, *((l#6->right))))); 
            assume !$oset_in($phys_ptr_cast(l#6, ^b_node), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#9, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(l#6, old(_dryad_S0#9, bst_reach(r#5)))), ==(*((l#6->key)), old(_dryad_S0#9, *((l#6->key))))); 
            assume !$oset_in($phys_ptr_cast(l#6, ^b_node), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)) == $rd_inv(_dryad_S0#9, b_node.key, $phys_ptr_cast(l#6, ^b_node));
            // assume ==>(!(@_vcc_oset_in(r#5, old(_dryad_S0#9, bst_reach(r#5)))), @_vcc_ptr_eq_pure(*((r#5->left)), old(_dryad_S0#9, *((r#5->left))))); 
            assume !$oset_in($phys_ptr_cast(r#5, ^b_node), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#9, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(r#5, old(_dryad_S0#9, bst_reach(r#5)))), @_vcc_ptr_eq_pure(*((r#5->right)), old(_dryad_S0#9, *((r#5->right))))); 
            assume !$oset_in($phys_ptr_cast(r#5, ^b_node), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#9, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(r#5, old(_dryad_S0#9, bst_reach(r#5)))), ==(*((r#5->key)), old(_dryad_S0#9, *((r#5->key))))); 
            assume !$oset_in($phys_ptr_cast(r#5, ^b_node), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)) == $rd_inv(_dryad_S0#9, b_node.key, $phys_ptr_cast(r#5, ^b_node));
            // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#9, bst_reach(r#5)))), @_vcc_ptr_eq_pure(*((x->left)), old(_dryad_S0#9, *((x->left))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#9, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#9, bst_reach(r#5)))), @_vcc_ptr_eq_pure(*((x->right)), old(_dryad_S0#9, *((x->right))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#9, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S0#9, bst_reach(r#5)))), ==(*((x->key)), old(_dryad_S0#9, *((x->key))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#9, $phys_ptr_cast(r#5, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) == $rd_inv(_dryad_S0#9, b_node.key, $phys_ptr_cast(P#x, ^b_node));
            // _math \state _dryad_S2#11; 
            // _dryad_S2#11 := @_vcc_current_state(@state); 
            _dryad_S2#11 := $current_state($s);
            // _math \state stmtexpr5#24; 
            // stmtexpr5#24 := _dryad_S2#11; 
            stmtexpr5#24 := _dryad_S2#11;
            // assert @prim_writes_check((x->right)); 
            assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(P#x, ^b_node), b_node.right));
            // *(x->right) := tmp#4; 
            call $write_int(b_node.right, $phys_ptr_cast(P#x, ^b_node), $ptr_to_int($phys_ptr_cast(tmp#4, ^b_node)));
            assume $full_stop_ext(#tok$3^41.5, $s);
            // _math \state _dryad_S3#12; 
            // _dryad_S3#12 := @_vcc_current_state(@state); 
            _dryad_S3#12 := $current_state($s);
            // _math \state stmtexpr6#25; 
            // stmtexpr6#25 := _dryad_S3#12; 
            stmtexpr6#25 := _dryad_S3#12;
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(*((x->left)))))), ==(old(_dryad_S2#11, bst(*((x->left)))), old(_dryad_S3#12, bst(*((x->left)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $rd_phys_ptr(_dryad_S2#11, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node))) ==> F#bst(_dryad_S2#11, $rd_phys_ptr(_dryad_S2#11, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) == F#bst(_dryad_S3#12, $rd_phys_ptr(_dryad_S3#12, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(*((x->left)))))), ==(old(_dryad_S2#11, bst_reach(*((x->left)))), old(_dryad_S3#12, bst_reach(*((x->left)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $rd_phys_ptr(_dryad_S2#11, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node))) ==> F#bst_reach(_dryad_S2#11, $rd_phys_ptr(_dryad_S2#11, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) == F#bst_reach(_dryad_S3#12, $rd_phys_ptr(_dryad_S3#12, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(*((x->left)))))), ==(old(_dryad_S2#11, bst_keys(*((x->left)))), old(_dryad_S3#12, bst_keys(*((x->left)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $rd_phys_ptr(_dryad_S2#11, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node))) ==> F#bst_keys(_dryad_S2#11, $rd_phys_ptr(_dryad_S2#11, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) == F#bst_keys(_dryad_S3#12, $rd_phys_ptr(_dryad_S3#12, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(*((x->left)))))), ==(old(_dryad_S2#11, bst_max_key(*((x->left)))), old(_dryad_S3#12, bst_max_key(*((x->left)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $rd_phys_ptr(_dryad_S2#11, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node))) ==> F#bst_max_key(_dryad_S2#11, $rd_phys_ptr(_dryad_S2#11, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) == F#bst_max_key(_dryad_S3#12, $rd_phys_ptr(_dryad_S3#12, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(*((x->left)))))), ==(old(_dryad_S2#11, bst_min_key(*((x->left)))), old(_dryad_S3#12, bst_min_key(*((x->left)))))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $rd_phys_ptr(_dryad_S2#11, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node))) ==> F#bst_min_key(_dryad_S2#11, $rd_phys_ptr(_dryad_S2#11, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) == F#bst_min_key(_dryad_S3#12, $rd_phys_ptr(_dryad_S3#12, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(x1#8)))), ==(old(_dryad_S2#11, bst(x1#8)), old(_dryad_S3#12, bst(x1#8)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(x1#8, ^b_node))) ==> F#bst(_dryad_S2#11, $phys_ptr_cast(x1#8, ^b_node)) == F#bst(_dryad_S3#12, $phys_ptr_cast(x1#8, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(x1#8)))), ==(old(_dryad_S2#11, bst_reach(x1#8)), old(_dryad_S3#12, bst_reach(x1#8)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(x1#8, ^b_node))) ==> F#bst_reach(_dryad_S2#11, $phys_ptr_cast(x1#8, ^b_node)) == F#bst_reach(_dryad_S3#12, $phys_ptr_cast(x1#8, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(x1#8)))), ==(old(_dryad_S2#11, bst_keys(x1#8)), old(_dryad_S3#12, bst_keys(x1#8)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(x1#8, ^b_node))) ==> F#bst_keys(_dryad_S2#11, $phys_ptr_cast(x1#8, ^b_node)) == F#bst_keys(_dryad_S3#12, $phys_ptr_cast(x1#8, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(x1#8)))), ==(old(_dryad_S2#11, bst_max_key(x1#8)), old(_dryad_S3#12, bst_max_key(x1#8)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(x1#8, ^b_node))) ==> F#bst_max_key(_dryad_S2#11, $phys_ptr_cast(x1#8, ^b_node)) == F#bst_max_key(_dryad_S3#12, $phys_ptr_cast(x1#8, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(x1#8)))), ==(old(_dryad_S2#11, bst_min_key(x1#8)), old(_dryad_S3#12, bst_min_key(x1#8)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(x1#8, ^b_node))) ==> F#bst_min_key(_dryad_S2#11, $phys_ptr_cast(x1#8, ^b_node)) == F#bst_min_key(_dryad_S3#12, $phys_ptr_cast(x1#8, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(x0#7)))), ==(old(_dryad_S2#11, bst(x0#7)), old(_dryad_S3#12, bst(x0#7)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst(_dryad_S2#11, $phys_ptr_cast(x0#7, ^b_node)) == F#bst(_dryad_S3#12, $phys_ptr_cast(x0#7, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(x0#7)))), ==(old(_dryad_S2#11, bst_reach(x0#7)), old(_dryad_S3#12, bst_reach(x0#7)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_reach(_dryad_S2#11, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_reach(_dryad_S3#12, $phys_ptr_cast(x0#7, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(x0#7)))), ==(old(_dryad_S2#11, bst_keys(x0#7)), old(_dryad_S3#12, bst_keys(x0#7)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_keys(_dryad_S2#11, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_keys(_dryad_S3#12, $phys_ptr_cast(x0#7, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(x0#7)))), ==(old(_dryad_S2#11, bst_max_key(x0#7)), old(_dryad_S3#12, bst_max_key(x0#7)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_max_key(_dryad_S2#11, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_max_key(_dryad_S3#12, $phys_ptr_cast(x0#7, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(x0#7)))), ==(old(_dryad_S2#11, bst_min_key(x0#7)), old(_dryad_S3#12, bst_min_key(x0#7)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_min_key(_dryad_S2#11, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_min_key(_dryad_S3#12, $phys_ptr_cast(x0#7, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(l#6)))), ==(old(_dryad_S2#11, bst(l#6)), old(_dryad_S3#12, bst(l#6)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(l#6, ^b_node))) ==> F#bst(_dryad_S2#11, $phys_ptr_cast(l#6, ^b_node)) == F#bst(_dryad_S3#12, $phys_ptr_cast(l#6, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(l#6)))), ==(old(_dryad_S2#11, bst_reach(l#6)), old(_dryad_S3#12, bst_reach(l#6)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(l#6, ^b_node))) ==> F#bst_reach(_dryad_S2#11, $phys_ptr_cast(l#6, ^b_node)) == F#bst_reach(_dryad_S3#12, $phys_ptr_cast(l#6, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(l#6)))), ==(old(_dryad_S2#11, bst_keys(l#6)), old(_dryad_S3#12, bst_keys(l#6)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(l#6, ^b_node))) ==> F#bst_keys(_dryad_S2#11, $phys_ptr_cast(l#6, ^b_node)) == F#bst_keys(_dryad_S3#12, $phys_ptr_cast(l#6, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(l#6)))), ==(old(_dryad_S2#11, bst_max_key(l#6)), old(_dryad_S3#12, bst_max_key(l#6)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(l#6, ^b_node))) ==> F#bst_max_key(_dryad_S2#11, $phys_ptr_cast(l#6, ^b_node)) == F#bst_max_key(_dryad_S3#12, $phys_ptr_cast(l#6, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(l#6)))), ==(old(_dryad_S2#11, bst_min_key(l#6)), old(_dryad_S3#12, bst_min_key(l#6)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(l#6, ^b_node))) ==> F#bst_min_key(_dryad_S2#11, $phys_ptr_cast(l#6, ^b_node)) == F#bst_min_key(_dryad_S3#12, $phys_ptr_cast(l#6, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(r#5)))), ==(old(_dryad_S2#11, bst(r#5)), old(_dryad_S3#12, bst(r#5)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(r#5, ^b_node))) ==> F#bst(_dryad_S2#11, $phys_ptr_cast(r#5, ^b_node)) == F#bst(_dryad_S3#12, $phys_ptr_cast(r#5, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(r#5)))), ==(old(_dryad_S2#11, bst_reach(r#5)), old(_dryad_S3#12, bst_reach(r#5)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(r#5, ^b_node))) ==> F#bst_reach(_dryad_S2#11, $phys_ptr_cast(r#5, ^b_node)) == F#bst_reach(_dryad_S3#12, $phys_ptr_cast(r#5, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(r#5)))), ==(old(_dryad_S2#11, bst_keys(r#5)), old(_dryad_S3#12, bst_keys(r#5)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(r#5, ^b_node))) ==> F#bst_keys(_dryad_S2#11, $phys_ptr_cast(r#5, ^b_node)) == F#bst_keys(_dryad_S3#12, $phys_ptr_cast(r#5, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(r#5)))), ==(old(_dryad_S2#11, bst_max_key(r#5)), old(_dryad_S3#12, bst_max_key(r#5)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(r#5, ^b_node))) ==> F#bst_max_key(_dryad_S2#11, $phys_ptr_cast(r#5, ^b_node)) == F#bst_max_key(_dryad_S3#12, $phys_ptr_cast(r#5, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(r#5)))), ==(old(_dryad_S2#11, bst_min_key(r#5)), old(_dryad_S3#12, bst_min_key(r#5)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(r#5, ^b_node))) ==> F#bst_min_key(_dryad_S2#11, $phys_ptr_cast(r#5, ^b_node)) == F#bst_min_key(_dryad_S3#12, $phys_ptr_cast(r#5, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(tmp#4)))), ==(old(_dryad_S2#11, bst(tmp#4)), old(_dryad_S3#12, bst(tmp#4)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(tmp#4, ^b_node))) ==> F#bst(_dryad_S2#11, $phys_ptr_cast(tmp#4, ^b_node)) == F#bst(_dryad_S3#12, $phys_ptr_cast(tmp#4, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(tmp#4)))), ==(old(_dryad_S2#11, bst_reach(tmp#4)), old(_dryad_S3#12, bst_reach(tmp#4)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(tmp#4, ^b_node))) ==> F#bst_reach(_dryad_S2#11, $phys_ptr_cast(tmp#4, ^b_node)) == F#bst_reach(_dryad_S3#12, $phys_ptr_cast(tmp#4, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(tmp#4)))), ==(old(_dryad_S2#11, bst_keys(tmp#4)), old(_dryad_S3#12, bst_keys(tmp#4)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(tmp#4, ^b_node))) ==> F#bst_keys(_dryad_S2#11, $phys_ptr_cast(tmp#4, ^b_node)) == F#bst_keys(_dryad_S3#12, $phys_ptr_cast(tmp#4, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(tmp#4)))), ==(old(_dryad_S2#11, bst_max_key(tmp#4)), old(_dryad_S3#12, bst_max_key(tmp#4)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(tmp#4, ^b_node))) ==> F#bst_max_key(_dryad_S2#11, $phys_ptr_cast(tmp#4, ^b_node)) == F#bst_max_key(_dryad_S3#12, $phys_ptr_cast(tmp#4, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S2#11, bst_reach(tmp#4)))), ==(old(_dryad_S2#11, bst_min_key(tmp#4)), old(_dryad_S3#12, bst_min_key(tmp#4)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S2#11, $phys_ptr_cast(tmp#4, ^b_node))) ==> F#bst_min_key(_dryad_S2#11, $phys_ptr_cast(tmp#4, ^b_node)) == F#bst_min_key(_dryad_S3#12, $phys_ptr_cast(tmp#4, ^b_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x1#8)), @_vcc_ptr_eq_pure(*((x1#8->left)), old(_dryad_S2#11, *((x1#8->left))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(x1#8, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#11, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x1#8)), @_vcc_ptr_eq_pure(*((x1#8->right)), old(_dryad_S2#11, *((x1#8->right))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(x1#8, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#11, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x1#8)), ==(*((x1#8->key)), old(_dryad_S2#11, *((x1#8->key))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(x1#8, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)) == $rd_inv(_dryad_S2#11, b_node.key, $phys_ptr_cast(x1#8, ^b_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x0#7)), @_vcc_ptr_eq_pure(*((x0#7->left)), old(_dryad_S2#11, *((x0#7->left))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(x0#7, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#11, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x0#7)), @_vcc_ptr_eq_pure(*((x0#7->right)), old(_dryad_S2#11, *((x0#7->right))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(x0#7, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#11, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, x0#7)), ==(*((x0#7->key)), old(_dryad_S2#11, *((x0#7->key))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(x0#7, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)) == $rd_inv(_dryad_S2#11, b_node.key, $phys_ptr_cast(x0#7, ^b_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, l#6)), @_vcc_ptr_eq_pure(*((l#6->left)), old(_dryad_S2#11, *((l#6->left))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(l#6, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#11, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, l#6)), @_vcc_ptr_eq_pure(*((l#6->right)), old(_dryad_S2#11, *((l#6->right))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(l#6, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#11, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, l#6)), ==(*((l#6->key)), old(_dryad_S2#11, *((l#6->key))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(l#6, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)) == $rd_inv(_dryad_S2#11, b_node.key, $phys_ptr_cast(l#6, ^b_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, r#5)), @_vcc_ptr_eq_pure(*((r#5->left)), old(_dryad_S2#11, *((r#5->left))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(r#5, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#11, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, r#5)), @_vcc_ptr_eq_pure(*((r#5->right)), old(_dryad_S2#11, *((r#5->right))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(r#5, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#11, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, r#5)), ==(*((r#5->key)), old(_dryad_S2#11, *((r#5->key))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(r#5, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)) == $rd_inv(_dryad_S2#11, b_node.key, $phys_ptr_cast(r#5, ^b_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(x, tmp#4)), @_vcc_ptr_eq_pure(*((tmp#4->left)), old(_dryad_S2#11, *((tmp#4->left))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(tmp#4, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#11, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, tmp#4)), @_vcc_ptr_eq_pure(*((tmp#4->right)), old(_dryad_S2#11, *((tmp#4->right))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(tmp#4, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S2#11, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(x, tmp#4)), ==(*((tmp#4->key)), old(_dryad_S2#11, *((tmp#4->key))))); 
            assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(tmp#4, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)) == $rd_inv(_dryad_S2#11, b_node.key, $phys_ptr_cast(tmp#4, ^b_node));
            // assume ==>(@_vcc_ptr_neq_null(x1#8), ==(bst(x1#8), &&(&&(&&(&&(&&(&&(&&(bst(*((x1#8->left))), bst(*((x1#8->right)))), unchecked!(@_vcc_oset_in(x1#8, @_vcc_oset_union(bst_reach(*((x1#8->left))), bst_reach(*((x1#8->right))))))), unchecked!(@_vcc_intset_in(*((x1#8->key)), @_vcc_intset_union(bst_keys(*((x1#8->left))), bst_keys(*((x1#8->right))))))), @_vcc_oset_disjoint(bst_reach(*((x1#8->left))), bst_reach(*((x1#8->right))))), @_vcc_intset_disjoint(bst_keys(*((x1#8->left))), bst_keys(*((x1#8->right))))), ==>(@_vcc_ptr_neq_null(*((x1#8->left))), <(bst_max_key(*((x1#8->left))), *((x1#8->key))))), ==>(@_vcc_ptr_neq_null(*((x1#8->right))), <(*((x1#8->key)), bst_min_key(*((x1#8->right)))))))); 
            assume $non_null($phys_ptr_cast(x1#8, ^b_node)) ==> F#bst($s, $phys_ptr_cast(x1#8, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(x1#8, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1#8), ==(bst_reach(x1#8), @_vcc_oset_union(@_vcc_oset_singleton(x1#8), @_vcc_oset_union(bst_reach(*((x1#8->left))), bst_reach(*((x1#8->right))))))); 
            assume $non_null($phys_ptr_cast(x1#8, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(x1#8, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(x1#8, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1#8), ==(bst_keys(x1#8), @_vcc_intset_union(@_vcc_intset_singleton(*((x1#8->key))), @_vcc_intset_union(bst_keys(*((x1#8->left))), bst_keys(*((x1#8->right))))))); 
            assume $non_null($phys_ptr_cast(x1#8, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(x1#8, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1#8), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1#8->left))), @_vcc_ptr_neq_null(*((x1#8->right)))), ==(bst_max_key(x1#8), @\int_max(*((x1#8->key)), @\int_max(bst_max_key(*((x1#8->left))), bst_max_key(*((x1#8->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1#8->left))), @_vcc_ptr_eq_null(*((x1#8->right)))), ==(bst_max_key(x1#8), @\int_max(*((x1#8->key)), bst_max_key(*((x1#8->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1#8->left))), @_vcc_ptr_neq_null(*((x1#8->right)))), ==(bst_max_key(x1#8), @\int_max(*((x1#8->key)), bst_max_key(*((x1#8->right)))))))); 
            assume $non_null($phys_ptr_cast(x1#8, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x1#8, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x1#8, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x1#8, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x1#8), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1#8->left))), @_vcc_ptr_neq_null(*((x1#8->right)))), ==(bst_min_key(x1#8), @\int_min(*((x1#8->key)), @\int_min(bst_min_key(*((x1#8->left))), bst_min_key(*((x1#8->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1#8->left))), @_vcc_ptr_eq_null(*((x1#8->right)))), ==(bst_min_key(x1#8), @\int_min(*((x1#8->key)), bst_min_key(*((x1#8->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1#8->left))), @_vcc_ptr_neq_null(*((x1#8->right)))), ==(bst_min_key(x1#8), @\int_min(*((x1#8->key)), bst_min_key(*((x1#8->right)))))))); 
            assume $non_null($phys_ptr_cast(x1#8, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x1#8, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x1#8, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x1#8, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x1#8, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x1#8, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0#7), ==(bst(x0#7), &&(&&(&&(&&(&&(&&(&&(bst(*((x0#7->left))), bst(*((x0#7->right)))), unchecked!(@_vcc_oset_in(x0#7, @_vcc_oset_union(bst_reach(*((x0#7->left))), bst_reach(*((x0#7->right))))))), unchecked!(@_vcc_intset_in(*((x0#7->key)), @_vcc_intset_union(bst_keys(*((x0#7->left))), bst_keys(*((x0#7->right))))))), @_vcc_oset_disjoint(bst_reach(*((x0#7->left))), bst_reach(*((x0#7->right))))), @_vcc_intset_disjoint(bst_keys(*((x0#7->left))), bst_keys(*((x0#7->right))))), ==>(@_vcc_ptr_neq_null(*((x0#7->left))), <(bst_max_key(*((x0#7->left))), *((x0#7->key))))), ==>(@_vcc_ptr_neq_null(*((x0#7->right))), <(*((x0#7->key)), bst_min_key(*((x0#7->right)))))))); 
            assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> F#bst($s, $phys_ptr_cast(x0#7, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(x0#7, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0#7), ==(bst_reach(x0#7), @_vcc_oset_union(@_vcc_oset_singleton(x0#7), @_vcc_oset_union(bst_reach(*((x0#7->left))), bst_reach(*((x0#7->right))))))); 
            assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(x0#7, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(x0#7, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0#7), ==(bst_keys(x0#7), @_vcc_intset_union(@_vcc_intset_singleton(*((x0#7->key))), @_vcc_intset_union(bst_keys(*((x0#7->left))), bst_keys(*((x0#7->right))))))); 
            assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(x0#7, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0#7), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_max_key(x0#7), @\int_max(*((x0#7->key)), @\int_max(bst_max_key(*((x0#7->left))), bst_max_key(*((x0#7->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_eq_null(*((x0#7->right)))), ==(bst_max_key(x0#7), @\int_max(*((x0#7->key)), bst_max_key(*((x0#7->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_max_key(x0#7), @\int_max(*((x0#7->key)), bst_max_key(*((x0#7->right)))))))); 
            assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x0#7), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_min_key(x0#7), @\int_min(*((x0#7->key)), @\int_min(bst_min_key(*((x0#7->left))), bst_min_key(*((x0#7->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_eq_null(*((x0#7->right)))), ==(bst_min_key(x0#7), @\int_min(*((x0#7->key)), bst_min_key(*((x0#7->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_min_key(x0#7), @\int_min(*((x0#7->key)), bst_min_key(*((x0#7->right)))))))); 
            assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l#6), ==(bst(l#6), &&(&&(&&(&&(&&(&&(&&(bst(*((l#6->left))), bst(*((l#6->right)))), unchecked!(@_vcc_oset_in(l#6, @_vcc_oset_union(bst_reach(*((l#6->left))), bst_reach(*((l#6->right))))))), unchecked!(@_vcc_intset_in(*((l#6->key)), @_vcc_intset_union(bst_keys(*((l#6->left))), bst_keys(*((l#6->right))))))), @_vcc_oset_disjoint(bst_reach(*((l#6->left))), bst_reach(*((l#6->right))))), @_vcc_intset_disjoint(bst_keys(*((l#6->left))), bst_keys(*((l#6->right))))), ==>(@_vcc_ptr_neq_null(*((l#6->left))), <(bst_max_key(*((l#6->left))), *((l#6->key))))), ==>(@_vcc_ptr_neq_null(*((l#6->right))), <(*((l#6->key)), bst_min_key(*((l#6->right)))))))); 
            assume $non_null($phys_ptr_cast(l#6, ^b_node)) ==> F#bst($s, $phys_ptr_cast(l#6, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(l#6, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l#6), ==(bst_reach(l#6), @_vcc_oset_union(@_vcc_oset_singleton(l#6), @_vcc_oset_union(bst_reach(*((l#6->left))), bst_reach(*((l#6->right))))))); 
            assume $non_null($phys_ptr_cast(l#6, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(l#6, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(l#6, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l#6), ==(bst_keys(l#6), @_vcc_intset_union(@_vcc_intset_singleton(*((l#6->key))), @_vcc_intset_union(bst_keys(*((l#6->left))), bst_keys(*((l#6->right))))))); 
            assume $non_null($phys_ptr_cast(l#6, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(l#6, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((l#6->left))), @_vcc_ptr_neq_null(*((l#6->right)))), ==(bst_max_key(l#6), @\int_max(*((l#6->key)), @\int_max(bst_max_key(*((l#6->left))), bst_max_key(*((l#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((l#6->left))), @_vcc_ptr_eq_null(*((l#6->right)))), ==(bst_max_key(l#6), @\int_max(*((l#6->key)), bst_max_key(*((l#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((l#6->left))), @_vcc_ptr_neq_null(*((l#6->right)))), ==(bst_max_key(l#6), @\int_max(*((l#6->key)), bst_max_key(*((l#6->right)))))))); 
            assume $non_null($phys_ptr_cast(l#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(l#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((l#6->left))), @_vcc_ptr_neq_null(*((l#6->right)))), ==(bst_min_key(l#6), @\int_min(*((l#6->key)), @\int_min(bst_min_key(*((l#6->left))), bst_min_key(*((l#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((l#6->left))), @_vcc_ptr_eq_null(*((l#6->right)))), ==(bst_min_key(l#6), @\int_min(*((l#6->key)), bst_min_key(*((l#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((l#6->left))), @_vcc_ptr_neq_null(*((l#6->right)))), ==(bst_min_key(l#6), @\int_min(*((l#6->key)), bst_min_key(*((l#6->right)))))))); 
            assume $non_null($phys_ptr_cast(l#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(l#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(l#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(l#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(l#6, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r#5), ==(bst(r#5), &&(&&(&&(&&(&&(&&(&&(bst(*((r#5->left))), bst(*((r#5->right)))), unchecked!(@_vcc_oset_in(r#5, @_vcc_oset_union(bst_reach(*((r#5->left))), bst_reach(*((r#5->right))))))), unchecked!(@_vcc_intset_in(*((r#5->key)), @_vcc_intset_union(bst_keys(*((r#5->left))), bst_keys(*((r#5->right))))))), @_vcc_oset_disjoint(bst_reach(*((r#5->left))), bst_reach(*((r#5->right))))), @_vcc_intset_disjoint(bst_keys(*((r#5->left))), bst_keys(*((r#5->right))))), ==>(@_vcc_ptr_neq_null(*((r#5->left))), <(bst_max_key(*((r#5->left))), *((r#5->key))))), ==>(@_vcc_ptr_neq_null(*((r#5->right))), <(*((r#5->key)), bst_min_key(*((r#5->right)))))))); 
            assume $non_null($phys_ptr_cast(r#5, ^b_node)) ==> F#bst($s, $phys_ptr_cast(r#5, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(r#5, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r#5), ==(bst_reach(r#5), @_vcc_oset_union(@_vcc_oset_singleton(r#5), @_vcc_oset_union(bst_reach(*((r#5->left))), bst_reach(*((r#5->right))))))); 
            assume $non_null($phys_ptr_cast(r#5, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(r#5, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(r#5, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r#5), ==(bst_keys(r#5), @_vcc_intset_union(@_vcc_intset_singleton(*((r#5->key))), @_vcc_intset_union(bst_keys(*((r#5->left))), bst_keys(*((r#5->right))))))); 
            assume $non_null($phys_ptr_cast(r#5, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(r#5, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r#5), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((r#5->left))), @_vcc_ptr_neq_null(*((r#5->right)))), ==(bst_max_key(r#5), @\int_max(*((r#5->key)), @\int_max(bst_max_key(*((r#5->left))), bst_max_key(*((r#5->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((r#5->left))), @_vcc_ptr_eq_null(*((r#5->right)))), ==(bst_max_key(r#5), @\int_max(*((r#5->key)), bst_max_key(*((r#5->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((r#5->left))), @_vcc_ptr_neq_null(*((r#5->right)))), ==(bst_max_key(r#5), @\int_max(*((r#5->key)), bst_max_key(*((r#5->right)))))))); 
            assume $non_null($phys_ptr_cast(r#5, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(r#5), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((r#5->left))), @_vcc_ptr_neq_null(*((r#5->right)))), ==(bst_min_key(r#5), @\int_min(*((r#5->key)), @\int_min(bst_min_key(*((r#5->left))), bst_min_key(*((r#5->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((r#5->left))), @_vcc_ptr_eq_null(*((r#5->right)))), ==(bst_min_key(r#5), @\int_min(*((r#5->key)), bst_min_key(*((r#5->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((r#5->left))), @_vcc_ptr_neq_null(*((r#5->right)))), ==(bst_min_key(r#5), @\int_min(*((r#5->key)), bst_min_key(*((r#5->right)))))))); 
            assume $non_null($phys_ptr_cast(r#5, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(r#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(r#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(r#5, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(r#5, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp#4), ==(bst(tmp#4), &&(&&(&&(&&(&&(&&(&&(bst(*((tmp#4->left))), bst(*((tmp#4->right)))), unchecked!(@_vcc_oset_in(tmp#4, @_vcc_oset_union(bst_reach(*((tmp#4->left))), bst_reach(*((tmp#4->right))))))), unchecked!(@_vcc_intset_in(*((tmp#4->key)), @_vcc_intset_union(bst_keys(*((tmp#4->left))), bst_keys(*((tmp#4->right))))))), @_vcc_oset_disjoint(bst_reach(*((tmp#4->left))), bst_reach(*((tmp#4->right))))), @_vcc_intset_disjoint(bst_keys(*((tmp#4->left))), bst_keys(*((tmp#4->right))))), ==>(@_vcc_ptr_neq_null(*((tmp#4->left))), <(bst_max_key(*((tmp#4->left))), *((tmp#4->key))))), ==>(@_vcc_ptr_neq_null(*((tmp#4->right))), <(*((tmp#4->key)), bst_min_key(*((tmp#4->right)))))))); 
            assume $non_null($phys_ptr_cast(tmp#4, ^b_node)) ==> F#bst($s, $phys_ptr_cast(tmp#4, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(tmp#4, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp#4), ==(bst_reach(tmp#4), @_vcc_oset_union(@_vcc_oset_singleton(tmp#4), @_vcc_oset_union(bst_reach(*((tmp#4->left))), bst_reach(*((tmp#4->right))))))); 
            assume $non_null($phys_ptr_cast(tmp#4, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(tmp#4, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(tmp#4, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp#4), ==(bst_keys(tmp#4), @_vcc_intset_union(@_vcc_intset_singleton(*((tmp#4->key))), @_vcc_intset_union(bst_keys(*((tmp#4->left))), bst_keys(*((tmp#4->right))))))); 
            assume $non_null($phys_ptr_cast(tmp#4, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(tmp#4, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp#4), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp#4->left))), @_vcc_ptr_neq_null(*((tmp#4->right)))), ==(bst_max_key(tmp#4), @\int_max(*((tmp#4->key)), @\int_max(bst_max_key(*((tmp#4->left))), bst_max_key(*((tmp#4->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp#4->left))), @_vcc_ptr_eq_null(*((tmp#4->right)))), ==(bst_max_key(tmp#4), @\int_max(*((tmp#4->key)), bst_max_key(*((tmp#4->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp#4->left))), @_vcc_ptr_neq_null(*((tmp#4->right)))), ==(bst_max_key(tmp#4), @\int_max(*((tmp#4->key)), bst_max_key(*((tmp#4->right)))))))); 
            assume $non_null($phys_ptr_cast(tmp#4, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp#4), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp#4->left))), @_vcc_ptr_neq_null(*((tmp#4->right)))), ==(bst_min_key(tmp#4), @\int_min(*((tmp#4->key)), @\int_min(bst_min_key(*((tmp#4->left))), bst_min_key(*((tmp#4->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp#4->left))), @_vcc_ptr_eq_null(*((tmp#4->right)))), ==(bst_min_key(tmp#4), @\int_min(*((tmp#4->key)), bst_min_key(*((tmp#4->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp#4->left))), @_vcc_ptr_neq_null(*((tmp#4->right)))), ==(bst_min_key(tmp#4), @\int_min(*((tmp#4->key)), bst_min_key(*((tmp#4->right)))))))); 
            assume $non_null($phys_ptr_cast(tmp#4, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp#4), ==(bst(tmp#4), &&(&&(&&(&&(&&(&&(&&(bst(*((tmp#4->left))), bst(*((tmp#4->right)))), unchecked!(@_vcc_oset_in(tmp#4, @_vcc_oset_union(bst_reach(*((tmp#4->left))), bst_reach(*((tmp#4->right))))))), unchecked!(@_vcc_intset_in(*((tmp#4->key)), @_vcc_intset_union(bst_keys(*((tmp#4->left))), bst_keys(*((tmp#4->right))))))), @_vcc_oset_disjoint(bst_reach(*((tmp#4->left))), bst_reach(*((tmp#4->right))))), @_vcc_intset_disjoint(bst_keys(*((tmp#4->left))), bst_keys(*((tmp#4->right))))), ==>(@_vcc_ptr_neq_null(*((tmp#4->left))), <(bst_max_key(*((tmp#4->left))), *((tmp#4->key))))), ==>(@_vcc_ptr_neq_null(*((tmp#4->right))), <(*((tmp#4->key)), bst_min_key(*((tmp#4->right)))))))); 
            assume $non_null($phys_ptr_cast(tmp#4, ^b_node)) ==> F#bst($s, $phys_ptr_cast(tmp#4, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(tmp#4, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp#4), ==(bst_reach(tmp#4), @_vcc_oset_union(@_vcc_oset_singleton(tmp#4), @_vcc_oset_union(bst_reach(*((tmp#4->left))), bst_reach(*((tmp#4->right))))))); 
            assume $non_null($phys_ptr_cast(tmp#4, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(tmp#4, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(tmp#4, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp#4), ==(bst_keys(tmp#4), @_vcc_intset_union(@_vcc_intset_singleton(*((tmp#4->key))), @_vcc_intset_union(bst_keys(*((tmp#4->left))), bst_keys(*((tmp#4->right))))))); 
            assume $non_null($phys_ptr_cast(tmp#4, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(tmp#4, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp#4), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp#4->left))), @_vcc_ptr_neq_null(*((tmp#4->right)))), ==(bst_max_key(tmp#4), @\int_max(*((tmp#4->key)), @\int_max(bst_max_key(*((tmp#4->left))), bst_max_key(*((tmp#4->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp#4->left))), @_vcc_ptr_eq_null(*((tmp#4->right)))), ==(bst_max_key(tmp#4), @\int_max(*((tmp#4->key)), bst_max_key(*((tmp#4->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp#4->left))), @_vcc_ptr_neq_null(*((tmp#4->right)))), ==(bst_max_key(tmp#4), @\int_max(*((tmp#4->key)), bst_max_key(*((tmp#4->right)))))))); 
            assume $non_null($phys_ptr_cast(tmp#4, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp#4), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp#4->left))), @_vcc_ptr_neq_null(*((tmp#4->right)))), ==(bst_min_key(tmp#4), @\int_min(*((tmp#4->key)), @\int_min(bst_min_key(*((tmp#4->left))), bst_min_key(*((tmp#4->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp#4->left))), @_vcc_ptr_eq_null(*((tmp#4->right)))), ==(bst_min_key(tmp#4), @\int_min(*((tmp#4->key)), bst_min_key(*((tmp#4->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp#4->left))), @_vcc_ptr_neq_null(*((tmp#4->right)))), ==(bst_min_key(tmp#4), @\int_min(*((tmp#4->key)), bst_min_key(*((tmp#4->right)))))))); 
            assume $non_null($phys_ptr_cast(tmp#4, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(tmp#4, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(tmp#4, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(tmp#4, ^b_node), ^b_node))));
            // return x; 
            $result := $phys_ptr_cast(P#x, ^b_node);
            assume true;
            assert $position_marker();
            goto #exit;
        }
    }

  anon6:
    // skip

  #exit:
// INV:LOOPTAIL
}



const unique l#public: $label;

const unique #tok$3^41.5: $token;

const unique #tok$3^39.19: $token;

const unique #tok$3^33.5: $token;

const unique #tok$3^31.19: $token;

const unique #tok$3^25.5: $token;

const unique #tok$3^24.5: $token;

const unique #tok$3^23.5: $token;

const unique #tok$3^20.20: $token;

const unique #tok$4^0.0: $token;

const unique #file^?3Cno?20file?3E: $token;

axiom $file_name_is(4, #file^?3Cno?20file?3E);

const unique #tok$3^5.3: $token;

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cbst?5Cbst?2Dinsert?2Drec.c: $token;

axiom $file_name_is(3, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cbst?5Cbst?2Dinsert?2Drec.c);

const unique #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cbst?5Cdryad_bst.h: $token;

axiom $file_name_is(2, #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cbst?5Cdryad_bst.h);

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h: $token;

axiom $file_name_is(1, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h);

const unique #distTp1: $ctype;

axiom #distTp1 == $ptr_to(^b_node);

